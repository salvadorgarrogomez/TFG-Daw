["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/mode-ofb.js"],"~:js","shadow$provide.module$node_modules$crypto_js$mode_ofb = function(global, require, module, exports) {\n  (function(root, factory, undef) {\n    \"object\" === typeof exports ? module.exports = exports = factory(require(\"module$node_modules$crypto_js$core\"), require(\"module$node_modules$crypto_js$cipher_core\")) : \"function\" === typeof define && define.amd ? define([\"./core\", \"./cipher-core\"], factory) : factory(root.CryptoJS);\n  })(this, function(CryptoJS) {\n    CryptoJS.mode.OFB = function() {\n      var OFB = CryptoJS.lib.BlockCipherMode.extend(), Encryptor = OFB.Encryptor = OFB.extend({processBlock:function(words, offset) {\n        var cipher = this._cipher, blockSize = cipher.blockSize, iv = this._iv, keystream = this._keystream;\n        iv && (keystream = this._keystream = iv.slice(0), this._iv = void 0);\n        cipher.encryptBlock(keystream, 0);\n        for (cipher = 0; cipher < blockSize; cipher++) {\n          words[offset + cipher] ^= keystream[cipher];\n        }\n      }});\n      OFB.Decryptor = Encryptor;\n      return OFB;\n    }();\n    return CryptoJS.mode.OFB;\n  });\n};\n","~:source","shadow$provide[\"module$node_modules$crypto_js$mode_ofb\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$core","~$shadow.js","~$module$node_modules$crypto_js$cipher_core"]],"~:properties",["^5",["_keystream","processBlock","Encryptor","Decryptor","_iv","OFB"]],"~:compiled-at",1745068084559,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$mode_ofb.js\",\n\"lineCount\":20,\n\"mappings\":\"AAAAA,cAAA,CAAA,sCAAA,GAA2D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACjG,WAAS,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,CAAuB;AACV,YAAvB,KAAI,MAAOH,QAAX,GAECD,MAAOC,CAAAA,OAFR,GAEkBA,OAFlB,GAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,EAA2BA,OAAA,CAAQ,2CAAR,CAA3B,CAF5B,GAI2B,UAAtB,KAAI,MAAOM,OAAX,IAAoCA,MAAOC,CAAAA,GAA3C,GAEJD,MAAA,CAAO,CAAC,QAAD,EAAW,eAAX,CAAP,EAAoCF,OAApC,CAFI,GAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAVD;AADiC,GAAhC,CAAA,CAaA,IAbA,EAaM,QAAS,CAACA,QAAD,CAAW;AAK3BA,YAASC,CAAAA,IAAKC,CAAAA,GAAd,GAAqB,QAAS,EAAG;AAC7B,UAAIA,MAAMF,QAASG,CAAAA,GAAIC,CAAAA,eAAgBC,CAAAA,MAA7B,EAAV,EAEIC,YAAYJ,GAAII,CAAAA,SAAhBA,GAA4BJ,GAAIG,CAAAA,MAAJ,CAAW,CACvCE,aAAcA,QAAS,CAACC,KAAD,EAAQC,MAAR,CAAgB;AAEnC,YAAIC,SAAS,IAAKC,CAAAA,OAAlB,EACIC,YAAYF,MAAOE,CAAAA,SADvB,EAEIC,KAAK,IAAKC,CAAAA,GAFd,EAGIC,YAAY,IAAKC,CAAAA,UAHrB;AAMIH,UAAJ,KACIE,SAGA,GAHY,IAAKC,CAAAA,UAGjB,GAH8BH,EAAGI,CAAAA,KAAH,CAAS,CAAT,CAG9B,EAAA,IAAKH,CAAAA,GAAL,GAAWI,IAAAA,EAJf;AAMAR,cAAOS,CAAAA,YAAP,CAAoBJ,SAApB,EAA+B,CAA/B,CAAA;AAGA,aAASK,MAAT,GAAa,CAAb,EAAgBA,MAAhB,GAAoBR,SAApB,EAA+BQ,MAAA,EAA/B;AACIZ,eAAA,CAAMC,MAAN,GAAeW,MAAf,CAAA,IAAqBL,SAAA,CAAUK,MAAV,CAArB;AADJ;AAjBmC,OADA,CAAX,CAFhC;AA0BAlB,SAAImB,CAAAA,SAAJ,GAAgBf,SAAhB;AAEA,aAAOJ,GAAP;AA7B6B,KAAZ,EAArB;AAiCA,WAAOF,QAASC,CAAAA,IAAKC,CAAAA,GAArB;AAtC2B,GAb1B,CAAD;AADkG,CAAnG;;\",\n\"sources\":[\"node_modules/crypto-js/mode-ofb.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$mode_ofb\\\"] = function(global,require,module,exports) {\\n;(function (root, factory, undef) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"), require(\\\"./cipher-core\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\", \\\"./cipher-core\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t/**\\n\\t * Output Feedback block mode.\\n\\t */\\n\\tCryptoJS.mode.OFB = (function () {\\n\\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\\n\\n\\t    var Encryptor = OFB.Encryptor = OFB.extend({\\n\\t        processBlock: function (words, offset) {\\n\\t            // Shortcuts\\n\\t            var cipher = this._cipher\\n\\t            var blockSize = cipher.blockSize;\\n\\t            var iv = this._iv;\\n\\t            var keystream = this._keystream;\\n\\n\\t            // Generate keystream\\n\\t            if (iv) {\\n\\t                keystream = this._keystream = iv.slice(0);\\n\\n\\t                // Remove IV for subsequent blocks\\n\\t                this._iv = undefined;\\n\\t            }\\n\\t            cipher.encryptBlock(keystream, 0);\\n\\n\\t            // Encrypt\\n\\t            for (var i = 0; i < blockSize; i++) {\\n\\t                words[offset + i] ^= keystream[i];\\n\\t            }\\n\\t        }\\n\\t    });\\n\\n\\t    OFB.Decryptor = Encryptor;\\n\\n\\t    return OFB;\\n\\t}());\\n\\n\\n\\treturn CryptoJS.mode.OFB;\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"undef\",\"define\",\"amd\",\"CryptoJS\",\"mode\",\"OFB\",\"lib\",\"BlockCipherMode\",\"extend\",\"Encryptor\",\"processBlock\",\"words\",\"offset\",\"cipher\",\"_cipher\",\"blockSize\",\"iv\",\"_iv\",\"keystream\",\"_keystream\",\"slice\",\"undefined\",\"encryptBlock\",\"i\",\"Decryptor\"]\n}\n"]