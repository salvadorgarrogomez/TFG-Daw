["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/hmac.js"],"~:js","shadow$provide.module$node_modules$crypto_js$hmac = function(global, require, module, exports) {\n  (function(root, factory) {\n    \"object\" === typeof exports ? module.exports = exports = factory(require(\"module$node_modules$crypto_js$core\")) : \"function\" === typeof define && define.amd ? define([\"./core\"], factory) : factory(root.CryptoJS);\n  })(this, function(CryptoJS) {\n    (function() {\n      var Utf8 = CryptoJS.enc.Utf8;\n      CryptoJS.algo.HMAC = CryptoJS.lib.Base.extend({init:function(hasher, key) {\n        hasher = this._hasher = new hasher.init();\n        \"string\" == typeof key && (key = Utf8.parse(key));\n        var hasherBlockSize = hasher.blockSize, hasherBlockSizeBytes = 4 * hasherBlockSize;\n        key.sigBytes > hasherBlockSizeBytes && (key = hasher.finalize(key));\n        key.clamp();\n        hasher = this._oKey = key.clone();\n        key = this._iKey = key.clone();\n        for (var oKeyWords = hasher.words, iKeyWords = key.words, i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 1549556828, iKeyWords[i] ^= 909522486;\n        }\n        hasher.sigBytes = key.sigBytes = hasherBlockSizeBytes;\n        this.reset();\n      }, reset:function() {\n        var hasher = this._hasher;\n        hasher.reset();\n        hasher.update(this._iKey);\n      }, update:function(messageUpdate) {\n        this._hasher.update(messageUpdate);\n        return this;\n      }, finalize:function(messageUpdate) {\n        var hasher = this._hasher;\n        messageUpdate = hasher.finalize(messageUpdate);\n        hasher.reset();\n        return hasher.finalize(this._oKey.clone().concat(messageUpdate));\n      }});\n    })();\n  });\n};\n","~:source","shadow$provide[\"module$node_modules$crypto_js$hmac\"] = function(global,require,module,exports) {\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$core","~$shadow.js"]],"~:properties",["^5",["_hasher","_oKey","reset","HMAC","update","sigBytes","init","_iKey","finalize"]],"~:compiled-at",1745068084546,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$hmac.js\",\n\"lineCount\":36,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/crypto-js/hmac.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$hmac\\\"] = function(global,require,module,exports) {\\n;(function (root, factory) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t(function () {\\n\\t    // Shortcuts\\n\\t    var C = CryptoJS;\\n\\t    var C_lib = C.lib;\\n\\t    var Base = C_lib.Base;\\n\\t    var C_enc = C.enc;\\n\\t    var Utf8 = C_enc.Utf8;\\n\\t    var C_algo = C.algo;\\n\\n\\t    /**\\n\\t     * HMAC algorithm.\\n\\t     */\\n\\t    var HMAC = C_algo.HMAC = Base.extend({\\n\\t        /**\\n\\t         * Initializes a newly created HMAC.\\n\\t         *\\n\\t         * @param {Hasher} hasher The hash algorithm to use.\\n\\t         * @param {WordArray|string} key The secret key.\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\\n\\t         */\\n\\t        init: function (hasher, key) {\\n\\t            // Init hasher\\n\\t            hasher = this._hasher = new hasher.init();\\n\\n\\t            // Convert string to WordArray, else assume WordArray already\\n\\t            if (typeof key == 'string') {\\n\\t                key = Utf8.parse(key);\\n\\t            }\\n\\n\\t            // Shortcuts\\n\\t            var hasherBlockSize = hasher.blockSize;\\n\\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\\n\\n\\t            // Allow arbitrary length keys\\n\\t            if (key.sigBytes > hasherBlockSizeBytes) {\\n\\t                key = hasher.finalize(key);\\n\\t            }\\n\\n\\t            // Clamp excess bits\\n\\t            key.clamp();\\n\\n\\t            // Clone key for inner and outer pads\\n\\t            var oKey = this._oKey = key.clone();\\n\\t            var iKey = this._iKey = key.clone();\\n\\n\\t            // Shortcuts\\n\\t            var oKeyWords = oKey.words;\\n\\t            var iKeyWords = iKey.words;\\n\\n\\t            // XOR keys with pad constants\\n\\t            for (var i = 0; i < hasherBlockSize; i++) {\\n\\t                oKeyWords[i] ^= 0x5c5c5c5c;\\n\\t                iKeyWords[i] ^= 0x36363636;\\n\\t            }\\n\\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\\n\\n\\t            // Set initial values\\n\\t            this.reset();\\n\\t        },\\n\\n\\t        /**\\n\\t         * Resets this HMAC to its initial state.\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     hmacHasher.reset();\\n\\t         */\\n\\t        reset: function () {\\n\\t            // Shortcut\\n\\t            var hasher = this._hasher;\\n\\n\\t            // Reset\\n\\t            hasher.reset();\\n\\t            hasher.update(this._iKey);\\n\\t        },\\n\\n\\t        /**\\n\\t         * Updates this HMAC with a message.\\n\\t         *\\n\\t         * @param {WordArray|string} messageUpdate The message to append.\\n\\t         *\\n\\t         * @return {HMAC} This HMAC instance.\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     hmacHasher.update('message');\\n\\t         *     hmacHasher.update(wordArray);\\n\\t         */\\n\\t        update: function (messageUpdate) {\\n\\t            this._hasher.update(messageUpdate);\\n\\n\\t            // Chainable\\n\\t            return this;\\n\\t        },\\n\\n\\t        /**\\n\\t         * Finalizes the HMAC computation.\\n\\t         * Note that the finalize operation is effectively a destructive, read-once operation.\\n\\t         *\\n\\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\\n\\t         *\\n\\t         * @return {WordArray} The HMAC.\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var hmac = hmacHasher.finalize();\\n\\t         *     var hmac = hmacHasher.finalize('message');\\n\\t         *     var hmac = hmacHasher.finalize(wordArray);\\n\\t         */\\n\\t        finalize: function (messageUpdate) {\\n\\t            // Shortcut\\n\\t            var hasher = this._hasher;\\n\\n\\t            // Compute HMAC\\n\\t            var innerHash = hasher.finalize(messageUpdate);\\n\\t            hasher.reset();\\n\\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\\n\\n\\t            return hmac;\\n\\t        }\\n\\t    });\\n\\t}());\\n\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"define\",\"amd\",\"CryptoJS\",\"Utf8\",\"enc\",\"algo\",\"HMAC\",\"lib\",\"Base\",\"extend\",\"init\",\"hasher\",\"key\",\"_hasher\",\"parse\",\"hasherBlockSize\",\"blockSize\",\"hasherBlockSizeBytes\",\"sigBytes\",\"finalize\",\"clamp\",\"oKey\",\"_oKey\",\"clone\",\"iKey\",\"_iKey\",\"oKeyWords\",\"words\",\"iKeyWords\",\"i\",\"reset\",\"update\",\"messageUpdate\",\"innerHash\",\"hmac\",\"concat\"]\n}\n"]