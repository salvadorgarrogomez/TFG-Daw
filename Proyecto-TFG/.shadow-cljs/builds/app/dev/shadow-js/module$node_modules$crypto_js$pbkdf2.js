["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/pbkdf2.js"],"~:js","shadow$provide.module$node_modules$crypto_js$pbkdf2 = function(global, require, module, exports) {\n  (function(root, factory, undef) {\n    \"object\" === typeof exports ? module.exports = exports = factory(require(\"module$node_modules$crypto_js$core\"), require(\"module$node_modules$crypto_js$sha256\"), require(\"module$node_modules$crypto_js$hmac\")) : \"function\" === typeof define && define.amd ? define([\"./core\", \"./sha256\", \"./hmac\"], factory) : factory(root.CryptoJS);\n  })(this, function(CryptoJS) {\n    (function() {\n      var C_lib = CryptoJS.lib, Base = C_lib.Base, WordArray = C_lib.WordArray;\n      C_lib = CryptoJS.algo;\n      var HMAC = C_lib.HMAC, PBKDF2 = C_lib.PBKDF2 = Base.extend({cfg:Base.extend({keySize:4, hasher:C_lib.SHA256, iterations:250000}), init:function(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      }, compute:function(password, salt) {\n        var cfg = this.cfg;\n        password = HMAC.create(cfg.hasher, password);\n        var derivedKey = WordArray.create(), blockIndex = WordArray.create([1]), derivedKeyWords = derivedKey.words, blockIndexWords = blockIndex.words, keySize = cfg.keySize;\n        for (cfg = cfg.iterations; derivedKeyWords.length < keySize;) {\n          var block = password.update(salt).finalize(blockIndex);\n          password.reset();\n          for (var blockWords = block.words, blockWordsLength = blockWords.length, intermediate = block, i = 1; i < cfg; i++) {\n            intermediate = password.finalize(intermediate);\n            password.reset();\n            for (var intermediateWords = intermediate.words, j = 0; j < blockWordsLength; j++) {\n              blockWords[j] ^= intermediateWords[j];\n            }\n          }\n          derivedKey.concat(block);\n          blockIndexWords[0]++;\n        }\n        derivedKey.sigBytes = 4 * keySize;\n        return derivedKey;\n      }});\n      CryptoJS.PBKDF2 = function(password, salt, cfg) {\n        return PBKDF2.create(cfg).compute(password, salt);\n      };\n    })();\n    return CryptoJS.PBKDF2;\n  });\n};\n","~:source","shadow$provide[\"module$node_modules$crypto_js$pbkdf2\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA256\n\t         * @property {number} iterations The number of iterations to perform. Default: 250000\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA256,\n\t            iterations: 250000\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$sha256","~$module$node_modules$crypto_js$hmac","~$module$node_modules$crypto_js$core","~$shadow.js"]],"~:properties",["^5",["keySize","cfg","iterations","hasher","sigBytes","init","compute","PBKDF2"]],"~:compiled-at",1745068084548,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$pbkdf2.js\",\n\"lineCount\":37,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/crypto-js/pbkdf2.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$pbkdf2\\\"] = function(global,require,module,exports) {\\n;(function (root, factory, undef) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"), require(\\\"./sha256\\\"), require(\\\"./hmac\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\", \\\"./sha256\\\", \\\"./hmac\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t(function () {\\n\\t    // Shortcuts\\n\\t    var C = CryptoJS;\\n\\t    var C_lib = C.lib;\\n\\t    var Base = C_lib.Base;\\n\\t    var WordArray = C_lib.WordArray;\\n\\t    var C_algo = C.algo;\\n\\t    var SHA256 = C_algo.SHA256;\\n\\t    var HMAC = C_algo.HMAC;\\n\\n\\t    /**\\n\\t     * Password-Based Key Derivation Function 2 algorithm.\\n\\t     */\\n\\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\\n\\t        /**\\n\\t         * Configuration options.\\n\\t         *\\n\\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\\n\\t         * @property {Hasher} hasher The hasher to use. Default: SHA256\\n\\t         * @property {number} iterations The number of iterations to perform. Default: 250000\\n\\t         */\\n\\t        cfg: Base.extend({\\n\\t            keySize: 128/32,\\n\\t            hasher: SHA256,\\n\\t            iterations: 250000\\n\\t        }),\\n\\n\\t        /**\\n\\t         * Initializes a newly created key derivation function.\\n\\t         *\\n\\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\\n\\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\\n\\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\\n\\t         */\\n\\t        init: function (cfg) {\\n\\t            this.cfg = this.cfg.extend(cfg);\\n\\t        },\\n\\n\\t        /**\\n\\t         * Computes the Password-Based Key Derivation Function 2.\\n\\t         *\\n\\t         * @param {WordArray|string} password The password.\\n\\t         * @param {WordArray|string} salt A salt.\\n\\t         *\\n\\t         * @return {WordArray} The derived key.\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var key = kdf.compute(password, salt);\\n\\t         */\\n\\t        compute: function (password, salt) {\\n\\t            // Shortcut\\n\\t            var cfg = this.cfg;\\n\\n\\t            // Init HMAC\\n\\t            var hmac = HMAC.create(cfg.hasher, password);\\n\\n\\t            // Initial values\\n\\t            var derivedKey = WordArray.create();\\n\\t            var blockIndex = WordArray.create([0x00000001]);\\n\\n\\t            // Shortcuts\\n\\t            var derivedKeyWords = derivedKey.words;\\n\\t            var blockIndexWords = blockIndex.words;\\n\\t            var keySize = cfg.keySize;\\n\\t            var iterations = cfg.iterations;\\n\\n\\t            // Generate key\\n\\t            while (derivedKeyWords.length < keySize) {\\n\\t                var block = hmac.update(salt).finalize(blockIndex);\\n\\t                hmac.reset();\\n\\n\\t                // Shortcuts\\n\\t                var blockWords = block.words;\\n\\t                var blockWordsLength = blockWords.length;\\n\\n\\t                // Iterations\\n\\t                var intermediate = block;\\n\\t                for (var i = 1; i < iterations; i++) {\\n\\t                    intermediate = hmac.finalize(intermediate);\\n\\t                    hmac.reset();\\n\\n\\t                    // Shortcut\\n\\t                    var intermediateWords = intermediate.words;\\n\\n\\t                    // XOR intermediate with block\\n\\t                    for (var j = 0; j < blockWordsLength; j++) {\\n\\t                        blockWords[j] ^= intermediateWords[j];\\n\\t                    }\\n\\t                }\\n\\n\\t                derivedKey.concat(block);\\n\\t                blockIndexWords[0]++;\\n\\t            }\\n\\t            derivedKey.sigBytes = keySize * 4;\\n\\n\\t            return derivedKey;\\n\\t        }\\n\\t    });\\n\\n\\t    /**\\n\\t     * Computes the Password-Based Key Derivation Function 2.\\n\\t     *\\n\\t     * @param {WordArray|string} password The password.\\n\\t     * @param {WordArray|string} salt A salt.\\n\\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\\n\\t     *\\n\\t     * @return {WordArray} The derived key.\\n\\t     *\\n\\t     * @static\\n\\t     *\\n\\t     * @example\\n\\t     *\\n\\t     *     var key = CryptoJS.PBKDF2(password, salt);\\n\\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\\n\\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\\n\\t     */\\n\\t    C.PBKDF2 = function (password, salt, cfg) {\\n\\t        return PBKDF2.create(cfg).compute(password, salt);\\n\\t    };\\n\\t}());\\n\\n\\n\\treturn CryptoJS.PBKDF2;\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"undef\",\"define\",\"amd\",\"CryptoJS\",\"C_lib\",\"lib\",\"Base\",\"WordArray\",\"C_algo\",\"algo\",\"HMAC\",\"PBKDF2\",\"extend\",\"cfg\",\"keySize\",\"hasher\",\"SHA256\",\"iterations\",\"init\",\"compute\",\"password\",\"salt\",\"hmac\",\"create\",\"derivedKey\",\"blockIndex\",\"derivedKeyWords\",\"words\",\"blockIndexWords\",\"length\",\"block\",\"update\",\"finalize\",\"reset\",\"blockWords\",\"blockWordsLength\",\"intermediate\",\"i\",\"intermediateWords\",\"j\",\"concat\",\"sigBytes\",\"C.PBKDF2\"]\n}\n"]