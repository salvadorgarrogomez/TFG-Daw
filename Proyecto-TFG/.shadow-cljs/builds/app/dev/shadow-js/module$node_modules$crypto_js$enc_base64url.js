["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/enc-base64url.js"],"~:js","shadow$provide.module$node_modules$crypto_js$enc_base64url = function(global, require, module, exports) {\n  (function(root, factory) {\n    \"object\" === typeof exports ? module.exports = exports = factory(require(\"module$node_modules$crypto_js$core\")) : \"function\" === typeof define && define.amd ? define([\"./core\"], factory) : factory(root.CryptoJS);\n  })(this, function(CryptoJS) {\n    (function() {\n      var WordArray = CryptoJS.lib.WordArray;\n      CryptoJS.enc.Base64url = {stringify:function(wordArray, urlSafe) {\n        void 0 === urlSafe && (urlSafe = !0);\n        var words = wordArray.words, sigBytes = wordArray.sigBytes;\n        urlSafe = urlSafe ? this._safe_map : this._map;\n        wordArray.clamp();\n        wordArray = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          for (var triplet = (words[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255, j = 0; 4 > j && i + 0.75 * j < sigBytes; j++) {\n            wordArray.push(urlSafe.charAt(triplet >>> 6 * (3 - j) & 63));\n          }\n        }\n        if (words = urlSafe.charAt(64)) {\n          for (; wordArray.length % 4;) {\n            wordArray.push(words);\n          }\n        }\n        return wordArray.join(\"\");\n      }, parse:function(base64Str, urlSafe) {\n        void 0 === urlSafe && (urlSafe = !0);\n        var base64StrLength = base64Str.length, map = urlSafe ? this._safe_map : this._map;\n        urlSafe = this._reverseMap;\n        if (!urlSafe) {\n          urlSafe = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            urlSafe[map.charCodeAt(j)] = j;\n          }\n        }\n        if (map = map.charAt(64)) {\n          map = base64Str.indexOf(map), -1 !== map && (base64StrLength = map);\n        }\n        map = [];\n        for (var i = j = 0; i < base64StrLength; i++) {\n          if (i % 4) {\n            var bits1 = urlSafe[base64Str.charCodeAt(i - 1)] << i % 4 * 2, bits2 = urlSafe[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n            map[j >>> 2] |= (bits1 | bits2) << 24 - j % 4 * 8;\n            j++;\n          }\n        }\n        return WordArray.create(map, j);\n      }, _map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\x3d\", _safe_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"};\n    })();\n    return CryptoJS.enc.Base64url;\n  });\n};\n","~:source","shadow$provide[\"module$node_modules$crypto_js$enc_base64url\"] = function(global,require,module,exports) {\n;(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64url encoding strategy.\n\t     */\n\t    var Base64url = C_enc.Base64url = {\n\t        /**\n\t         * Converts a word array to a Base64url string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {string} The Base64url string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray, urlSafe) {\n\t            if (urlSafe === undefined) {\n\t                urlSafe = true\n\t            }\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64url string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64url string.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n\t         */\n\t        parse: function (base64Str, urlSafe) {\n\t            if (urlSafe === undefined) {\n\t                urlSafe = true\n\t            }\n\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                reverseMap = this._reverseMap = [];\n\t                for (var j = 0; j < map.length; j++) {\n\t                    reverseMap[map.charCodeAt(j)] = j;\n\t                }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t        var words = [];\n\t        var nBytes = 0;\n\t        for (var i = 0; i < base64StrLength; i++) {\n\t            if (i % 4) {\n\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t                var bitsCombined = bits1 | bits2;\n\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t                nBytes++;\n\t            }\n\t        }\n\t        return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64url;\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$core","~$shadow.js"]],"~:properties",["^5",["_safe_map","_reverseMap","Base64url","stringify","parse","_map"]],"~:compiled-at",1745068084490,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$enc_base64url.js\",\n\"lineCount\":51,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/crypto-js/enc-base64url.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$enc_base64url\\\"] = function(global,require,module,exports) {\\n;(function (root, factory) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t(function () {\\n\\t    // Shortcuts\\n\\t    var C = CryptoJS;\\n\\t    var C_lib = C.lib;\\n\\t    var WordArray = C_lib.WordArray;\\n\\t    var C_enc = C.enc;\\n\\n\\t    /**\\n\\t     * Base64url encoding strategy.\\n\\t     */\\n\\t    var Base64url = C_enc.Base64url = {\\n\\t        /**\\n\\t         * Converts a word array to a Base64url string.\\n\\t         *\\n\\t         * @param {WordArray} wordArray The word array.\\n\\t         *\\n\\t         * @param {boolean} urlSafe Whether to use url safe\\n\\t         *\\n\\t         * @return {string} The Base64url string.\\n\\t         *\\n\\t         * @static\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\\n\\t         */\\n\\t        stringify: function (wordArray, urlSafe) {\\n\\t            if (urlSafe === undefined) {\\n\\t                urlSafe = true\\n\\t            }\\n\\t            // Shortcuts\\n\\t            var words = wordArray.words;\\n\\t            var sigBytes = wordArray.sigBytes;\\n\\t            var map = urlSafe ? this._safe_map : this._map;\\n\\n\\t            // Clamp excess bits\\n\\t            wordArray.clamp();\\n\\n\\t            // Convert\\n\\t            var base64Chars = [];\\n\\t            for (var i = 0; i < sigBytes; i += 3) {\\n\\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\\n\\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\\n\\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\\n\\n\\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\\n\\n\\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\\n\\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\\n\\t                }\\n\\t            }\\n\\n\\t            // Add padding\\n\\t            var paddingChar = map.charAt(64);\\n\\t            if (paddingChar) {\\n\\t                while (base64Chars.length % 4) {\\n\\t                    base64Chars.push(paddingChar);\\n\\t                }\\n\\t            }\\n\\n\\t            return base64Chars.join('');\\n\\t        },\\n\\n\\t        /**\\n\\t         * Converts a Base64url string to a word array.\\n\\t         *\\n\\t         * @param {string} base64Str The Base64url string.\\n\\t         *\\n\\t         * @param {boolean} urlSafe Whether to use url safe\\n\\t         *\\n\\t         * @return {WordArray} The word array.\\n\\t         *\\n\\t         * @static\\n\\t         *\\n\\t         * @example\\n\\t         *\\n\\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\\n\\t         */\\n\\t        parse: function (base64Str, urlSafe) {\\n\\t            if (urlSafe === undefined) {\\n\\t                urlSafe = true\\n\\t            }\\n\\n\\t            // Shortcuts\\n\\t            var base64StrLength = base64Str.length;\\n\\t            var map = urlSafe ? this._safe_map : this._map;\\n\\t            var reverseMap = this._reverseMap;\\n\\n\\t            if (!reverseMap) {\\n\\t                reverseMap = this._reverseMap = [];\\n\\t                for (var j = 0; j < map.length; j++) {\\n\\t                    reverseMap[map.charCodeAt(j)] = j;\\n\\t                }\\n\\t            }\\n\\n\\t            // Ignore padding\\n\\t            var paddingChar = map.charAt(64);\\n\\t            if (paddingChar) {\\n\\t                var paddingIndex = base64Str.indexOf(paddingChar);\\n\\t                if (paddingIndex !== -1) {\\n\\t                    base64StrLength = paddingIndex;\\n\\t                }\\n\\t            }\\n\\n\\t            // Convert\\n\\t            return parseLoop(base64Str, base64StrLength, reverseMap);\\n\\n\\t        },\\n\\n\\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\\n\\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\\n\\t    };\\n\\n\\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\\n\\t        var words = [];\\n\\t        var nBytes = 0;\\n\\t        for (var i = 0; i < base64StrLength; i++) {\\n\\t            if (i % 4) {\\n\\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\\n\\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\\n\\t                var bitsCombined = bits1 | bits2;\\n\\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\\n\\t                nBytes++;\\n\\t            }\\n\\t        }\\n\\t        return WordArray.create(words, nBytes);\\n\\t    }\\n\\t}());\\n\\n\\n\\treturn CryptoJS.enc.Base64url;\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"define\",\"amd\",\"CryptoJS\",\"WordArray\",\"lib\",\"enc\",\"Base64url\",\"stringify\",\"wordArray\",\"urlSafe\",\"undefined\",\"words\",\"sigBytes\",\"map\",\"_safe_map\",\"_map\",\"clamp\",\"base64Chars\",\"i\",\"triplet\",\"j\",\"push\",\"charAt\",\"paddingChar\",\"length\",\"join\",\"parse\",\"base64Str\",\"base64StrLength\",\"reverseMap\",\"_reverseMap\",\"charCodeAt\",\"paddingIndex\",\"indexOf\",\"nBytes\",\"bits1\",\"bits2\",\"create\"]\n}\n"]