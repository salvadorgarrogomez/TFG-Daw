["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/crypto-js/mode-ctr-gladman.js"],"~:js","shadow$provide.module$node_modules$crypto_js$mode_ctr_gladman = function(global, require, module, exports) {\n  (function(root, factory, undef) {\n    \"object\" === typeof exports ? module.exports = exports = factory(require(\"module$node_modules$crypto_js$core\"), require(\"module$node_modules$crypto_js$cipher_core\")) : \"function\" === typeof define && define.amd ? define([\"./core\", \"./cipher-core\"], factory) : factory(root.CryptoJS);\n  })(this, function(CryptoJS) {\n    CryptoJS.mode.CTRGladman = function() {\n      function incWord(word) {\n        if (255 === (word >> 24 & 255)) {\n          var b1 = word >> 16 & 255, b2 = word >> 8 & 255, b3 = word & 255;\n          255 === b1 ? (b1 = 0, 255 === b2 ? (b2 = 0, 255 === b3 ? b3 = 0 : ++b3) : ++b2) : ++b1;\n          word = b1 << 16;\n          word += b2 << 8;\n          word += b3;\n        } else {\n          word += 16777216;\n        }\n        return word;\n      }\n      var CTRGladman = CryptoJS.lib.BlockCipherMode.extend(), Encryptor = CTRGladman.Encryptor = CTRGladman.extend({processBlock:function(words, offset) {\n        var cipher = this._cipher, blockSize = cipher.blockSize, iv = this._iv, counter = this._counter;\n        iv && (counter = this._counter = iv.slice(0), this._iv = void 0);\n        iv = counter;\n        0 === (iv[0] = incWord(iv[0])) && (iv[1] = incWord(iv[1]));\n        counter = counter.slice(0);\n        cipher.encryptBlock(counter, 0);\n        for (cipher = 0; cipher < blockSize; cipher++) {\n          words[offset + cipher] ^= counter[cipher];\n        }\n      }});\n      CTRGladman.Decryptor = Encryptor;\n      return CTRGladman;\n    }();\n    return CryptoJS.mode.CTRGladman;\n  });\n};\n","~:source","shadow$provide[\"module$node_modules$crypto_js$mode_ctr_gladman\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$crypto_js$core","~$shadow.js","~$module$node_modules$crypto_js$cipher_core"]],"~:properties",["^5",["CTRGladman","processBlock","Encryptor","Decryptor","_iv","_counter"]],"~:compiled-at",1745068084558,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$crypto_js$mode_ctr_gladman.js\",\n\"lineCount\":35,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/crypto-js/mode-ctr-gladman.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$crypto_js$mode_ctr_gladman\\\"] = function(global,require,module,exports) {\\n;(function (root, factory, undef) {\\n\\tif (typeof exports === \\\"object\\\") {\\n\\t\\t// CommonJS\\n\\t\\tmodule.exports = exports = factory(require(\\\"./core\\\"), require(\\\"./cipher-core\\\"));\\n\\t}\\n\\telse if (typeof define === \\\"function\\\" && define.amd) {\\n\\t\\t// AMD\\n\\t\\tdefine([\\\"./core\\\", \\\"./cipher-core\\\"], factory);\\n\\t}\\n\\telse {\\n\\t\\t// Global (browser)\\n\\t\\tfactory(root.CryptoJS);\\n\\t}\\n}(this, function (CryptoJS) {\\n\\n\\t/** @preserve\\n\\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\\n\\t * derived from CryptoJS.mode.CTR\\n\\t * Jan Hruby jhruby.web@gmail.com\\n\\t */\\n\\tCryptoJS.mode.CTRGladman = (function () {\\n\\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\\n\\n\\t\\tfunction incWord(word)\\n\\t\\t{\\n\\t\\t\\tif (((word >> 24) & 0xff) === 0xff) { //overflow\\n\\t\\t\\tvar b1 = (word >> 16)&0xff;\\n\\t\\t\\tvar b2 = (word >> 8)&0xff;\\n\\t\\t\\tvar b3 = word & 0xff;\\n\\n\\t\\t\\tif (b1 === 0xff) // overflow b1\\n\\t\\t\\t{\\n\\t\\t\\tb1 = 0;\\n\\t\\t\\tif (b2 === 0xff)\\n\\t\\t\\t{\\n\\t\\t\\t\\tb2 = 0;\\n\\t\\t\\t\\tif (b3 === 0xff)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tb3 = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t++b3;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\t++b2;\\n\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t++b1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tword = 0;\\n\\t\\t\\tword += (b1 << 16);\\n\\t\\t\\tword += (b2 << 8);\\n\\t\\t\\tword += b3;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\tword += (0x01 << 24);\\n\\t\\t\\t}\\n\\t\\t\\treturn word;\\n\\t\\t}\\n\\n\\t\\tfunction incCounter(counter)\\n\\t\\t{\\n\\t\\t\\tif ((counter[0] = incWord(counter[0])) === 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\\n\\t\\t\\t\\tcounter[1] = incWord(counter[1]);\\n\\t\\t\\t}\\n\\t\\t\\treturn counter;\\n\\t\\t}\\n\\n\\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\\n\\t        processBlock: function (words, offset) {\\n\\t            // Shortcuts\\n\\t            var cipher = this._cipher\\n\\t            var blockSize = cipher.blockSize;\\n\\t            var iv = this._iv;\\n\\t            var counter = this._counter;\\n\\n\\t            // Generate keystream\\n\\t            if (iv) {\\n\\t                counter = this._counter = iv.slice(0);\\n\\n\\t                // Remove IV for subsequent blocks\\n\\t                this._iv = undefined;\\n\\t            }\\n\\n\\t\\t\\t\\tincCounter(counter);\\n\\n\\t\\t\\t\\tvar keystream = counter.slice(0);\\n\\t            cipher.encryptBlock(keystream, 0);\\n\\n\\t            // Encrypt\\n\\t            for (var i = 0; i < blockSize; i++) {\\n\\t                words[offset + i] ^= keystream[i];\\n\\t            }\\n\\t        }\\n\\t    });\\n\\n\\t    CTRGladman.Decryptor = Encryptor;\\n\\n\\t    return CTRGladman;\\n\\t}());\\n\\n\\n\\n\\n\\treturn CryptoJS.mode.CTRGladman;\\n\\n}));\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"root\",\"factory\",\"undef\",\"define\",\"amd\",\"CryptoJS\",\"mode\",\"CTRGladman\",\"incWord\",\"word\",\"b1\",\"b2\",\"b3\",\"lib\",\"BlockCipherMode\",\"extend\",\"Encryptor\",\"processBlock\",\"words\",\"offset\",\"cipher\",\"_cipher\",\"blockSize\",\"iv\",\"_iv\",\"counter\",\"_counter\",\"slice\",\"undefined\",\"keystream\",\"encryptBlock\",\"i\",\"Decryptor\"]\n}\n"]