["^ ","~:resource-id",["~:shadow.build.classpath/resource","bide/impl/router.js"],"~:js","goog.provide(\"bide.impl.router\");\ngoog.require(\"bide.impl.path\");\ngoog.require(\"bide.impl.helpers\");\ngoog.require(\"goog.object\");\ngoog.scope(function() {\n  function Router() {\n    this.items = [];\n    this.map = {};\n  }\n  function Route() {\n    this.re = null;\n    this.name = null;\n    this.keys = null;\n    this.format = null;\n  }\n  function insert(router, path, name, options) {\n    var route = new Route();\n    route.re = _path.parse(path, options);\n    route.keys = route.re._keys;\n    route.format = _path.compileTokens(route.re._tokens);\n    route.name = name;\n    if (router == null) {\n      router = new Router();\n    }\n    router.items.push(route);\n    name = name.toString();\n    if (router.map[name] === undefined) {\n      router.map[name] = [route];\n    } else {\n      router.map[name].push(route);\n    }\n    return router;\n  }\n  function encodeQueryParams(params) {\n    var encode = encodeURIComponent;\n    var keys = goog.object.getKeys(params);\n    var result = [];\n    var i = 0;\n    for (; i < keys.length; i++) {\n      var key = keys[i];\n      var val = params[key];\n      if (val === undefined) {\n      } else if (val === null) {\n        result.push(encode(key));\n      } else if (isArray(val)) {\n        var _result = [];\n        var y = 0;\n        for (; y < val.length; y++) {\n          var _val = val[y];\n          if (_val === undefined) {\n          } else if (_val === null) {\n            _result.push(encode(key));\n          } else {\n            _result.push(encode(key) + \"\\x3d\" + encode(_val));\n          }\n        }\n        result.push(_result.join(\"\\x26\"));\n      } else {\n        result.push(encode(key) + \"\\x3d\" + encode(val));\n      }\n    }\n    return result.join(\"\\x26\");\n  }\n  function parseQuery(query) {\n    var result = {};\n    if (!typeof val == \"string\") {\n      return result;\n    }\n    query = query.trim().replace(/^(\\?|#|&)/, \"\");\n    if (!query) {\n      return result;\n    }\n    var params = query.split(\"\\x26\");\n    var i = 0;\n    for (; i < params.length; i++) {\n      var parts = params[i].replace(/\\+/g, \" \").split(\"\\x3d\");\n      var key = parts.shift();\n      var val = parts.length > 0 ? parts.join(\"\\x3d\") : undefined;\n      key = decodeURIComponent(key);\n      if (val === undefined) {\n        val = null;\n      } else {\n        val = decodeURIComponent(val);\n      }\n      if (result[key] === undefined) {\n        result[key] = val;\n      } else if (isArray(result[key])) {\n        result[key].push(val);\n      } else {\n        result[key] = [result[key], val];\n      }\n    }\n    return result;\n  }\n  function match(router, path) {\n    var query;\n    if (path.indexOf(\"?\") !== -1) {\n      var parts = path.split(\"?\");\n      path = parts[0];\n      query = parseQuery(parts[1]);\n    } else {\n      path = path;\n      query = null;\n    }\n    var items = router.items;\n    var result = null;\n    var item = null;\n    var i = 0;\n    for (; i < items.length; i++) {\n      item = items[i];\n      result = item.re.exec(path);\n      if (result !== null) {\n        break;\n      }\n    }\n    if (result === null) {\n      return null;\n    }\n    var params = {};\n    i = 0;\n    for (; i < item.keys.length; i++) {\n      var key = item.keys[i];\n      var res = result[i + 1];\n      if (res != null) {\n        params[key.name] = res;\n      }\n    }\n    if (isEmpty(params)) {\n      params = null;\n    }\n    return [item.name, params, query];\n  }\n  function resolve(router, name, params, query) {\n    var routes = router.map[name.toString()] || null;\n    if (routes == null) {\n      return null;\n    }\n    var result = null;\n    if (isEmpty(params)) {\n      var i = 0;\n      for (; i < routes.length; i++) {\n        try {\n          result = routes[i].format(params);\n          break;\n        } catch (e) {\n        }\n      }\n    } else {\n      i = 0;\n      for (; i < routes.length; i++) {\n        if (routes[i].keys.length === 0) {\n          continue;\n        }\n        try {\n          result = routes[i].format(params);\n          break;\n        } catch (e) {\n        }\n      }\n    }\n    if (query != null && result != null) {\n      result = result + \"?\" + encodeQueryParams(query);\n    }\n    return result;\n  }\n  function isRouter(v) {\n    return v instanceof Router;\n  }\n  function empty() {\n    return new Router();\n  }\n  function isEmpty(obj) {\n    var x;\n    for (x in obj) {\n      return false;\n    }\n    return true;\n  }\n  var _path = bide.impl.path;\n  var isArray = bide.impl.helpers.isArray;\n  var module = bide.impl.router;\n  module.insert = insert;\n  module.match = match;\n  module.resolve = resolve;\n  module.isRouter = isRouter;\n  module.empty = empty;\n  module.parseQuery = parseQuery;\n  module.encodeQueryParams = encodeQueryParams;\n});\n","~:source","/**\n * router\n *\n * @author Andrey Antukh <niwi@niwi.nz>, 2016\n * @license BSD License <https://opensource.org/licenses/BSD-2-Clause>\n */\n\ngoog.provide(\"bide.impl.router\");\n\ngoog.require(\"bide.impl.path\");\ngoog.require(\"bide.impl.helpers\");\n\ngoog.require(\"goog.object\");\n\ngoog.scope(function() {\n  var _path = bide.impl.path;\n  var isArray = bide.impl.helpers.isArray;\n\n  /**\n   * Main router class.\n   *\n   * @constructor\n   * @struct\n   */\n  function Router() {\n    this.items = [];\n    this.map = {};\n  }\n\n  /**\n   * Routing Item class\n   *\n   * @constructor\n   * @struct\n   */\n  function Route() {\n    this.re = null;\n    this.name = null;\n    this.keys = null;\n    this.format = null;\n  }\n\n  /**\n   * Insert a new route entry to the router.\n   * If router is `null` a new router is created.\n   *\n   * @param {?Router} router\n   * @param {string} path\n   * @param {!Object} name\n   * @param {*} options\n   * @return {Router}\n   */\n  function insert(router, path, name, options) {\n    var route = new Route();\n\n    route.re = _path.parse(path, options);\n    route.keys = route.re._keys;\n    route.format = _path.compileTokens(route.re._tokens);\n    route.name = name;\n\n    if (router == null) {\n      router = new Router();\n    }\n\n    router.items.push(route);\n    name = name.toString();\n\n    if (router.map[name] === undefined) {\n      router.map[name] = [route];\n    } else {\n      router.map[name].push(route);\n    }\n\n    return router;\n  }\n\n  /**\n   * Encode query params.\n   *\n   * @param {!Object<string,*} query\n   * @return {string}\n   */\n  function encodeQueryParams(params) {\n    var encode = encodeURIComponent;\n    var keys = goog.object.getKeys(params);\n\n    var result = [];\n\n    for (var i=0; i<keys.length; i++) {\n      var key = keys[i];\n      var val = params[key];\n\n      if (val === undefined) {\n        // Do nothing\n      } else if (val === null) {\n        result.push(encode(key));\n      } else if (isArray(val)) {\n        var _result = [];\n\n        for (var y=0; y<val.length; y++) {\n          var _val = val[y];\n\n          if (_val === undefined) {\n            // do nothing\n          } else if (_val === null) {\n            _result.push(encode(key));\n          } else {\n            _result.push(encode(key) + \"=\" + encode(_val));\n          }\n        }\n\n        result.push(_result.join(\"&\"));\n      } else {\n        result.push(encode(key) + \"=\" + encode(val));\n      }\n    }\n\n    return result.join(\"&\");\n  }\n\n  /**\n   * Parses the query string to javascript object.\n   *\n   * @param {!string} query\n   * @return {Object<string,*>}\n   */\n  function parseQuery(query) {\n    var result = {};\n\n    if (! typeof val == 'string') {\n      return result;\n    }\n\n    query = query.trim().replace(/^(\\?|#|&)/, '');\n\n    if (!query) {\n      return result;\n    }\n\n    var params = query.split(\"&\");\n\n    for (var i=0; i<params.length; i++) {\n      var parts = params[i].replace(/\\+/g, ' ').split('=');\n\n      var key = parts.shift();\n      var val = parts.length > 0 ? parts.join('=') : undefined;\n      key = decodeURIComponent(key);\n\n      if (val === undefined) {\n        val = null;\n      } else {\n        val = decodeURIComponent(val);\n      }\n\n      if (result[key] === undefined) {\n        result[key] = val;\n      } else if (isArray(result[key])) {\n        result[key].push(val);\n      } else {\n        result[key] = [result[key], val];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Match a path in the router.\n   *\n   * @param {!Router} router\n   * @param {!string} path\n   * @return {Array<*>}\n   */\n  function match(router, path) {\n    var path, query;\n\n    if (path.indexOf(\"?\") !== -1) {\n      var parts = path.split(\"?\");\n      path = parts[0];\n      query = parseQuery(parts[1]);\n    } else {\n      path = path;\n      query = null;\n    }\n\n    var items = router.items;\n    var result = null;\n    var item = null;\n\n\n    for (var i=0; i<items.length; i++) {\n      item = items[i];\n      result = item.re.exec(path);\n\n      if (result !== null) {\n        break;\n      }\n    }\n\n    if (result === null) {\n      return null;\n    }\n\n    var params = {};\n    for (var i=0; i<item.keys.length; i++) {\n      var key = item.keys[i];\n      var res = result[(i + 1)];\n      if (res != null) {\n        params[key.name] = res;\n      }\n    }\n\n    if (isEmpty(params)) {\n      params = null;\n    }\n\n    return [item.name, params, query];\n  }\n\n  /**\n   * Perform a resolve operation on router.\n   *\n   * @param {!Router} router\n   * @param {*} name\n   * @param {Object<string,*>} params\n   * @param {Object<string,*>} query\n   * @return {Array<?>}\n   */\n  function resolve(router, name, params, query) {\n    var routes = router.map[name.toString()] || null;\n\n    if (routes == null) {\n      return null;\n    }\n\n    var result = null;\n\n    // If params is empty just check all possible\n    // options and return the first one that matches\n    // in case contrary check only routes with params\n    // because route without params does not raise\n    // exceptions causing that they are always elected\n    // independently if params are passed or not.\n    if (isEmpty(params)) {\n      for (var i=0; i<routes.length; i++) {\n        try {\n          result = routes[i].format(params);\n          break;\n        } catch (e) {}\n      }\n    } else {\n      for (var i=0; i<routes.length; i++) {\n        if (routes[i].keys.length === 0) {\n          continue;\n        }\n\n        try {\n          result = routes[i].format(params);\n          break;\n        } catch (e) {}\n      }\n    }\n\n    if (query != null && result != null) {\n      result = result + \"?\" + encodeQueryParams(query);\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if provided value is an instance of Router\n   *\n   * @param {*} v\n   * @return {boolean}\n   */\n  function isRouter(v) {\n    return v instanceof Router;\n  }\n\n  /**\n   * Create an empty Router instance.\n   *\n   * @return {Router}\n   */\n  function empty() {\n    return new Router();\n  }\n\n  /**\n   * Check if provided obj is empty.\n   *\n   * @param {Object} obj\n   * @return {boolean}\n   */\n  function isEmpty(obj) {\n    for (var x in obj) { return false; }\n    return true;\n  }\n\n  var module = bide.impl.router;\n  module.insert = insert;\n  module.match = match;\n  module.resolve = resolve;\n  module.isRouter = isRouter;\n  module.empty = empty;\n  module.parseQuery = parseQuery;\n  module.encodeQueryParams = encodeQueryParams;\n});\n","~:compiled-at",1743191916699,"~:source-map-json","{\n\"version\":3,\n\"file\":\"bide.impl.router.js\",\n\"lineCount\":190,\n\"mappings\":\"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\",\n\"sources\":[\"bide/impl/router.js\"],\n\"sourcesContent\":[\"/**\\n * router\\n *\\n * @author Andrey Antukh <niwi@niwi.nz>, 2016\\n * @license BSD License <https://opensource.org/licenses/BSD-2-Clause>\\n */\\n\\ngoog.provide(\\\"bide.impl.router\\\");\\n\\ngoog.require(\\\"bide.impl.path\\\");\\ngoog.require(\\\"bide.impl.helpers\\\");\\n\\ngoog.require(\\\"goog.object\\\");\\n\\ngoog.scope(function() {\\n  var _path = bide.impl.path;\\n  var isArray = bide.impl.helpers.isArray;\\n\\n  /**\\n   * Main router class.\\n   *\\n   * @constructor\\n   * @struct\\n   */\\n  function Router() {\\n    this.items = [];\\n    this.map = {};\\n  }\\n\\n  /**\\n   * Routing Item class\\n   *\\n   * @constructor\\n   * @struct\\n   */\\n  function Route() {\\n    this.re = null;\\n    this.name = null;\\n    this.keys = null;\\n    this.format = null;\\n  }\\n\\n  /**\\n   * Insert a new route entry to the router.\\n   * If router is `null` a new router is created.\\n   *\\n   * @param {?Router} router\\n   * @param {string} path\\n   * @param {!Object} name\\n   * @param {*} options\\n   * @return {Router}\\n   */\\n  function insert(router, path, name, options) {\\n    var route = new Route();\\n\\n    route.re = _path.parse(path, options);\\n    route.keys = route.re._keys;\\n    route.format = _path.compileTokens(route.re._tokens);\\n    route.name = name;\\n\\n    if (router == null) {\\n      router = new Router();\\n    }\\n\\n    router.items.push(route);\\n    name = name.toString();\\n\\n    if (router.map[name] === undefined) {\\n      router.map[name] = [route];\\n    } else {\\n      router.map[name].push(route);\\n    }\\n\\n    return router;\\n  }\\n\\n  /**\\n   * Encode query params.\\n   *\\n   * @param {!Object<string,*} query\\n   * @return {string}\\n   */\\n  function encodeQueryParams(params) {\\n    var encode = encodeURIComponent;\\n    var keys = goog.object.getKeys(params);\\n\\n    var result = [];\\n\\n    for (var i=0; i<keys.length; i++) {\\n      var key = keys[i];\\n      var val = params[key];\\n\\n      if (val === undefined) {\\n        // Do nothing\\n      } else if (val === null) {\\n        result.push(encode(key));\\n      } else if (isArray(val)) {\\n        var _result = [];\\n\\n        for (var y=0; y<val.length; y++) {\\n          var _val = val[y];\\n\\n          if (_val === undefined) {\\n            // do nothing\\n          } else if (_val === null) {\\n            _result.push(encode(key));\\n          } else {\\n            _result.push(encode(key) + \\\"=\\\" + encode(_val));\\n          }\\n        }\\n\\n        result.push(_result.join(\\\"&\\\"));\\n      } else {\\n        result.push(encode(key) + \\\"=\\\" + encode(val));\\n      }\\n    }\\n\\n    return result.join(\\\"&\\\");\\n  }\\n\\n  /**\\n   * Parses the query string to javascript object.\\n   *\\n   * @param {!string} query\\n   * @return {Object<string,*>}\\n   */\\n  function parseQuery(query) {\\n    var result = {};\\n\\n    if (! typeof val == 'string') {\\n      return result;\\n    }\\n\\n    query = query.trim().replace(/^(\\\\?|#|&)/, '');\\n\\n    if (!query) {\\n      return result;\\n    }\\n\\n    var params = query.split(\\\"&\\\");\\n\\n    for (var i=0; i<params.length; i++) {\\n      var parts = params[i].replace(/\\\\+/g, ' ').split('=');\\n\\n      var key = parts.shift();\\n      var val = parts.length > 0 ? parts.join('=') : undefined;\\n      key = decodeURIComponent(key);\\n\\n      if (val === undefined) {\\n        val = null;\\n      } else {\\n        val = decodeURIComponent(val);\\n      }\\n\\n      if (result[key] === undefined) {\\n        result[key] = val;\\n      } else if (isArray(result[key])) {\\n        result[key].push(val);\\n      } else {\\n        result[key] = [result[key], val];\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * Match a path in the router.\\n   *\\n   * @param {!Router} router\\n   * @param {!string} path\\n   * @return {Array<*>}\\n   */\\n  function match(router, path) {\\n    var path, query;\\n\\n    if (path.indexOf(\\\"?\\\") !== -1) {\\n      var parts = path.split(\\\"?\\\");\\n      path = parts[0];\\n      query = parseQuery(parts[1]);\\n    } else {\\n      path = path;\\n      query = null;\\n    }\\n\\n    var items = router.items;\\n    var result = null;\\n    var item = null;\\n\\n\\n    for (var i=0; i<items.length; i++) {\\n      item = items[i];\\n      result = item.re.exec(path);\\n\\n      if (result !== null) {\\n        break;\\n      }\\n    }\\n\\n    if (result === null) {\\n      return null;\\n    }\\n\\n    var params = {};\\n    for (var i=0; i<item.keys.length; i++) {\\n      var key = item.keys[i];\\n      var res = result[(i + 1)];\\n      if (res != null) {\\n        params[key.name] = res;\\n      }\\n    }\\n\\n    if (isEmpty(params)) {\\n      params = null;\\n    }\\n\\n    return [item.name, params, query];\\n  }\\n\\n  /**\\n   * Perform a resolve operation on router.\\n   *\\n   * @param {!Router} router\\n   * @param {*} name\\n   * @param {Object<string,*>} params\\n   * @param {Object<string,*>} query\\n   * @return {Array<?>}\\n   */\\n  function resolve(router, name, params, query) {\\n    var routes = router.map[name.toString()] || null;\\n\\n    if (routes == null) {\\n      return null;\\n    }\\n\\n    var result = null;\\n\\n    // If params is empty just check all possible\\n    // options and return the first one that matches\\n    // in case contrary check only routes with params\\n    // because route without params does not raise\\n    // exceptions causing that they are always elected\\n    // independently if params are passed or not.\\n    if (isEmpty(params)) {\\n      for (var i=0; i<routes.length; i++) {\\n        try {\\n          result = routes[i].format(params);\\n          break;\\n        } catch (e) {}\\n      }\\n    } else {\\n      for (var i=0; i<routes.length; i++) {\\n        if (routes[i].keys.length === 0) {\\n          continue;\\n        }\\n\\n        try {\\n          result = routes[i].format(params);\\n          break;\\n        } catch (e) {}\\n      }\\n    }\\n\\n    if (query != null && result != null) {\\n      result = result + \\\"?\\\" + encodeQueryParams(query);\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * Check if provided value is an instance of Router\\n   *\\n   * @param {*} v\\n   * @return {boolean}\\n   */\\n  function isRouter(v) {\\n    return v instanceof Router;\\n  }\\n\\n  /**\\n   * Create an empty Router instance.\\n   *\\n   * @return {Router}\\n   */\\n  function empty() {\\n    return new Router();\\n  }\\n\\n  /**\\n   * Check if provided obj is empty.\\n   *\\n   * @param {Object} obj\\n   * @return {boolean}\\n   */\\n  function isEmpty(obj) {\\n    for (var x in obj) { return false; }\\n    return true;\\n  }\\n\\n  var module = bide.impl.router;\\n  module.insert = insert;\\n  module.match = match;\\n  module.resolve = resolve;\\n  module.isRouter = isRouter;\\n  module.empty = empty;\\n  module.parseQuery = parseQuery;\\n  module.encodeQueryParams = encodeQueryParams;\\n});\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"scope\",\"Router\",\"items\",\"map\",\"Route\",\"re\",\"name\",\"keys\",\"format\",\"insert\",\"router\",\"path\",\"options\",\"route\",\"_path\",\"parse\",\"_keys\",\"compileTokens\",\"_tokens\",\"push\",\"toString\",\"undefined\",\"encodeQueryParams\",\"params\",\"encode\",\"encodeURIComponent\",\"object\",\"getKeys\",\"result\",\"i\",\"length\",\"key\",\"val\",\"isArray\",\"_result\",\"y\",\"_val\",\"join\",\"parseQuery\",\"query\",\"trim\",\"replace\",\"split\",\"parts\",\"shift\",\"decodeURIComponent\",\"match\",\"indexOf\",\"item\",\"exec\",\"res\",\"isEmpty\",\"resolve\",\"routes\",\"e\",\"isRouter\",\"v\",\"empty\",\"obj\",\"x\",\"bide\",\"impl\",\"helpers\",\"module\"]\n}\n"]