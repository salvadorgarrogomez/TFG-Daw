["^ ","~:resources",[["^ ","~:js-str-offsets",[],"~:classpath",true,"~:js-esm",false,"~:cache-key",["51e0704b5e81c3ae0e8fb30d607bfd23b38a151c"],"~:js-imports",[],"~:js-invalid-requires",[],"~:goog-provides",[],"~:js-language","es3","~:goog-module",null,"~:ns","~$module$_decimal_js$externs","~:goog-module-legacy-namespace",false,"~:js-warnings",[["^ ","~:line",652,"~:column",12,"~:message","Bad type annotation. type not recognized due to syntax error. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."]],"~:output-name","module$_decimal_js$externs.js","~:resource-id",["~:shadow.build.classpath/resource","_decimal.js/externs.js"],"~:resource-name","_decimal.js/externs.js","~:type","~:js","~:js-requires",[],"~:source","/**\n * @const\n * @constructor\n */\nvar Decimal = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.absoluteValue = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.abs = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.ceil = function() {};\n\n/**\n * @this {Decimal}\n * @return {number|null}\n */\nDecimal.prototype.compareTo = function() {};\n\n/**\n * @this {Decimal}\n * @return {number|null}\n */\nDecimal.prototype.cmp = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.cosine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.cos = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.cubeRoot = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.cbrt = function() {};\n\n/**\n * @this {Decimal}\n * @return {number}\n */\nDecimal.prototype.decimalPlaces = function() {};\n\n/**\n * @this {Decimal}\n * @return {number}\n */\nDecimal.prototype.dp = function() {};\n\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.dividedBy = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.div = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.dividedToIntegerBy = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.divToInt = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.equals = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.eq = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.floor = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.greaterThan = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.gt = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.greaterThanOrEqualTo = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.gte = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.hyperbolicCosine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.cosh = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.hyperbolicSine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.sinh = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.hyperbolicTangent = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.tanh = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.inverseCosine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.acos = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.inverseHyperbolicCosine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.acosh = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.inverseHyperbolicSine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.asinh = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.inverseHyperbolicTangent = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.atanh = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.inverseSine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.asin = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.inverseTangent = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.atan = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isFinite = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isInteger = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isInt = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isNaN = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isNegative = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isNeg = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isZero = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isPositive = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.isPos = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.lessThan = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.lt = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.lessThanOrEqualTo = function() {};\n\n/**\n * @this {Decimal}\n * @return {Boolean}\n */\nDecimal.prototype.lte = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.logarithm = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.log = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.minus = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.modulo = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.mod = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.naturalExponential = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.exp = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.naturalLogarithm = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.ln = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.negated = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.neg = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.plus = function() {};\n\n/**\n * @this {Decimal}\n * @return {number}\n */\nDecimal.prototype.precision = function() {};\n\n/**\n * @this {Decimal}\n * @return {number}\n */\nDecimal.prototype.sd = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.round = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.round = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.sine = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.sin = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.squareRoot = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.sqrt = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.tangent = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.tan = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.times = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toBinary = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.toDecimalPlaces = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.toDP = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toExponential = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toFixed = function() {};\n\n/**\n * @this {Decimal}\n * @return {Array<Decimal>}\n */\nDecimal.prototype.toFraction = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toHexadecimal = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toJSON = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.toNearest = function() {};\n\n/**\n * @this {Decimal}\n * @return {number}\n */\nDecimal.prototype.toNumber = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toOctal = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.toPower = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.pow = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toPrecision = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.toSignificantDigits = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.toSD = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.toString = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.truncated = function() {};\n\n/**\n * @this {Decimal}\n * @return {Decimal}\n */\nDecimal.prototype.trunc = function() {};\n\n/**\n * @this {Decimal}\n * @return {string}\n */\nDecimal.prototype.valueOf = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.abs = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.acos = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.acosh = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.add = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.asin = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.asinh = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.atan = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.atanh = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.atan2 = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.cbrt = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.ceil = function() {};\n\n/**\n * @this {null}\n * @return {}\n */\nDecimal.clone = function() {};\n\n/**\n * @this {null}\n * @return {null}\n */\nDecimal.config = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.cos = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.cosh = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.div = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.exp = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.floor = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.fromJSON = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.hypot = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.ln = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.log = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.log2 = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.log10 = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.max = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.min = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.mod = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.mul = function() {};\n\n/**\n * @this {null}\n */\nDecimal.noConflict = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.pow = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.random = function() {};\n\n/**\n * @this {null}\n * @return {Decimal}\n */\nDecimal.round = function() {};\n\n/**\n * @this {null}\n * @return {number}\n */\nDecimal.sign = function() {};\n\n\n","~:last-modified",1743064685251,"~:js-errors",[],"~:requires",["~#set",[]],"~:pom-info",["^ ","~:group-id","~$funcool","~:artifact-id","~$decimal","~:version","1.0.2","~:name","decimal","~:description","An arbitrary-precision Decimal type for ClojureScript.","~:url","https://github.com/funcool/decimal","~:id","~$funcool/decimal","~:coordinate",["^W","1.0.2"]],"~:goog-requires",[],"~:js-dynamic-imports",[],"~:inspect-info",["^ ","^1",[],"^3",false,"^5",[],"^6",[],"^7",[],"^8","es3","^9",null,"^<",false,"^=",[["^ ","^>",652,"^?",12,"^@","Bad type annotation. type not recognized due to syntax error. See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler for more information."]],"^G",[],"^J",[],"^Y",[],"^Z",[],"~:goog-require-types",[],"~:uses-global-buffer",false,"~:uses-global-process",false],"^U",["~#url","jar:file:C:\\Users\\salva\\.m2\\repository\\funcool\\decimal\\1.0.2\\decimal-1.0.2.jar!/_decimal.js/externs.js"],"~:provides",["^L",["^;"]],"^10",[],"^11",false,"~:from-jar",true,"~:deps",[],"^12",false],["^ ","^1",[],"^2",true,"^3",false,"^4",["51e0704b5e81c3ae0e8fb30d607bfd23b38a151c"],"^5",[],"^6",[],"^7",[],"^8","es3","^9",null,"^:","~$module$_decimal_js$decimal","^<",false,"^A","module$_decimal_js$decimal.js","^B",["^C","_decimal.js/decimal.js"],"^D","_decimal.js/decimal.js","^E","^F","^G",[],"^H","/*! decimal.js v7.1.1 https://github.com/MikeMcl/decimal.js/LICENCE */\n;(function (globalScope) {\n  'use strict';\n\n\n  /*\n   *  decimal.js v7.1.1\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   */\n\n\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n\n\n    // The maximum exponent magnitude.\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\n\n    // The limit on the value of `precision`, and on the value of the first argument to\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\n\n    // Base conversion alphabet.\n    NUMERALS = '0123456789abcdef',\n\n    // The natural logarithm of 10 (1025 digits).\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n\n    // Pi (1025 digits).\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n\n\n    // The initial configuration properties of the Decimal constructor.\n    Decimal = {\n\n      // These values must be integers within the stated ranges (inclusive).\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\n\n      // The maximum number of significant digits of the result of a calculation or base conversion.\n      // E.g. `Decimal.config({ precision: 20 });`\n      precision: 20,                         // 1 to MAX_DIGITS\n\n      // The rounding mode used when rounding to `precision`.\n      //\n      // ROUND_UP         0 Away from zero.\n      // ROUND_DOWN       1 Towards zero.\n      // ROUND_CEIL       2 Towards +Infinity.\n      // ROUND_FLOOR      3 Towards -Infinity.\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n      //\n      // E.g.\n      // `Decimal.rounding = 4;`\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n      rounding: 4,                           // 0 to 8\n\n      // The modulo mode used when calculating the modulus: a mod n.\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n      // The remainder (r) is calculated as: r = a - n * q.\n      //\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n      // HALF_EVEN  6 The IEEE 754 remainder function.\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n      //\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\n      // be used, but they may not give useful results.\n      modulo: 1,                             // 0 to 9\n\n      // The exponent value at and beneath which `toString` returns exponential notation.\n      // JavaScript numbers: -7\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\n\n      // The exponent value at and above which `toString` returns exponential notation.\n      // JavaScript numbers: 21\n      toExpPos:  21,                         // 0 to EXP_LIMIT\n\n      // The minimum exponent value, beneath which underflow to zero occurs.\n      // JavaScript numbers: -324  (5e-324)\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\n\n      // The maximum exponent value, above which overflow to Infinity occurs.\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\n\n      // Whether to use cryptographically-secure random number generation, if available.\n      crypto: false                          // true/false\n    },\n\n\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\n\n\n    inexact, noConflict, quadrant,\n    external = true,\n\n    decimalError = '[DecimalError] ',\n    invalidArgument = decimalError + 'Invalid argument: ',\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n    cryptoUnavailable = decimalError + 'crypto unavailable',\n\n    mathfloor = Math.floor,\n    mathpow = Math.pow,\n\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n\n    BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_SAFE_INTEGER = 9007199254740991,\n\n    LN10_PRECISION = LN10.length - 1,\n    PI_PRECISION = PI.length - 1,\n\n    // Decimal.prototype object\n    P = {};\n\n\n  // Decimal prototype methods\n\n\n  /*\n   *  absoluteValue             abs\n   *  ceil\n   *  comparedTo                cmp\n   *  cosine                    cos\n   *  cubeRoot                  cbrt\n   *  decimalPlaces             dp\n   *  dividedBy                 div\n   *  dividedToIntegerBy        divToInt\n   *  equals                    eq\n   *  floor\n   *  greaterThan               gt\n   *  greaterThanOrEqualTo      gte\n   *  hyperbolicCosine          cosh\n   *  hyperbolicSine            sinh\n   *  hyperbolicTangent         tanh\n   *  inverseCosine             acos\n   *  inverseHyperbolicCosine   acosh\n   *  inverseHyperbolicSine     asinh\n   *  inverseHyperbolicTangent  atanh\n   *  inverseSine               asin\n   *  inverseTangent            atan\n   *  isFinite\n   *  isInteger                 isInt\n   *  isNaN\n   *  isNegative                isNeg\n   *  isPositive                isPos\n   *  isZero\n   *  lessThan                  lt\n   *  lessThanOrEqualTo         lte\n   *  logarithm                 log\n   *  [maximum]                 [max]\n   *  [minimum]                 [min]\n   *  minus                     sub\n   *  modulo                    mod\n   *  naturalExponential        exp\n   *  naturalLogarithm          ln\n   *  negated                   neg\n   *  plus                      add\n   *  precision                 sd\n   *  round\n   *  sine                      sin\n   *  squareRoot                sqrt\n   *  tangent                   tan\n   *  times                     mul\n   *  toBinary\n   *  toDecimalPlaces           toDP\n   *  toExponential\n   *  toFixed\n   *  toFraction\n   *  toHexadecimal             toHex\n   *  toNearest\n   *  toNumber\n   *  toOctal\n   *  toPower                   pow\n   *  toPrecision\n   *  toSignificantDigits       toSD\n   *  toString\n   *  truncated                 trunc\n   *  valueOf                   toJSON\n   */\n\n\n  /*\n   * Return a new Decimal whose value is the absolute value of this Decimal.\n   *\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new this.constructor(this);\n    if (x.s < 0) x.s = 1;\n    return finalise(x);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\n   * direction of positive Infinity.\n   *\n   */\n  P.ceil = function () {\n    return finalise(new this.constructor(this), this.e + 1, 2);\n  };\n\n\n  /*\n   * Return\n   *   1    if the value of this Decimal is greater than the value of `y`,\n   *  -1    if the value of this Decimal is less than the value of `y`,\n   *   0    if they have the same value,\n   *   NaN  if the value of either Decimal is NaN.\n   *\n   */\n  P.comparedTo = P.cmp = function (y) {\n    var i, j, xdL, ydL,\n      x = this,\n      xd = x.d,\n      yd = (y = new x.constructor(y)).d,\n      xs = x.s,\n      ys = y.s;\n\n    // Either NaN or ±Infinity?\n    if (!xd || !yd) {\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n    }\n\n    // Either zero?\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\n\n    // Signs differ?\n    if (xs !== ys) return xs;\n\n    // Compare exponents.\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Compare digit by digit.\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-1, 1]\n   *\n   * cos(0)         = 1\n   * cos(-0)        = 1\n   * cos(Infinity)  = NaN\n   * cos(-Infinity) = NaN\n   * cos(NaN)       = NaN\n   *\n   */\n  P.cosine = P.cos = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.d) return new Ctor(NaN);\n\n    // cos(0) = cos(-0) = 1\n    if (!x.d[0]) return new Ctor(1);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n  };\n\n\n  /*\n   *\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   *  cbrt(0)  =  0\n   *  cbrt(-0) = -0\n   *  cbrt(1)  =  1\n   *  cbrt(-1) = -1\n   *  cbrt(N)  =  N\n   *  cbrt(-I) = -I\n   *  cbrt(I)  =  I\n   *\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\n   *\n   */\n  P.cubeRoot = P.cbrt = function () {\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n    external = false;\n\n    // Initial estimate.\n    s = x.s * Math.pow(x.s * x, 1 / 3);\n\n     // Math.cbrt underflow/overflow?\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\n    if (!s || Math.abs(s) == 1 / 0) {\n      n = digitsToString(x.d);\n      e = x.e;\n\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\n      s = Math.pow(n, 1 / 3);\n\n      // Rarely, e may be one less than the result exponent value.\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n\n      if (s == 1 / 0) {\n        n = '5e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n      r.s = x.s;\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3;\n\n    // Halley's method.\n    // TODO? Compare Newton's method.\n    for (;;) {\n      t = r;\n      t3 = t.times(t).times(t);\n      t3plusx = t3.plus(x);\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n        // , i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n\n  /*\n   * Return the number of decimal places of the value of this Decimal.\n   *\n   */\n  P.decimalPlaces = P.dp = function () {\n    var w,\n      d = this.d,\n      n = NaN;\n\n    if (d) {\n      w = d.length - 1;\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n\n      // Subtract the number of trailing zeros of the last word.\n      w = d[w];\n      if (w) for (; w % 10 == 0; w /= 10) n--;\n      if (n < 0) n = 0;\n    }\n\n    return n;\n  };\n\n\n  /*\n   *  n / 0 = I\n   *  n / N = N\n   *  n / I = 0\n   *  0 / n = 0\n   *  0 / 0 = N\n   *  0 / N = N\n   *  0 / I = 0\n   *  N / n = N\n   *  N / 0 = N\n   *  N / N = N\n   *  N / I = N\n   *  I / n = I\n   *  I / 0 = I\n   *  I / N = N\n   *  I / I = N\n   *\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   */\n  P.dividedBy = P.div = function (y) {\n    return divide(this, new this.constructor(y));\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   */\n  P.dividedToIntegerBy = P.divToInt = function (y) {\n    var x = this,\n      Ctor = x.constructor;\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\n   *\n   */\n  P.equals = P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\n   * direction of negative Infinity.\n   *\n   */\n  P.floor = function () {\n    return finalise(new this.constructor(this), this.e + 1, 3);\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\n   * false.\n   *\n   */\n  P.greaterThan = P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\n   * otherwise return false.\n   *\n   */\n  P.greaterThanOrEqualTo = P.gte = function (y) {\n    var k = this.cmp(y);\n    return k == 1 || k === 0;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [1, Infinity]\n   *\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\n   *\n   * cosh(0)         = 1\n   * cosh(-0)        = 1\n   * cosh(Infinity)  = Infinity\n   * cosh(-Infinity) = Infinity\n   * cosh(NaN)       = NaN\n   *\n   *  x        time taken (ms)   result\n   * 1000      9                 9.8503555700852349694e+433\n   * 10000     25                4.4034091128314607936e+4342\n   * 100000    171               1.4033316802130615897e+43429\n   * 1000000   3817              1.5166076984010437725e+434294\n   * 10000000  abandoned after 2 minute wait\n   *\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\n   *\n   */\n  P.hyperbolicCosine = P.cosh = function () {\n    var k, n, pr, rm, len,\n      x = this,\n      Ctor = x.constructor,\n      one = new Ctor(1);\n\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n    if (x.isZero()) return one;\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    // TODO? Estimation reused from cosine() and may not be optimal here.\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      n = Math.pow(4, -k).toString();\n    } else {\n      k = 16;\n      n = '2.3283064365386962890625e-10';\n    }\n\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n\n    // Reverse argument reduction\n    var cosh2_x,\n      i = k,\n      d8 = new Ctor(8);\n    for (; i--;) {\n      cosh2_x = x.times(x);\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n    }\n\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-Infinity, Infinity]\n   *\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\n   *\n   * sinh(0)         = 0\n   * sinh(-0)        = -0\n   * sinh(Infinity)  = Infinity\n   * sinh(-Infinity) = -Infinity\n   * sinh(NaN)       = NaN\n   *\n   * x        time taken (ms)\n   * 10       2 ms\n   * 100      5 ms\n   * 1000     14 ms\n   * 10000    82 ms\n   * 100000   886 ms            1.4033316802130615897e+43429\n   * 200000   2613 ms\n   * 300000   5407 ms\n   * 400000   8824 ms\n   * 500000   13026 ms          8.7080643612718084129e+217146\n   * 1000000  48543 ms\n   *\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\n   *\n   */\n  P.hyperbolicSine = P.sinh = function () {\n    var k, pr, rm, len,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n    Ctor.rounding = 1;\n    len = x.d.length;\n\n    if (len < 3) {\n      x = taylorSeries(Ctor, 2, x, x, true);\n    } else {\n\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n      // 3 multiplications and 1 addition\n\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n      // 4 multiplications and 2 additions\n\n      // Estimate the optimum number of times to use the argument reduction.\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n\n      x = x.times(Math.pow(5, -k));\n\n      x = taylorSeries(Ctor, 2, x, x, true);\n\n      // Reverse argument reduction\n      var sinh2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n      for (; k--;) {\n        sinh2_x = x.times(x);\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n      }\n    }\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(x, pr, rm, true);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-1, 1]\n   *\n   * tanh(x) = sinh(x) / cosh(x)\n   *\n   * tanh(0)         = 0\n   * tanh(-0)        = -0\n   * tanh(Infinity)  = 1\n   * tanh(-Infinity) = -1\n   * tanh(NaN)       = NaN\n   *\n   */\n  P.hyperbolicTangent = P.tanh = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(x.s);\n    if (x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 7;\n    Ctor.rounding = 1;\n\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\n   * this Decimal.\n   *\n   * Domain: [-1, 1]\n   * Range: [0, pi]\n   *\n   * acos(x) = pi/2 - asin(x)\n   *\n   * acos(0)       = pi/2\n   * acos(-0)      = pi/2\n   * acos(1)       = 0\n   * acos(-1)      = pi\n   * acos(1/2)     = pi/3\n   * acos(-1/2)    = 2*pi/3\n   * acos(|x| > 1) = NaN\n   * acos(NaN)     = NaN\n   *\n   */\n  P.inverseCosine = P.acos = function () {\n    var halfPi,\n      x = this,\n      Ctor = x.constructor,\n      k = x.abs().cmp(1),\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n\n    if (k !== -1) {\n      return k === 0\n        // |x| is 1\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\n        // |x| > 1 or x is NaN\n        : new Ctor(NaN);\n    }\n\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\n\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n\n    x = x.asin();\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return halfPi.minus(x);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\n   * value of this Decimal.\n   *\n   * Domain: [1, Infinity]\n   * Range: [0, Infinity]\n   *\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\n   *\n   * acosh(x < 1)     = NaN\n   * acosh(NaN)       = NaN\n   * acosh(Infinity)  = Infinity\n   * acosh(-Infinity) = NaN\n   * acosh(0)         = NaN\n   * acosh(-0)        = NaN\n   * acosh(1)         = 0\n   * acosh(-1)        = NaN\n   *\n   */\n  P.inverseHyperbolicCosine = P.acosh = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n    if (!x.isFinite()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n    Ctor.rounding = 1;\n    external = false;\n\n    x = x.times(x).minus(1).sqrt().plus(x);\n\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.ln();\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\n   * of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-Infinity, Infinity]\n   *\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\n   *\n   * asinh(NaN)       = NaN\n   * asinh(Infinity)  = Infinity\n   * asinh(-Infinity) = -Infinity\n   * asinh(0)         = 0\n   * asinh(-0)        = -0\n   *\n   */\n  P.inverseHyperbolicSine = P.asinh = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n    Ctor.rounding = 1;\n    external = false;\n\n    x = x.times(x).plus(1).sqrt().plus(x);\n\n    external = true;\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.ln();\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\n   * value of this Decimal.\n   *\n   * Domain: [-1, 1]\n   * Range: [-Infinity, Infinity]\n   *\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\n   *\n   * atanh(|x| > 1)   = NaN\n   * atanh(NaN)       = NaN\n   * atanh(Infinity)  = NaN\n   * atanh(-Infinity) = NaN\n   * atanh(0)         = 0\n   * atanh(-0)        = -0\n   * atanh(1)         = Infinity\n   * atanh(-1)        = -Infinity\n   *\n   */\n  P.inverseHyperbolicTangent = P.atanh = function () {\n    var pr, rm, wpr, xsd,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    xsd = x.sd();\n\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n\n    Ctor.precision = wpr = xsd - x.e;\n\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n\n    Ctor.precision = pr + 4;\n    Ctor.rounding = 1;\n\n    x = x.ln();\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.times(0.5);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\n   * Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-pi/2, pi/2]\n   *\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\n   *\n   * asin(0)       = 0\n   * asin(-0)      = -0\n   * asin(1/2)     = pi/6\n   * asin(-1/2)    = -pi/6\n   * asin(1)       = pi/2\n   * asin(-1)      = -pi/2\n   * asin(|x| > 1) = NaN\n   * asin(NaN)     = NaN\n   *\n   * TODO? Compare performance of Taylor series.\n   *\n   */\n  P.inverseSine = P.asin = function () {\n    var halfPi, k,\n      pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (x.isZero()) return new Ctor(x);\n\n    k = x.abs().cmp(1);\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    if (k !== -1) {\n\n      // |x| is 1\n      if (k === 0) {\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n        halfPi.s = x.s;\n        return halfPi;\n      }\n\n      // |x| > 1 or x is NaN\n      return new Ctor(NaN);\n    }\n\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n    Ctor.precision = pr + 6;\n    Ctor.rounding = 1;\n\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return x.times(2);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\n   * of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-pi/2, pi/2]\n   *\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n   *\n   * atan(0)         = 0\n   * atan(-0)        = -0\n   * atan(1)         = pi/4\n   * atan(-1)        = -pi/4\n   * atan(Infinity)  = pi/2\n   * atan(-Infinity) = -pi/2\n   * atan(NaN)       = NaN\n   *\n   */\n  P.inverseTangent = P.atan = function () {\n    var i, j, k, n, px, t, r, wpr, x2,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n\n    if (!x.isFinite()) {\n      if (!x.s) return new Ctor(NaN);\n      if (pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\n        r.s = x.s;\n        return r;\n      }\n    } else if (x.isZero()) {\n      return new Ctor(x);\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\n      r.s = x.s;\n      return r;\n    }\n\n    Ctor.precision = wpr = pr + 10;\n    Ctor.rounding = 1;\n\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n\n    // Argument reduction\n    // Ensure |x| < 0.42\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n\n    external = false;\n\n    j = Math.ceil(wpr / LOG_BASE);\n    n = 1;\n    x2 = x.times(x);\n    r = new Ctor(x);\n    px = x;\n\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n    for (; i !== -1;) {\n      px = px.times(x2);\n      t = r.minus(px.div(n += 2));\n\n      px = px.times(x2);\n      r = t.plus(px.div(n += 2));\n\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n    }\n\n    if (k) r = r.times(2 << (k - 1));\n\n    external = true;\n\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\n   *\n   */\n  P.isFinite = function () {\n    return !!this.d;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is an integer, otherwise return false.\n   *\n   */\n  P.isInteger = P.isInt = function () {\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is NaN, otherwise return false.\n   *\n   */\n  P.isNaN = function () {\n    return !this.s;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is negative, otherwise return false.\n   *\n   */\n  P.isNegative = P.isNeg = function () {\n    return this.s < 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is positive, otherwise return false.\n   *\n   */\n  P.isPositive = P.isPos = function () {\n    return this.s > 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\n   *\n   */\n  P.isZero = function () {\n    return !!this.d && this.d[0] === 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\n   *\n   */\n  P.lessThan = P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n\n  /*\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\n   *\n   */\n  P.lessThanOrEqualTo = P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n\n  /*\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * If no base is specified, return log[10](arg).\n   *\n   * log[base](arg) = ln(arg) / ln(base)\n   *\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\n   * otherwise:\n   *\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\n   *\n   * log[-b](a)       = NaN\n   * log[0](a)        = NaN\n   * log[1](a)        = NaN\n   * log[NaN](a)      = NaN\n   * log[Infinity](a) = NaN\n   * log[b](0)        = -Infinity\n   * log[b](-0)       = -Infinity\n   * log[b](-a)       = NaN\n   * log[b](1)        = 0\n   * log[b](Infinity) = Infinity\n   * log[b](NaN)      = NaN\n   *\n   * [base] {number|string|Decimal} The base of the logarithm.\n   *\n   */\n  P.logarithm = P.log = function (base) {\n    var isBase10, d, denominator, k, inf, num, sd, r,\n      arg = this,\n      Ctor = arg.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding,\n      guard = 5;\n\n    // Default base is 10.\n    if (base == null) {\n      base = new Ctor(10);\n      isBase10 = true;\n    } else {\n      base = new Ctor(base);\n      d = base.d;\n\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n\n      isBase10 = base.eq(10);\n    }\n\n    d = arg.d;\n\n    // Is arg negative, non-finite, 0 or 1?\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n    }\n\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n    // integer power of 10.\n    if (isBase10) {\n      if (d.length > 1) {\n        inf = true;\n      } else {\n        for (k = d[0]; k % 10 === 0;) k /= 10;\n        inf = k !== 1;\n      }\n    }\n\n    external = false;\n    sd = pr + guard;\n    num = naturalLogarithm(arg, sd);\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n\n    // The result will have 5 rounding digits.\n    r = divide(num, denominator, sd, 1);\n\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n    // calculate 10 further digits.\n    //\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\n    // further digits, the last 14 are nines, round up and assume the result is exact.\n    // Also assume the result is exact if the last 14 are zero.\n    //\n    // Example of a result that will be incorrectly rounded:\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n    // place is still 2.6.\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\n\n      do {\n        sd += 10;\n        num = naturalLogarithm(arg, sd);\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n        r = divide(num, denominator, sd, 1);\n\n        if (!inf) {\n\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n\n          break;\n        }\n      } while (checkRoundingDigits(r.d, k += 10, rm));\n    }\n\n    external = true;\n\n    return finalise(r, pr, rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\n   *\n   * arguments {number|string|Decimal}\n   *\n  P.max = function () {\n    Array.prototype.push.call(arguments, this);\n    return maxOrMin(this.constructor, arguments, 'lt');\n  };\n   */\n\n\n  /*\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\n   *\n   * arguments {number|string|Decimal}\n   *\n  P.min = function () {\n    Array.prototype.push.call(arguments, this);\n    return maxOrMin(this.constructor, arguments, 'gt');\n  };\n   */\n\n\n  /*\n   *  n - 0 = n\n   *  n - N = N\n   *  n - I = -I\n   *  0 - n = -n\n   *  0 - 0 = 0\n   *  0 - N = N\n   *  0 - I = -I\n   *  N - n = N\n   *  N - 0 = N\n   *  N - N = N\n   *  N - I = N\n   *  I - n = I\n   *  I - 0 = I\n   *  I - N = N\n   *  I - I = N\n   *\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   */\n  P.minus = P.sub = function (y) {\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\n      x = this,\n      Ctor = x.constructor;\n\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return y negated if x is finite and y is ±Infinity.\n      else if (x.d) y.s = -y.s;\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with different signs.\n      // Return NaN if both are ±Infinity with the same sign.\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n\n      return y;\n    }\n\n    // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.plus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n\n      // Return y negated if x is zero and y is non-zero.\n      if (yd[0]) y.s = -y.s;\n\n      // Return x if y is zero and x is non-zero.\n      else if (xd[0]) y = new Ctor(x);\n\n      // Return zero if both are zero.\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n      else return new Ctor(rm === 3 ? -0 : 0);\n\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    e = mathfloor(y.e / LOG_BASE);\n    xe = mathfloor(x.e / LOG_BASE);\n\n    xd = xd.slice();\n    k = xe - e;\n\n    // If base 1e7 exponents differ...\n    if (k) {\n      xLTy = k < 0;\n\n      if (xLTy) {\n        d = xd;\n        k = -k;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = xe;\n        len = xd.length;\n      }\n\n      // Numbers with massively different exponents would result in a very high number of\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n      if (k > i) {\n        k = i;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents.\n      d.reverse();\n      for (i = k; i--;) d.push(0);\n      d.reverse();\n\n    // Base 1e7 exponents equal.\n    } else {\n\n      // Check digits to determine which is the bigger number.\n\n      i = xd.length;\n      len = yd.length;\n      xLTy = i < len;\n      if (xLTy) len = i;\n\n      for (i = 0; i < len; i++) {\n        if (xd[i] != yd[i]) {\n          xLTy = xd[i] < yd[i];\n          break;\n        }\n      }\n\n      k = 0;\n    }\n\n    if (xLTy) {\n      d = xd;\n      xd = yd;\n      yd = d;\n      y.s = -y.s;\n    }\n\n    len = xd.length;\n\n    // Append zeros to `xd` if shorter.\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\n\n    // Subtract yd from xd.\n    for (i = yd.length; i > k;) {\n\n      if (xd[--i] < yd[i]) {\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n        --xd[j];\n        xd[i] += BASE;\n      }\n\n      xd[i] -= yd[i];\n    }\n\n    // Remove trailing zeros.\n    for (; xd[--len] === 0;) xd.pop();\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xd[0] === 0; xd.shift()) --e;\n\n    // Zero?\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n\n  /*\n   *   n % 0 =  N\n   *   n % N =  N\n   *   n % I =  n\n   *   0 % n =  0\n   *  -0 % n = -0\n   *   0 % 0 =  N\n   *   0 % N =  N\n   *   0 % I =  0\n   *   N % n =  N\n   *   N % 0 =  N\n   *   N % N =  N\n   *   N % I =  N\n   *   I % n =  N\n   *   I % 0 =  N\n   *   I % N =  N\n   *   I % I =  N\n   *\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * The result depends on the modulo mode.\n   *\n   */\n  P.modulo = P.mod = function (y) {\n    var q,\n      x = this,\n      Ctor = x.constructor;\n\n    y = new Ctor(y);\n\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\n\n    // Return x if y is ±Infinity or x is ±0.\n    if (!y.d || x.d && !x.d[0]) {\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n    }\n\n    // Prevent rounding of intermediate calculations.\n    external = false;\n\n    if (Ctor.modulo == 9) {\n\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // result = x - q * y    where  0 <= result < abs(y)\n      q = divide(x, y.abs(), 0, 3, 1);\n      q.s *= y.s;\n    } else {\n      q = divide(x, y, 0, Ctor.modulo, 1);\n    }\n\n    q = q.times(y);\n\n    external = true;\n\n    return x.minus(q);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   */\n  P.naturalExponential = P.exp = function () {\n    return naturalExponential(this);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\n   * rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   */\n  P.naturalLogarithm = P.ln = function () {\n    return naturalLogarithm(this);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\n   * -1.\n   *\n   */\n  P.negated = P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return finalise(x);\n  };\n\n\n  /*\n   *  n + 0 = n\n   *  n + N = N\n   *  n + I = I\n   *  0 + n = n\n   *  0 + 0 = 0\n   *  0 + N = N\n   *  0 + I = I\n   *  N + n = N\n   *  N + 0 = N\n   *  N + N = N\n   *  N + I = N\n   *  I + n = I\n   *  I + 0 = I\n   *  I + N = N\n   *  I + I = I\n   *\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   */\n  P.plus = P.add = function (y) {\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\n      x = this,\n      Ctor = x.constructor;\n\n    y = new Ctor(y);\n\n    // If either is not finite...\n    if (!x.d || !y.d) {\n\n      // Return NaN if either is NaN.\n      if (!x.s || !y.s) y = new Ctor(NaN);\n\n      // Return x if y is finite and x is ±Infinity.\n      // Return x if both are ±Infinity with the same sign.\n      // Return NaN if both are ±Infinity with different signs.\n      // Return y if x is finite and y is ±Infinity.\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n\n      return y;\n    }\n\n     // If signs differ...\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n\n    xd = x.d;\n    yd = y.d;\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    // If either is zero...\n    if (!xd[0] || !yd[0]) {\n\n      // Return x if y is zero.\n      // Return y if y is non-zero.\n      if (!yd[0]) y = new Ctor(x);\n\n      return external ? finalise(y, pr, rm) : y;\n    }\n\n    // x and y are finite, non-zero numbers with the same sign.\n\n    // Calculate base 1e7 exponents.\n    k = mathfloor(x.e / LOG_BASE);\n    e = mathfloor(y.e / LOG_BASE);\n\n    xd = xd.slice();\n    i = k - e;\n\n    // If base 1e7 exponents differ...\n    if (i) {\n\n      if (i < 0) {\n        d = xd;\n        i = -i;\n        len = yd.length;\n      } else {\n        d = yd;\n        e = k;\n        len = xd.length;\n      }\n\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n      k = Math.ceil(pr / LOG_BASE);\n      len = k > len ? k + 1 : len + 1;\n\n      if (i > len) {\n        i = len;\n        d.length = 1;\n      }\n\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n      d.reverse();\n      for (; i--;) d.push(0);\n      d.reverse();\n    }\n\n    len = xd.length;\n    i = yd.length;\n\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n    if (len - i < 0) {\n      i = len;\n      d = yd;\n      yd = xd;\n      xd = d;\n    }\n\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n    for (carry = 0; i;) {\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n      xd[i] %= BASE;\n    }\n\n    if (carry) {\n      xd.unshift(carry);\n      ++e;\n    }\n\n    // Remove trailing zeros.\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n    y.d = xd;\n    y.e = getBase10Exponent(xd, e);\n\n    return external ? finalise(y, pr, rm) : y;\n  };\n\n\n  /*\n   * Return the number of significant digits of the value of this Decimal.\n   *\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\n   *\n   */\n  P.precision = P.sd = function (z) {\n    var k,\n      x = this;\n\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n    if (x.d) {\n      k = getPrecision(x.d);\n      if (z && x.e + 1 > k) k = x.e + 1;\n    } else {\n      k = NaN;\n    }\n\n    return k;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\n   * rounding mode `rounding`.\n   *\n   */\n  P.round = function () {\n    var x = this,\n      Ctor = x.constructor;\n\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-1, 1]\n   *\n   * sin(x) = x - x^3/3! + x^5/5! - ...\n   *\n   * sin(0)         = 0\n   * sin(-0)        = -0\n   * sin(Infinity)  = NaN\n   * sin(-Infinity) = NaN\n   * sin(NaN)       = NaN\n   *\n   */\n  P.sine = P.sin = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n    Ctor.rounding = 1;\n\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   *  sqrt(-n) =  N\n   *  sqrt(N)  =  N\n   *  sqrt(-I) =  N\n   *  sqrt(I)  =  I\n   *  sqrt(0)  =  0\n   *  sqrt(-0) = -0\n   *\n   */\n  P.squareRoot = P.sqrt = function () {\n    var m, n, sd, r, rep, t,\n      x = this,\n      d = x.d,\n      e = x.e,\n      s = x.s,\n      Ctor = x.constructor;\n\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !d || !d[0]) {\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n    }\n\n    external = false;\n\n    // Initial estimate.\n    s = Math.sqrt(+x);\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = digitsToString(d);\n\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n      if (s == 1 / 0) {\n        n = '1e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n\n      r = new Ctor(n);\n    } else {\n      r = new Ctor(s.toString());\n    }\n\n    sd = (e = Ctor.precision) + 3;\n\n    // Newton-Raphson iteration.\n    for (;;) {\n      t = r;\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n\n      // TODO? Replace with for-loop and checkRoundingDigits.\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n        n = n.slice(sd - 3, sd + 1);\n\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\n        if (n == '9999' || !rep && n == '4999') {\n\n          // On the first iteration only, check to see if rounding up gives the exact result as the\n          // nines may infinitely repeat.\n          if (!rep) {\n            finalise(t, e + 1, 0);\n\n            if (t.times(t).eq(x)) {\n              r = t;\n              break;\n            }\n          }\n\n          sd += 4;\n          rep = 1;\n        } else {\n\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n          // If not, then there are further digits and m will be truthy.\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n            // Truncate to the first rounding digit.\n            finalise(r, e + 1, 1);\n            m = !r.times(r).eq(x);\n          }\n\n          break;\n        }\n      }\n    }\n\n    external = true;\n\n    return finalise(r, e, Ctor.rounding, m);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-Infinity, Infinity]\n   *\n   * tan(0)         = 0\n   * tan(-0)        = -0\n   * tan(Infinity)  = NaN\n   * tan(-Infinity) = NaN\n   * tan(NaN)       = NaN\n   *\n   */\n  P.tangent = P.tan = function () {\n    var pr, rm,\n      x = this,\n      Ctor = x.constructor;\n\n    if (!x.isFinite()) return new Ctor(NaN);\n    if (x.isZero()) return new Ctor(x);\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n    Ctor.precision = pr + 10;\n    Ctor.rounding = 1;\n\n    x = x.sin();\n    x.s = 1;\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n\n    Ctor.precision = pr;\n    Ctor.rounding = rm;\n\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n  };\n\n\n  /*\n   *  n * 0 = 0\n   *  n * N = N\n   *  n * I = I\n   *  0 * n = 0\n   *  0 * 0 = 0\n   *  0 * N = N\n   *  0 * I = N\n   *  N * n = N\n   *  N * 0 = N\n   *  N * N = N\n   *  N * I = N\n   *  I * n = I\n   *  I * 0 = N\n   *  I * N = N\n   *  I * I = I\n   *\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   */\n  P.times = P.mul = function (y) {\n    var carry, e, i, k, r, rL, t, xdL, ydL,\n      x = this,\n      Ctor = x.constructor,\n      xd = x.d,\n      yd = (y = new Ctor(y)).d;\n\n    y.s *= x.s;\n\n     // If either is NaN, ±Infinity or ±0...\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\n\n        // Return NaN if either is NaN.\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n        ? NaN\n\n        // Return ±Infinity if either is ±Infinity.\n        // Return ±0 if either is ±0.\n        : !xd || !yd ? y.s / 0 : y.s * 0);\n    }\n\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n    xdL = xd.length;\n    ydL = yd.length;\n\n    // Ensure xd points to the longer array.\n    if (xdL < ydL) {\n      r = xd;\n      xd = yd;\n      yd = r;\n      rL = xdL;\n      xdL = ydL;\n      ydL = rL;\n    }\n\n    // Initialise the result array with zeros.\n    r = [];\n    rL = xdL + ydL;\n    for (i = rL; i--;) r.push(0);\n\n    // Multiply!\n    for (i = ydL; --i >= 0;) {\n      carry = 0;\n      for (k = xdL + i; k > i;) {\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\n        r[k--] = t % BASE | 0;\n        carry = t / BASE | 0;\n      }\n\n      r[k] = (r[k] + carry) % BASE | 0;\n    }\n\n    // Remove trailing zeros.\n    for (; !r[--rL];) r.pop();\n\n    if (carry) ++e;\n    else r.shift();\n\n    y.d = r;\n    y.e = getBase10Exponent(r, e);\n\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\n   * digits using rounding mode `rm`.\n   *\n   * If the optional `sd` argument is present then return binary exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toBinary = function (sd, rm) {\n    return toStringBinary(this, 2, sd, rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\n   *\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\n    var x = this,\n      Ctor = x.constructor;\n\n    x = new Ctor(x);\n    if (dp === void 0) return x;\n\n    checkInt32(dp, 0, MAX_DIGITS);\n\n    if (rm === void 0) rm = Ctor.rounding;\n    else checkInt32(rm, 0, 8);\n\n    return finalise(x, dp + x.e + 1, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in exponential notation rounded to\n   * `dp` fixed decimal places using rounding mode `rounding`.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toExponential = function (dp, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x, true);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n\n      x = finalise(new Ctor(x), dp + 1, rm);\n      str = finiteToString(x, true, dp + 1);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\n   * omitted.\n   *\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\n   *\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n   * (-0).toFixed(3) is '0.000'.\n   * (-0.5).toFixed(0) is '-0'.\n   *\n   */\n  P.toFixed = function (dp, rm) {\n    var str, y,\n      x = this,\n      Ctor = x.constructor;\n\n    if (dp === void 0) {\n      str = finiteToString(x);\n    } else {\n      checkInt32(dp, 0, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\n      str = finiteToString(y, false, dp + y.e + 1);\n    }\n\n    // To determine whether to add the minus sign look at the value before it was rounded,\n    // i.e. look at `x` rather than `y`.\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\n   * numerator and an integer denominator.\n   *\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\n   * value necessary to represent the number exactly.\n   *\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\n   *\n   */\n  P.toFraction = function (maxD) {\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\n      x = this,\n      xd = x.d,\n      Ctor = x.constructor;\n\n    if (!xd) return new Ctor(x);\n\n    n1 = d0 = new Ctor(1);\n    d1 = n0 = new Ctor(0);\n\n    d = new Ctor(d1);\n    e = d.e = getPrecision(xd) - x.e - 1;\n    k = e % LOG_BASE;\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n\n    if (maxD == null) {\n\n      // d is 10**e, the minimum max-denominator needed.\n      maxD = e > 0 ? d : n1;\n    } else {\n      n = new Ctor(maxD);\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\n    }\n\n    external = false;\n    n = new Ctor(digitsToString(xd));\n    pr = Ctor.precision;\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\n\n    for (;;)  {\n      q = divide(n, d, 0, 1, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.cmp(maxD) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      d2 = n1;\n      n1 = n0.plus(q.times(d2));\n      n0 = d2;\n      d2 = d;\n      d = n.minus(q.times(d2));\n      n = d2;\n    }\n\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\n        ? [n1, d1] : [n0, d0];\n\n    Ctor.precision = pr;\n    external = true;\n\n    return r;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\n   * digits using rounding mode `rm`.\n   *\n   * If the optional `sd` argument is present then return binary exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toHexadecimal = P.toHex = function (sd, rm) {\n    return toStringBinary(this, 16, sd, rm);\n  };\n\n\n\n  /*\n   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\n   * of this Decimal.\n   *\n   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\n   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\n   *\n   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\n   * (ROUND_UP), and so on.\n   *\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\n   * or `y` is NaN, in which case the return value will be also be NaN.\n   *\n   * The return value is not affected by the value of `precision`.\n   *\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * 'toNearest() rounding mode not an integer: {rm}'\n   * 'toNearest() rounding mode out of range: {rm}'\n   *\n   */\n  P.toNearest = function (y, rm) {\n    var x = this,\n      Ctor = x.constructor;\n\n    x = new Ctor(x);\n\n    if (y == null) {\n\n      // If x is not finite, return x.\n      if (!x.d) return x;\n\n      y = new Ctor(1);\n      rm = Ctor.rounding;\n    } else {\n      y = new Ctor(y);\n      if (rm !== void 0) checkInt32(rm, 0, 8);\n\n      // If x is not finite, return x if y is not NaN, else NaN.\n      if (!x.d) return y.s ? x : y;\n\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n      if (!y.d) {\n        if (y.s) y.s = x.s;\n        return y;\n      }\n    }\n\n    // If y is not zero, calculate the nearest multiple of y to x.\n    if (y.d[0]) {\n      external = false;\n      if (rm < 4) rm = [4, 5, 7, 8][rm];\n      x = divide(x, y, 0, rm, 1).times(y);\n      external = true;\n      finalise(x);\n\n    // If y is zero, return zero with the sign of x.\n    } else {\n      y.s = x.s;\n      x = y;\n    }\n\n    return x;\n  };\n\n\n  /*\n   * Return the value of this Decimal converted to a number primitive.\n   * Zero keeps its sign.\n   *\n   */\n  P.toNumber = function () {\n    return +this;\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\n   * digits using rounding mode `rm`.\n   *\n   * If the optional `sd` argument is present then return binary exponential notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toOctal = function (sd, rm) {\n    return toStringBinary(this, 8, sd, rm);\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\n   * to `precision` significant digits using rounding mode `rounding`.\n   *\n   * ECMAScript compliant.\n   *\n   *   pow(x, NaN)                           = NaN\n   *   pow(x, ±0)                            = 1\n\n   *   pow(NaN, non-zero)                    = NaN\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\n   *   pow(abs(x) > 1, -Infinity)            = +0\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\n   *   pow(abs(x) < 1, +Infinity)            = +0\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\n   *   pow(+Infinity, y > 0)                 = +Infinity\n   *   pow(+Infinity, y < 0)                 = +0\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\n   *   pow(-Infinity, even integer > 0)      = +Infinity\n   *   pow(-Infinity, odd integer < 0)       = -0\n   *   pow(-Infinity, even integer < 0)      = +0\n   *   pow(+0, y > 0)                        = +0\n   *   pow(+0, y < 0)                        = +Infinity\n   *   pow(-0, odd integer > 0)              = -0\n   *   pow(-0, even integer > 0)             = +0\n   *   pow(-0, odd integer < 0)              = -Infinity\n   *   pow(-0, even integer < 0)             = +Infinity\n   *   pow(finite x < 0, finite non-integer) = NaN\n   *\n   * For non-integer or very large exponents pow(x, y) is calculated using\n   *\n   *   x^y = exp(y*ln(x))\n   *\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\n   * probability of an incorrectly rounded result\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\n   * i.e. 1 in 250,000,000,000,000\n   *\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\n   *\n   * y {number|string|Decimal} The power to which to raise this Decimal.\n   *\n   */\n  P.toPower = P.pow = function (y) {\n    var e, k, pr, r, rm, sign, yIsInt,\n      x = this,\n      Ctor = x.constructor,\n      yn = +(y = new Ctor(y));\n\n    // Either ±Infinity, NaN or ±0?\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return  new Ctor(mathpow(+x, yn));\n\n    x = new Ctor(x);\n\n    if (x.eq(1)) return x;\n\n    pr = Ctor.precision;\n    rm = Ctor.rounding;\n\n    if (y.eq(1)) return finalise(x, pr, rm);\n\n    e = mathfloor(y.e / LOG_BASE);\n    k = y.d.length - 1;\n    yIsInt = e >= k;\n    sign = x.s;\n\n    if (!yIsInt) {\n      if (sign < 0) return new Ctor(NaN);\n\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n      r = intPow(Ctor, x, k, pr);\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n    }\n\n    // Result is negative if x is negative and the last digit of integer y is odd.\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\n\n    // Estimate result exponent.\n    // x^y = 10^e,  where e = y * log10(x)\n    // log10(x) = log10(x_significand) + x_exponent\n    // log10(x_significand) = ln(x_significand) / ln(10)\n    k = mathpow(+x, yn);\n    e = k == 0 || !isFinite(k)\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\n      : new Ctor(k + '').e;\n\n    // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n\n    // Overflow/underflow?\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? sign / 0 : 0);\n\n    external = false;\n    Ctor.rounding = x.s = 1;\n\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n    // new Decimal(2.32456).pow('2087987436534566.46411')\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n    k = Math.min(12, (e + '').length);\n\n    // r = x^y = exp(y*ln(x))\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n\n    // Truncate to the required precision plus five rounding digits.\n    r = finalise(r, pr + 5, 1);\n\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n    // the result.\n    if (checkRoundingDigits(r.d, pr, rm)) {\n      e = pr + 10;\n\n      // Truncate to the increased precision plus five rounding digits.\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n        r = finalise(r, pr + 1, 0);\n      }\n    }\n\n    r.s = sign;\n    external = true;\n    Ctor.rounding = rm;\n\n    return finalise(r, pr, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\n   * using rounding mode `rounding`.\n   *\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\n   * the integer part of the value in normal notation.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   */\n  P.toPrecision = function (sd, rm) {\n    var str,\n      x = this,\n      Ctor = x.constructor;\n\n    if (sd === void 0) {\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n\n      x = finalise(new Ctor(x), sd, rm);\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n    }\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\n   * omitted.\n   *\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n   *\n   * 'toSD() digits out of range: {sd}'\n   * 'toSD() digits not an integer: {sd}'\n   * 'toSD() rounding mode not an integer: {rm}'\n   * 'toSD() rounding mode out of range: {rm}'\n   *\n   */\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\n    var x = this,\n      Ctor = x.constructor;\n\n    if (sd === void 0) {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(sd, 1, MAX_DIGITS);\n\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n    }\n\n    return finalise(new Ctor(x), sd, rm);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal.\n   *\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\n   *\n   */\n  P.toString = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\n  };\n\n\n  /*\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\n   *\n   */\n  P.truncated = P.trunc = function () {\n    return finalise(new this.constructor(this), this.e + 1, 1);\n  };\n\n\n  /*\n   * Return a string representing the value of this Decimal.\n   * Unlike `toString`, negative zero will include the minus sign.\n   *\n   */\n  P.valueOf = P.toJSON = function () {\n    var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n\n    return x.isNeg() ? '-' + str : str;\n  };\n\n\n  /*\n  // Add aliases to match BigDecimal method names.\n  // P.add = P.plus;\n  P.subtract = P.minus;\n  P.multiply = P.times;\n  P.divide = P.div;\n  P.remainder = P.mod;\n  P.compareTo = P.cmp;\n  P.negate = P.neg;\n   */\n\n\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n\n  /*\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\n   *                           finiteToString, naturalExponential, naturalLogarithm\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\n   *  convertBase              toStringBinary, parseOther\n   *  cos                      P.cos\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\n   *                           taylorSeries, atan2, parseOther\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\n   *                           naturalLogarithm, ceil, floor, round, trunc\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\n   *                           toStringBinary\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\n   *  getLn10                  P.logarithm, naturalLogarithm\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\n   *  getPrecision             P.precision, P.toFraction\n   *  getZeroString            digitsToString, finiteToString\n   *  intPow                   P.toPower, parseOther\n   *  isOdd                    toLessThanHalfPi\n   *  maxOrMin                 max, min\n   *  naturalExponential       P.naturalExponential, P.toPower\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\n   *                           P.toPower, naturalExponential\n   *  nonFiniteToString        finiteToString, toStringBinary\n   *  parseDecimal             Decimal\n   *  parseOther               Decimal\n   *  sin                      P.sin\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\n   *  toLessThanHalfPi         P.cos, P.sin\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\n   *  truncate                 intPow\n   *\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\n   *                           naturalLogarithm, config, parseOther, random, Decimal\n   */\n\n\n  function digitsToString(d) {\n    var i, k, ws,\n      indexOfLastWord = d.length - 1,\n      str = '',\n      w = d[0];\n\n    if (indexOfLastWord > 0) {\n      str += w;\n      for (i = 1; i < indexOfLastWord; i++) {\n        ws = d[i] + '';\n        k = LOG_BASE - ws.length;\n        if (k) str += getZeroString(k);\n        str += ws;\n      }\n\n      w = d[i];\n      ws = w + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n    } else if (w === 0) {\n      return '0';\n    }\n\n    // Remove trailing zeros of last w.\n    for (; w % 10 === 0;) w /= 10;\n\n    return str + w;\n  }\n\n\n  function checkInt32(i, min, max) {\n    if (i !== ~~i || i < min || i > max) {\n      throw Error(invalidArgument + i);\n    }\n  }\n\n\n  /*\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\n   * `repeating == null` if caller is `log` or `pow`,\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\n   */\n  function checkRoundingDigits(d, i, rm, repeating) {\n    var di, k, r, rd;\n\n    // Get the length of the first word of the array d.\n    for (k = d[0]; k >= 10; k /= 10) --i;\n\n    // Is the rounding digit in the first word of d?\n    if (--i < 0) {\n      i += LOG_BASE;\n      di = 0;\n    } else {\n      di = Math.ceil((i + 1) / LOG_BASE);\n      i %= LOG_BASE;\n    }\n\n    // i is the index (0 - 6) of the rounding digit.\n    // E.g. if within the word 3487563 the first rounding digit is 5,\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n    k = mathpow(10, LOG_BASE - i);\n    rd = d[di] % k | 0;\n\n    if (repeating == null) {\n      if (i < 3) {\n        if (i == 0) rd = rd / 100 | 0;\n        else if (i == 1) rd = rd / 10 | 0;\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n      } else {\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n      }\n    } else {\n      if (i < 4) {\n        if (i == 0) rd = rd / 1000 | 0;\n        else if (i == 1) rd = rd / 100 | 0;\n        else if (i == 2) rd = rd / 10 | 0;\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n      } else {\n        r = ((repeating || rm < 4) && rd + 1 == k ||\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n      }\n    }\n\n    return r;\n  }\n\n\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n  function convertBase(str, baseIn, baseOut) {\n    var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      strL = str.length;\n\n    for (; i < strL;) {\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\n      for (j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\n          arr[j + 1] += arr[j] / baseOut | 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  }\n\n\n  /*\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\n   * |x| < pi/2\n   *\n   */\n  function cosine(Ctor, x) {\n    var k, y,\n      len = x.d.length;\n\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n\n    // Estimate the optimum number of times to use the argument reduction.\n    if (len < 32) {\n      k = Math.ceil(len / 3);\n      y = Math.pow(4, -k).toString();\n    } else {\n      k = 16;\n      y = '2.3283064365386962890625e-10';\n    }\n\n    Ctor.precision += k;\n\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n\n    // Reverse argument reduction\n    for (var i = k; i--;) {\n      var cos2x = x.times(x);\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n    }\n\n    Ctor.precision -= k;\n\n    return x;\n  }\n\n\n  /*\n   * Perform division in the specified base.\n   */\n  var divide = (function () {\n\n    // Assumes non-zero x and k, and hence non-zero result.\n    function multiplyInteger(x, k, base) {\n      var temp,\n        carry = 0,\n        i = x.length;\n\n      for (x = x.slice(); i--;) {\n        temp = x[i] * k + carry;\n        x[i] = temp % base | 0;\n        carry = temp / base | 0;\n      }\n\n      if (carry) x.unshift(carry);\n\n      return x;\n    }\n\n    function compare(a, b, aL, bL) {\n      var i, r;\n\n      if (aL != bL) {\n        r = aL > bL ? 1 : -1;\n      } else {\n        for (i = r = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            r = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n\n      return r;\n    }\n\n    function subtract(a, b, aL, base) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1;) a.shift();\n    }\n\n    return function (x, y, pr, rm, dp, base) {\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\n        yL, yz,\n        Ctor = x.constructor,\n        sign = x.s == y.s ? 1 : -1,\n        xd = x.d,\n        yd = y.d;\n\n      // Either NaN, Infinity or 0?\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\n\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n      }\n\n      if (base) {\n        logBase = 1;\n        e = x.e - y.e;\n      } else {\n        base = BASE;\n        logBase = LOG_BASE;\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n      }\n\n      yL = yd.length;\n      xL = xd.length;\n      q = new Ctor(sign);\n      qd = q.d = [];\n\n      // Result exponent may be one less than e.\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\n\n      if (yd[i] > (xd[i] || 0)) e--;\n\n      if (pr == null) {\n        sd = pr = Ctor.precision;\n        rm = Ctor.rounding;\n      } else if (dp) {\n        sd = pr + (x.e - y.e) + 1;\n      } else {\n        sd = pr;\n      }\n\n      if (sd < 0) {\n        qd.push(1);\n        more = true;\n      } else {\n\n        // Convert precision in number of base 10 digits to base 1e7 digits.\n        sd = sd / logBase + 2 | 0;\n        i = 0;\n\n        // divisor < 1e7\n        if (yL == 1) {\n          k = 0;\n          yd = yd[0];\n          sd++;\n\n          // k is the carry.\n          for (; (i < xL || k) && sd--; i++) {\n            t = k * base + (xd[i] || 0);\n            qd[i] = t / yd | 0;\n            k = t % yd | 0;\n          }\n\n          more = k || i < xL;\n\n        // divisor >= 1e7\n        } else {\n\n          // Normalise xd and yd so highest order digit of yd is >= base/2\n          k = base / (yd[0] + 1) | 0;\n\n          if (k > 1) {\n            yd = multiplyInteger(yd, k, base);\n            xd = multiplyInteger(xd, k, base);\n            yL = yd.length;\n            xL = xd.length;\n          }\n\n          xi = yL;\n          rem = xd.slice(0, yL);\n          remL = rem.length;\n\n          // Add zeros to make remainder as long as divisor.\n          for (; remL < yL;) rem[remL++] = 0;\n\n          yz = yd.slice();\n          yz.unshift(0);\n          yd0 = yd[0];\n\n          if (yd[1] >= base / 2) ++yd0;\n\n          do {\n            k = 0;\n\n            // Compare divisor and remainder.\n            cmp = compare(yd, rem, yL, remL);\n\n            // If divisor < remainder.\n            if (cmp < 0) {\n\n              // Calculate trial digit, k.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n              // k will be how many times the divisor goes into the current remainder.\n              k = rem0 / yd0 | 0;\n\n              //  Algorithm:\n              //  1. product = divisor * trial digit (k)\n              //  2. if product > remainder: product -= divisor, k--\n              //  3. remainder -= product\n              //  4. if product was < remainder at 2:\n              //    5. compare new remainder and divisor\n              //    6. If remainder > divisor: remainder -= divisor, k++\n\n              if (k > 1) {\n                if (k >= base) k = base - 1;\n\n                // product = divisor * trial digit.\n                prod = multiplyInteger(yd, k, base);\n                prodL = prod.length;\n                remL = rem.length;\n\n                // Compare product and remainder.\n                cmp = compare(prod, rem, prodL, remL);\n\n                // product > remainder.\n                if (cmp == 1) {\n                  k--;\n\n                  // Subtract divisor from product.\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                }\n              } else {\n\n                // cmp is -1.\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n                if (k == 0) cmp = k = 1;\n                prod = yd.slice();\n              }\n\n              prodL = prod.length;\n              if (prodL < remL) prod.unshift(0);\n\n              // Subtract product from remainder.\n              subtract(rem, prod, remL, base);\n\n              // If product was < previous remainder.\n              if (cmp == -1) {\n                remL = rem.length;\n\n                // Compare divisor and new remainder.\n                cmp = compare(yd, rem, yL, remL);\n\n                // If divisor < new remainder, subtract divisor from remainder.\n                if (cmp < 1) {\n                  k++;\n\n                  // Subtract divisor from remainder.\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\n                }\n              }\n\n              remL = rem.length;\n            } else if (cmp === 0) {\n              k++;\n              rem = [0];\n            }    // if cmp === 1, k will be 0\n\n            // Add the next digit, k, to the result array.\n            qd[i++] = k;\n\n            // Update the remainder.\n            if (cmp && rem[0]) {\n              rem[remL++] = xd[xi] || 0;\n            } else {\n              rem = [xd[xi]];\n              remL = 1;\n            }\n\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n\n          more = rem[0] !== void 0;\n        }\n\n        // Leading zero?\n        if (!qd[0]) qd.shift();\n      }\n\n      // logBase is 1 when divide is being used for base conversion.\n      if (logBase == 1) {\n        q.e = e;\n        inexact = more;\n      } else {\n\n        // To calculate q.e, first get the number of digits of qd[0].\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n        q.e = i + e * logBase - 1;\n\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n      }\n\n      return q;\n    };\n  })();\n\n\n  /*\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\n   * Check for over/under-flow.\n   */\n   function finalise(x, sd, rm, isTruncated) {\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\n      Ctor = x.constructor;\n\n    // Don't round if sd is null or undefined.\n    out: if (sd != null) {\n      xd = x.d;\n\n      // Infinity/NaN.\n      if (!xd) return x;\n\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // w: the word of xd containing rd, a base 1e7 number.\n      // xdi: the index of w within xd.\n      // digits: the number of digits of w.\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n      // they had leading zeros)\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n\n      // Get the length of the first word of the digits array xd.\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n      i = sd - digits;\n\n      // Is the rounding digit in the first word of xd?\n      if (i < 0) {\n        i += LOG_BASE;\n        j = sd;\n        w = xd[xdi = 0];\n\n        // Get the rounding digit at index j of w.\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n      } else {\n        xdi = Math.ceil((i + 1) / LOG_BASE);\n        k = xd.length;\n        if (xdi >= k) {\n          if (isTruncated) {\n\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n            for (; k++ <= xdi;) xd.push(0);\n            w = rd = 0;\n            digits = 1;\n            i %= LOG_BASE;\n            j = i - LOG_BASE + 1;\n          } else {\n            break out;\n          }\n        } else {\n          w = k = xd[xdi];\n\n          // Get the number of digits of w.\n          for (digits = 1; k >= 10; k /= 10) digits++;\n\n          // Get the index of rd within w.\n          i %= LOG_BASE;\n\n          // Get the index of rd within w, adjusted for leading zeros.\n          // The number of leading zeros of w is given by LOG_BASE - digits.\n          j = i - LOG_BASE + digits;\n\n          // Get the rounding digit at index j of w.\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n        }\n      }\n\n      // Are there any non-zero digits after the rounding digit?\n      isTruncated = isTruncated || sd < 0 ||\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n      // will give 714.\n\n      roundUp = rm < 4\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\n\n          // Check whether the digit to the left of the rounding digit is odd.\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\n            rm == (x.s < 0 ? 8 : 7));\n\n      if (sd < 1 || !xd[0]) {\n        xd.length = 0;\n        if (roundUp) {\n\n          // Convert sd to decimal places.\n          sd -= x.e + 1;\n\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n          x.e = -sd || 0;\n        } else {\n\n          // Zero.\n          xd[0] = x.e = 0;\n        }\n\n        return x;\n      }\n\n      // Remove excess digits.\n      if (i == 0) {\n        xd.length = xdi;\n        k = 1;\n        xdi--;\n      } else {\n        xd.length = xdi + 1;\n        k = mathpow(10, LOG_BASE - i);\n\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n        // j > 0 means i > number of leading zeros of w.\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n      }\n\n      if (roundUp) {\n        for (;;) {\n\n          // Is the digit to be rounded up in the first word of xd?\n          if (xdi == 0) {\n\n            // i will be the length of xd[0] before k is added.\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n            j = xd[0] += k;\n            for (k = 1; j >= 10; j /= 10) k++;\n\n            // if i != k the length has increased.\n            if (i != k) {\n              x.e++;\n              if (xd[0] == BASE) xd[0] = 1;\n            }\n\n            break;\n          } else {\n            xd[xdi] += k;\n            if (xd[xdi] != BASE) break;\n            xd[xdi--] = 0;\n            k = 1;\n          }\n        }\n      }\n\n      // Remove trailing zeros.\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\n    }\n\n    if (external) {\n\n      // Overflow?\n      if (x.e > Ctor.maxE) {\n\n        // Infinity.\n        x.d = null;\n        x.e = NaN;\n\n      // Underflow?\n      } else if (x.e < Ctor.minE) {\n\n        // Zero.\n        x.e = 0;\n        x.d = [0];\n        // Ctor.underflow = true;\n      } // else Ctor.underflow = false;\n    }\n\n    return x;\n  }\n\n\n  function finiteToString(x, isExp, sd) {\n    if (!x.isFinite()) return nonFiniteToString(x);\n    var k,\n      e = x.e,\n      str = digitsToString(x.d),\n      len = str.length;\n\n    if (isExp) {\n      if (sd && (k = sd - len) > 0) {\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n      } else if (len > 1) {\n        str = str.charAt(0) + '.' + str.slice(1);\n      }\n\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n    } else if (e < 0) {\n      str = '0.' + getZeroString(-e - 1) + str;\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\n    } else if (e >= len) {\n      str += getZeroString(e + 1 - len);\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n    } else {\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n      if (sd && (k = sd - len) > 0) {\n        if (e + 1 === len) str += '.';\n        str += getZeroString(k);\n      }\n    }\n\n    return str;\n  }\n\n\n  // Calculate the base 10 exponent from the base 1e7 exponent.\n  function getBase10Exponent(digits, e) {\n    var w = digits[0];\n\n    // Add the number of digits of the first word of the digits array.\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\n    return e;\n  }\n\n\n  function getLn10(Ctor, sd, pr) {\n    if (sd > LN10_PRECISION) {\n\n      // Reset global state in case the exception is caught.\n      external = true;\n      if (pr) Ctor.precision = pr;\n      throw Error(precisionLimitExceeded);\n    }\n    return finalise(new Ctor(LN10), sd, 1, true);\n  }\n\n\n  function getPi(Ctor, sd, rm) {\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n    return finalise(new Ctor(PI), sd, rm, true);\n  }\n\n\n  function getPrecision(digits) {\n    var w = digits.length - 1,\n      len = w * LOG_BASE + 1;\n\n    w = digits[w];\n\n    // If non-zero...\n    if (w) {\n\n      // Subtract the number of trailing zeros of the last word.\n      for (; w % 10 == 0; w /= 10) len--;\n\n      // Add the number of digits of the first word.\n      for (w = digits[0]; w >= 10; w /= 10) len++;\n    }\n\n    return len;\n  }\n\n\n  function getZeroString(k) {\n    var zs = '';\n    for (; k--;) zs += '0';\n    return zs;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\n   * integer of type number.\n   *\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\n   *\n   */\n  function intPow(Ctor, x, n, pr) {\n    var isTruncated,\n      r = new Ctor(1),\n\n      // Max n of 9007199254740991 takes 53 loop iterations.\n      // Maximum digits array length; leaves [28, 34] guard digits.\n      k = Math.ceil(pr / LOG_BASE + 4);\n\n    external = false;\n\n    for (;;) {\n      if (n % 2) {\n        r = r.times(x);\n        if (truncate(r.d, k)) isTruncated = true;\n      }\n\n      n = mathfloor(n / 2);\n      if (n === 0) {\n\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n        n = r.d.length - 1;\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\n        break;\n      }\n\n      x = x.times(x);\n      truncate(x.d, k);\n    }\n\n    external = true;\n\n    return r;\n  }\n\n\n  function isOdd(n) {\n    return n.d[n.d.length - 1] & 1;\n  }\n\n\n  /*\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\n   */\n  function maxOrMin(Ctor, args, ltgt) {\n    var y,\n      x = new Ctor(args[0]),\n      i = 0;\n\n    for (; ++i < args.length;) {\n      y = new Ctor(args[i]);\n      if (!y.s) {\n        x = y;\n        break;\n      } else if (x[ltgt](y)) {\n        x = y;\n      }\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\n   * digits.\n   *\n   * Taylor/Maclaurin series.\n   *\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\n   *\n   * Argument reduction:\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\n   *   exp(x) = exp(x / 2^k)^(2^k)\n   *\n   * Previously, the argument was initially reduced by\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\n   * found to be slower than just dividing repeatedly by 32 as above.\n   *\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\n   *\n   *  exp(Infinity)  = Infinity\n   *  exp(-Infinity) = 0\n   *  exp(NaN)       = NaN\n   *  exp(±0)        = 1\n   *\n   *  exp(x) is non-terminating for any finite, non-zero x.\n   *\n   *  The result will always be correctly rounded.\n   *\n   */\n  function naturalExponential(x, sd) {\n    var denominator, guard, j, pow, sum, t, wpr,\n      rep = 0,\n      i = 0,\n      k = 0,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // 0/NaN/Infinity?\n    if (!x.d || !x.d[0] || x.e > 17) {\n\n      return new Ctor(x.d\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    t = new Ctor(0.03125);\n\n    // while abs(x) >= 0.1\n    while (x.e > -2) {\n\n      // x = x / 2^5\n      x = x.times(t);\n      k += 5;\n    }\n\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n    // necessary to ensure the first 4 rounding digits are correct.\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n    wpr += guard;\n    denominator = pow = sum = new Ctor(1);\n    Ctor.precision = wpr;\n\n    for (;;) {\n      pow = finalise(pow.times(x), wpr, 1);\n      denominator = denominator.times(++i);\n      t = sum.plus(divide(pow, denominator, wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        j = k;\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\n\n        // Check to see if the first 4 rounding digits are [49]999.\n        // If so, repeat the summation with a higher precision, otherwise\n        // e.g. with precision: 18, rounding: 1\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += 10;\n            denominator = pow = t = new Ctor(1);\n            i = 0;\n            rep++;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n    }\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\n   * digits.\n   *\n   *  ln(-n)        = NaN\n   *  ln(0)         = -Infinity\n   *  ln(-0)        = -Infinity\n   *  ln(1)         = 0\n   *  ln(Infinity)  = Infinity\n   *  ln(-Infinity) = NaN\n   *  ln(NaN)       = NaN\n   *\n   *  ln(n) (n != 1) is non-terminating.\n   *\n   */\n  function naturalLogarithm(y, sd) {\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\n      n = 1,\n      guard = 10,\n      x = y,\n      xd = x.d,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision;\n\n    // Is x negative or Infinity, NaN, 0 or 1?\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n    }\n\n    if (sd == null) {\n      external = false;\n      wpr = pr;\n    } else {\n      wpr = sd;\n    }\n\n    Ctor.precision = wpr += guard;\n    c = digitsToString(xd);\n    c0 = c.charAt(0);\n\n    if (Math.abs(e = x.e) < 1.5e15) {\n\n      // Argument reduction.\n      // The series converges faster the closer the argument is to 1, so using\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n      // later be divided by this number, then separate out the power of 10 using\n      // ln(a*10^b) = ln(a) + b*ln(10).\n\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n      // max n is 6 (gives 0.7 - 1.3)\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n        x = x.times(y);\n        c = digitsToString(x.d);\n        c0 = c.charAt(0);\n        n++;\n      }\n\n      e = x.e;\n\n      if (c0 > 1) {\n        x = new Ctor('0.' + c);\n        e++;\n      } else {\n        x = new Ctor(c0 + '.' + c.slice(1));\n      }\n    } else {\n\n      // The argument reduction method above may result in overflow if the argument y is a massive\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n      Ctor.precision = pr;\n\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\n    }\n\n    // x1 is x reduced to a value near 1.\n    x1 = x;\n\n    // Taylor series.\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n    x2 = finalise(x.times(x), wpr, 1);\n    denominator = 3;\n\n    for (;;) {\n      numerator = finalise(numerator.times(x2), wpr, 1);\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n        sum = sum.times(2);\n\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n        sum = divide(sum, new Ctor(n), wpr, 1);\n\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n        // been repeated previously) and the first 4 rounding digits 9999?\n        // If so, restart the summation with a higher precision, otherwise\n        // e.g. with precision: 12, rounding: 1\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n        // `wpr - guard` is the index of first rounding digit.\n        if (sd == null) {\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n            Ctor.precision = wpr += guard;\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n            x2 = finalise(x.times(x), wpr, 1);\n            denominator = rep = 1;\n          } else {\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\n          }\n        } else {\n          Ctor.precision = pr;\n          return sum;\n        }\n      }\n\n      sum = t;\n      denominator += 2;\n    }\n  }\n\n\n  // ±Infinity, NaN.\n  function nonFiniteToString(x) {\n    // Unsigned.\n    return String(x.s * x.s / 0);\n  }\n\n\n  /*\n   * Parse the value of a new Decimal `x` from string `str`.\n   */\n  function parseDecimal(x, str) {\n    var e, i, len;\n\n    // Decimal point?\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n    // Exponential form?\n    if ((i = str.search(/e/i)) > 0) {\n\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +str.slice(i + 1);\n      str = str.substring(0, i);\n    } else if (e < 0) {\n\n      // Integer.\n      e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48; i++);\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n    str = str.slice(i, len);\n\n    if (str) {\n      len -= i;\n      x.e = e = e - i - 1;\n      x.d = [];\n\n      // Transform base\n\n      // e is the base 10 exponent.\n      // i is where to slice str to get the first word of the digits array.\n      i = (e + 1) % LOG_BASE;\n      if (e < 0) i += LOG_BASE;\n\n      if (i < len) {\n        if (i) x.d.push(+str.slice(0, i));\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n        str = str.slice(i);\n        i = LOG_BASE - str.length;\n      } else {\n        i -= len;\n      }\n\n      for (; i--;) str += '0';\n      x.d.push(+str);\n\n      if (external) {\n\n        // Overflow?\n        if (x.e > x.constructor.maxE) {\n\n          // Infinity.\n          x.d = null;\n          x.e = NaN;\n\n        // Underflow?\n        } else if (x.e < x.constructor.minE) {\n\n          // Zero.\n          x.e = 0;\n          x.d = [0];\n          // x.constructor.underflow = true;\n        } // else x.constructor.underflow = false;\n      }\n    } else {\n\n      // Zero.\n      x.e = 0;\n      x.d = [0];\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\n   */\n  function parseOther(x, str) {\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n\n    if (str === 'Infinity' || str === 'NaN') {\n      if (!+str) x.s = NaN;\n      x.e = NaN;\n      x.d = null;\n      return x;\n    }\n\n    if (isHex.test(str))  {\n      base = 16;\n      str = str.toLowerCase();\n    } else if (isBinary.test(str))  {\n      base = 2;\n    } else if (isOctal.test(str))  {\n      base = 8;\n    } else {\n      throw Error(invalidArgument + str);\n    }\n\n    // Is there a binary exponent part?\n    i = str.search(/p/i);\n\n    if (i > 0) {\n      p = +str.slice(i + 1);\n      str = str.substring(2, i);\n    } else {\n      str = str.slice(2);\n    }\n\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n    // fraction part will be restored.\n    i = str.indexOf('.');\n    isFloat = i >= 0;\n    Ctor = x.constructor;\n\n    if (isFloat) {\n      str = str.replace('.', '');\n      len = str.length;\n      i = len - i;\n\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n    }\n\n    xd = convertBase(str, base, BASE);\n    xe = xd.length - 1;\n\n    // Remove trailing zeros.\n    for (i = xe; xd[i] === 0; --i) xd.pop();\n    if (i < 0) return new Ctor(x.s * 0);\n    x.e = getBase10Exponent(xd, xe);\n    x.d = xd;\n    external = false;\n\n    // At what precision to perform the division to ensure exact conversion?\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n    // Therefore using 4 * the number of digits of str will always be enough.\n    if (isFloat) x = divide(x, divisor, len * 4);\n\n    // Multiply by the binary exponent part if present.\n    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\n    external = true;\n\n    return x;\n  }\n\n\n  /*\n   * sin(x) = x - x^3/3! + x^5/5! - ...\n   * |x| < pi/2\n   *\n   */\n  function sine(Ctor, x) {\n    var k,\n      len = x.d.length;\n\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\n\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n\n    // Max k before Math.pow precision loss is 22\n    x = x.times(Math.pow(5, -k));\n    x = taylorSeries(Ctor, 2, x, x);\n\n    // Reverse argument reduction\n    var sin2_x,\n      d5 = new Ctor(5),\n      d16 = new Ctor(16),\n      d20 = new Ctor(20);\n    for (; k--;) {\n      sin2_x = x.times(x);\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n    }\n\n    return x;\n  }\n\n\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n    var j, t, u, x2,\n      i = 1,\n      pr = Ctor.precision,\n      k = Math.ceil(pr / LOG_BASE);\n\n    external = false;\n    x2 = x.times(x);\n    u = new Ctor(y);\n\n    for (;;) {\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n      t = u.plus(y);\n\n      if (t.d[k] !== void 0) {\n        for (j = k; t.d[j] === u.d[j] && j--;);\n        if (j == -1) break;\n      }\n\n      j = u;\n      u = y;\n      y = t;\n      t = j;\n      i++;\n    }\n\n    external = true;\n    t.d.length = k + 1;\n\n    return t;\n  }\n\n\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\n  function toLessThanHalfPi(Ctor, x) {\n    var t,\n      isNeg = x.s < 0,\n      pi = getPi(Ctor, Ctor.precision, 1),\n      halfPi = pi.times(0.5);\n\n    x = x.abs();\n\n    if (x.lte(halfPi)) {\n      quadrant = isNeg ? 4 : 1;\n      return x;\n    }\n\n    t = x.divToInt(pi);\n\n    if (t.isZero()) {\n      quadrant = isNeg ? 3 : 2;\n    } else {\n      x = x.minus(t.times(pi));\n\n      // 0 <= x < pi\n      if (x.lte(halfPi)) {\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\n        return x;\n      }\n\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\n    }\n\n    return x.minus(pi).abs();\n  }\n\n\n  /*\n   * Return the value of Decimal `x` as a string in base `baseOut`.\n   *\n   * If the optional `sd` argument is present include a binary exponent suffix.\n   */\n  function toStringBinary(x, baseOut, sd, rm) {\n    var base, e, i, k, len, roundUp, str, xd, y,\n      Ctor = x.constructor,\n      isExp = sd !== void 0;\n\n    if (isExp) {\n      checkInt32(sd, 1, MAX_DIGITS);\n      if (rm === void 0) rm = Ctor.rounding;\n      else checkInt32(rm, 0, 8);\n    } else {\n      sd = Ctor.precision;\n      rm = Ctor.rounding;\n    }\n\n    if (!x.isFinite()) {\n      str = nonFiniteToString(x);\n    } else {\n      str = finiteToString(x);\n      i = str.indexOf('.');\n\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\n      // log[2](10) = 3.321928094887362347870319429489390175864\n\n      if (isExp) {\n        base = 2;\n        if (baseOut == 16) {\n          sd = sd * 4 - 3;\n        } else if (baseOut == 8) {\n          sd = sd * 3 - 2;\n        }\n      } else {\n        base = baseOut;\n      }\n\n      // Convert the number as an integer then divide the result by its base raised to a power such\n      // that the fraction part will be restored.\n\n      // Non-integer.\n      if (i >= 0) {\n        str = str.replace('.', '');\n        y = new Ctor(1);\n        y.e = str.length - i;\n        y.d = convertBase(finiteToString(y), 10, base);\n        y.e = y.d.length;\n      }\n\n      xd = convertBase(str, 10, base);\n      e = len = xd.length;\n\n      // Remove trailing zeros.\n      for (; xd[--len] == 0;) xd.pop();\n\n      if (!xd[0]) {\n        str = isExp ? '0p+0' : '0';\n      } else {\n        if (i < 0) {\n          e--;\n        } else {\n          x = new Ctor(x);\n          x.d = xd;\n          x.e = e;\n          x = divide(x, y, sd, rm, 0, base);\n          xd = x.d;\n          e = x.e;\n          roundUp = inexact;\n        }\n\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\n        i = xd[sd];\n        k = base / 2;\n        roundUp = roundUp || xd[sd + 1] !== void 0;\n\n        roundUp = rm < 4\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\n            rm === (x.s < 0 ? 8 : 7));\n\n        xd.length = sd;\n\n        if (roundUp) {\n\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (; ++xd[--sd] > base - 1;) {\n            xd[sd] = 0;\n            if (!sd) {\n              ++e;\n              xd.unshift(1);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (len = xd.length; !xd[len - 1]; --len);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\n\n        // Add binary exponent suffix?\n        if (isExp) {\n          if (len > 1) {\n            if (baseOut == 16 || baseOut == 8) {\n              i = baseOut == 16 ? 4 : 3;\n              for (--len; len % i; len++) str += '0';\n              xd = convertBase(str, base, baseOut);\n              for (len = xd.length; !xd[len - 1]; --len);\n\n              // xd[0] will always be be 1\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n            } else {\n              str = str.charAt(0) + '.' + str.slice(1);\n            }\n          }\n\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\n        } else if (e < 0) {\n          for (; ++e;) str = '0' + str;\n          str = '0.' + str;\n        } else {\n          if (++e > len) for (e -= len; e-- ;) str += '0';\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n        }\n      }\n\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n    }\n\n    return x.s < 0 ? '-' + str : str;\n  }\n\n\n  // Does not strip trailing zeros.\n  function truncate(arr, len) {\n    if (arr.length > len) {\n      arr.length = len;\n      return true;\n    }\n  }\n\n\n  // Decimal methods\n\n\n  /*\n   *  abs\n   *  acos\n   *  acosh\n   *  add\n   *  asin\n   *  asinh\n   *  atan\n   *  atanh\n   *  atan2\n   *  cbrt\n   *  ceil\n   *  clone\n   *  config\n   *  cos\n   *  cosh\n   *  div\n   *  exp\n   *  floor\n   *  hypot\n   *  ln\n   *  log\n   *  log2\n   *  log10\n   *  max\n   *  min\n   *  mod\n   *  mul\n   *  pow\n   *  random\n   *  round\n   *  set\n   *  sign\n   *  sin\n   *  sinh\n   *  sqrt\n   *  sub\n   *  tan\n   *  tanh\n   *  trunc\n   */\n\n\n  /*\n   * Return a new Decimal whose value is the absolute value of `x`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function abs(x) {\n    return new this(x).abs();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function acos(x) {\n    return new this(x).acos();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function acosh(x) {\n    return new this(x).acosh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function add(x, y) {\n    return new this(x).plus(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function asin(x) {\n    return new this(x).asin();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function asinh(x) {\n    return new this(x).asinh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function atan(x) {\n    return new this(x).atan();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\n   * `precision` significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function atanh(x) {\n    return new this(x).atanh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   * Domain: [-Infinity, Infinity]\n   * Range: [-pi, pi]\n   *\n   * y {number|string|Decimal} The y-coordinate.\n   * x {number|string|Decimal} The x-coordinate.\n   *\n   * atan2(±0, -0)               = ±pi\n   * atan2(±0, +0)               = ±0\n   * atan2(±0, -x)               = ±pi for x > 0\n   * atan2(±0, x)                = ±0 for x > 0\n   * atan2(-y, ±0)               = -pi/2 for y > 0\n   * atan2(y, ±0)                = pi/2 for y > 0\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\n   * atan2(±Infinity, +Infinity) = ±pi/4\n   * atan2(NaN, x) = NaN\n   * atan2(y, NaN) = NaN\n   *\n   */\n  function atan2(y, x) {\n    y = new this(y);\n    x = new this(x);\n    var r,\n      pr = this.precision,\n      rm = this.rounding,\n      wpr = pr + 4;\n\n    // Either NaN\n    if (!y.s || !x.s) {\n      r = new this(NaN);\n\n    // Both ±Infinity\n    } else if (!y.d && !x.d) {\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n      r.s = y.s;\n\n    // x is ±Infinity or y is ±0\n    } else if (!x.d || y.isZero()) {\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n      r.s = y.s;\n\n    // y is ±Infinity or x is ±0\n    } else if (!y.d || x.isZero()) {\n      r = getPi(this, wpr, 1).times(0.5);\n      r.s = y.s;\n\n    // Both non-zero and finite\n    } else if (x.s < 0) {\n      this.precision = wpr;\n      this.rounding = 1;\n      r = this.atan(divide(y, x, wpr, 1));\n      x = getPi(this, wpr, 1);\n      this.precision = pr;\n      this.rounding = rm;\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\n    } else {\n      r = this.atan(divide(y, x, wpr, 1));\n    }\n\n    return r;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function cbrt(x) {\n    return new this(x).cbrt();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function ceil(x) {\n    return finalise(x = new this(x), x.e + 1, 2);\n  }\n\n\n  /*\n   * Configure global settings for a Decimal constructor.\n   *\n   * `obj` is an object with one or more of the following properties,\n   *\n   *   precision  {number}\n   *   rounding   {number}\n   *   toExpNeg   {number}\n   *   toExpPos   {number}\n   *   maxE       {number}\n   *   minE       {number}\n   *   modulo     {number}\n   *   crypto     {boolean|number}\n   *\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\n   *\n   */\n  function config(obj) {\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n    var i, p, v,\n      ps = [\n        'precision', 1, MAX_DIGITS,\n        'rounding', 0, 8,\n        'toExpNeg', -EXP_LIMIT, 0,\n        'toExpPos', 0, EXP_LIMIT,\n        'maxE', 0, EXP_LIMIT,\n        'minE', -EXP_LIMIT, 0,\n        'modulo', 0, 9\n      ];\n\n    for (i = 0; i < ps.length; i += 3) {\n      if ((v = obj[p = ps[i]]) !== void 0) {\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\n        else throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    if ((v = obj[p = 'crypto']) !== void 0) {\n      if (v === true || v === false || v === 0 || v === 1) {\n        if (v) {\n          if (typeof crypto != 'undefined' && crypto &&\n            (crypto.getRandomValues || crypto.randomBytes)) {\n            this[p] = true;\n          } else {\n            throw Error(cryptoUnavailable);\n          }\n        } else {\n          this[p] = false;\n        }\n      } else {\n        throw Error(invalidArgument + p + ': ' + v);\n      }\n    }\n\n    return this;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function cos(x) {\n    return new this(x).cos();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function cosh(x) {\n    return new this(x).cosh();\n  }\n\n\n  /*\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\n   * constructor.\n   *\n   */\n  function clone(obj) {\n    var i, p, ps;\n\n    /*\n     * The Decimal constructor and exported function.\n     * Return a new Decimal instance.\n     *\n     * v {number|string|Decimal} A numeric value.\n     *\n     */\n    function Decimal(v) {\n      var e, i, t,\n        x = this;\n\n      // Decimal called without new.\n      if (!(x instanceof Decimal)) return new Decimal(v);\n\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n      // which points to Object.\n      x.constructor = Decimal;\n\n      // Duplicate.\n      if (v instanceof Decimal) {\n        x.s = v.s;\n        x.e = v.e;\n        x.d = (v = v.d) ? v.slice() : v;\n        return;\n      }\n\n      t = typeof v;\n\n      if (t === 'number') {\n        if (v === 0) {\n          x.s = 1 / v < 0 ? -1 : 1;\n          x.e = 0;\n          x.d = [0];\n          return;\n        }\n\n        if (v < 0) {\n          v = -v;\n          x.s = -1;\n        } else {\n          x.s = 1;\n        }\n\n        // Fast path for small integers.\n        if (v === ~~v && v < 1e7) {\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\n          x.e = e;\n          x.d = [v];\n          return;\n\n        // Infinity, NaN.\n        } else if (v * 0 !== 0) {\n          if (!v) x.s = NaN;\n          x.e = NaN;\n          x.d = null;\n          return;\n        }\n\n        return parseDecimal(x, v.toString());\n\n      } else if (t !== 'string') {\n        throw Error(invalidArgument + v);\n      }\n\n      // Minus sign?\n      if (v.charCodeAt(0) === 45) {\n        v = v.slice(1);\n        x.s = -1;\n      } else {\n        x.s = 1;\n      }\n\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n    }\n\n    Decimal.prototype = P;\n\n    Decimal.ROUND_UP = 0;\n    Decimal.ROUND_DOWN = 1;\n    Decimal.ROUND_CEIL = 2;\n    Decimal.ROUND_FLOOR = 3;\n    Decimal.ROUND_HALF_UP = 4;\n    Decimal.ROUND_HALF_DOWN = 5;\n    Decimal.ROUND_HALF_EVEN = 6;\n    Decimal.ROUND_HALF_CEIL = 7;\n    Decimal.ROUND_HALF_FLOOR = 8;\n    Decimal.EUCLID = 9;\n\n    Decimal.config = Decimal.set = config;\n    Decimal.clone = clone;\n\n    Decimal.abs = abs;\n    Decimal.acos = acos;\n    Decimal.acosh = acosh;        // ES6\n    Decimal.add = add;\n    Decimal.asin = asin;\n    Decimal.asinh = asinh;        // ES6\n    Decimal.atan = atan;\n    Decimal.atanh = atanh;        // ES6\n    Decimal.atan2 = atan2;\n    Decimal.cbrt = cbrt;          // ES6\n    Decimal.ceil = ceil;\n    Decimal.cos = cos;\n    Decimal.cosh = cosh;          // ES6\n    Decimal.div = div;\n    Decimal.exp = exp;\n    Decimal.floor = floor;\n    Decimal.hypot = hypot;        // ES6\n    Decimal.ln = ln;\n    Decimal.log = log;\n    Decimal.log10 = log10;        // ES6\n    Decimal.log2 = log2;          // ES6\n    Decimal.max = max;\n    Decimal.min = min;\n    Decimal.mod = mod;\n    Decimal.mul = mul;\n    Decimal.pow = pow;\n    Decimal.random = random;\n    Decimal.round = round;\n    Decimal.sign = sign;          // ES6\n    Decimal.sin = sin;\n    Decimal.sinh = sinh;          // ES6\n    Decimal.sqrt = sqrt;\n    Decimal.sub = sub;\n    Decimal.tan = tan;\n    Decimal.tanh = tanh;          // ES6\n    Decimal.trunc = trunc;        // ES6\n\n    if (obj === void 0) obj = {};\n    if (obj) {\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n    }\n\n    Decimal.config(obj);\n\n    return Decimal;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function div(x, y) {\n    return new this(x).div(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\n   *\n   */\n  function exp(x) {\n    return new this(x).exp();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function floor(x) {\n    return finalise(x = new this(x), x.e + 1, 3);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\n   * rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\n   *\n   */\n  function hypot() {\n    var i, n,\n      t = new this(0);\n\n    external = false;\n\n    for (i = 0; i < arguments.length;) {\n      n = new this(arguments[i++]);\n      if (!n.d) {\n        if (n.s) {\n          external = true;\n          return new this(1 / 0);\n        }\n        t = n;\n      } else if (t.d) {\n        t = t.plus(n.times(n));\n      }\n    }\n\n    external = true;\n\n    return t.sqrt();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function ln(x) {\n    return new this(x).ln();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\n   *\n   * log[y](x)\n   *\n   * x {number|string|Decimal} The argument of the logarithm.\n   * y {number|string|Decimal} The base of the logarithm.\n   *\n   */\n  function log(x, y) {\n    return new this(x).log(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function log2(x) {\n    return new this(x).log(2);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function log10(x) {\n    return new this(x).log(10);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the maximum of the arguments.\n   *\n   * arguments {number|string|Decimal}\n   *\n   */\n  function max() {\n    return maxOrMin(this, arguments, 'lt');\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the minimum of the arguments.\n   *\n   * arguments {number|string|Decimal}\n   *\n   */\n  function min() {\n    return maxOrMin(this, arguments, 'gt');\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\n   * using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function mod(x, y) {\n    return new this(x).mod(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function mul(x, y) {\n    return new this(x).mul(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} The base.\n   * y {number|string|Decimal} The exponent.\n   *\n   */\n  function pow(x, y) {\n    return new this(x).pow(y);\n  }\n\n\n  /*\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\n   * are produced).\n   *\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\n   *\n   */\n  function random(sd) {\n    var d, e, k, n,\n      i = 0,\n      r = new this(1),\n      rd = [];\n\n    if (sd === void 0) sd = this.precision;\n    else checkInt32(sd, 1, MAX_DIGITS);\n\n    k = Math.ceil(sd / LOG_BASE);\n\n    if (!this.crypto) {\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\n\n    // Browsers supporting crypto.getRandomValues.\n    } else if (crypto.getRandomValues) {\n      d = crypto.getRandomValues(new Uint32Array(k));\n\n      for (; i < k;) {\n        n = d[i];\n\n        // 0 <= n < 4294967296\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n        if (n >= 4.29e9) {\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n        } else {\n\n          // 0 <= n <= 4289999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd[i++] = n % 1e7;\n        }\n      }\n\n    // Node.js supporting crypto.randomBytes.\n    } else if (crypto.randomBytes) {\n\n      // buffer\n      d = crypto.randomBytes(k *= 4);\n\n      for (; i < k;) {\n\n        // 0 <= n < 2147483648\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\n\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n        if (n >= 2.14e9) {\n          crypto.randomBytes(4).copy(d, i);\n        } else {\n\n          // 0 <= n <= 2139999999\n          // 0 <= (n % 1e7) <= 9999999\n          rd.push(n % 1e7);\n          i += 4;\n        }\n      }\n\n      i = k / 4;\n    } else {\n      throw Error(cryptoUnavailable);\n    }\n\n    k = rd[--i];\n    sd %= LOG_BASE;\n\n    // Convert trailing digits to zeros according to sd.\n    if (k && sd) {\n      n = mathpow(10, LOG_BASE - sd);\n      rd[i] = (k / n | 0) * n;\n    }\n\n    // Remove trailing words which are zero.\n    for (; rd[i] === 0; i--) rd.pop();\n\n    // Zero?\n    if (i < 0) {\n      e = 0;\n      rd = [0];\n    } else {\n      e = -1;\n\n      // Remove leading words which are zero and adjust exponent accordingly.\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\n\n      // Count the digits of the first word of rd to determine leading zeros.\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\n\n      // Adjust the exponent for leading zeros of the first word of rd.\n      if (k < LOG_BASE) e -= LOG_BASE - k;\n    }\n\n    r.e = e;\n    r.d = rd;\n\n    return r;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\n   *\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function round(x) {\n    return finalise(x = new this(x), x.e + 1, this.rounding);\n  }\n\n\n  /*\n   * Return\n   *   1    if x > 0,\n   *  -1    if x < 0,\n   *   0    if x is 0,\n   *  -0    if x is -0,\n   *   NaN  otherwise\n   *\n   */\n  function sign(x) {\n    x = new this(x);\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\n   * using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function sin(x) {\n    return new this(x).sin();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function sinh(x) {\n    return new this(x).sinh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function sqrt(x) {\n    return new this(x).sqrt();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\n   * using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal}\n   * y {number|string|Decimal}\n   *\n   */\n  function sub(x, y) {\n    return new this(x).sub(y);\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\n   * digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function tan(x) {\n    return new this(x).tan();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\n   * significant digits using rounding mode `rounding`.\n   *\n   * x {number|string|Decimal} A value in radians.\n   *\n   */\n  function tanh(x) {\n    return new this(x).tanh();\n  }\n\n\n  /*\n   * Return a new Decimal whose value is `x` truncated to an integer.\n   *\n   * x {number|string|Decimal}\n   *\n   */\n  function trunc(x) {\n    return finalise(x = new this(x), x.e + 1, 1);\n  }\n\n\n  // Create and configure initial Decimal constructor.\n  Decimal = clone(Decimal);\n\n  // Create the internal constants from their string values.\n  LN10 = new Decimal(LN10);\n  PI = new Decimal(PI);\n\n\n  // Export.\n  if (typeof window !== 'undefined') {\n      globalScope = window;\n  } else if (typeof global !== 'undefined') {\n      globalScope = global;\n  }\n  if (!globalScope) {\n    globalScope = typeof self != 'undefined' && self && self.self == self\n      ? self : Function('return this')();\n  }\n\n  noConflict = globalScope.Decimal;\n  Decimal.noConflict = function () {\n    globalScope.Decimal = noConflict;\n    return Decimal;\n  };\n\n  globalScope.Decimal = Decimal;\n})(this);\n","^I",1743064685251,"^K",["^L",[]],"^M",["^ ","^N","^O","^P","^Q","^R","1.0.2","^S","decimal","^T","An arbitrary-precision Decimal type for ClojureScript.","^U","https://github.com/funcool/decimal","^V","^W","^X",["^W","1.0.2"]],"^Y",[],"^Z",[],"^[",["^ ","^1",[],"^3",false,"^5",[],"^6",[],"^7",[],"^8","es3","^9",null,"^<",false,"^G",[],"^Y",[],"^Z",[],"^10",[],"^11",false,"^12",false],"^U",["^13","jar:file:C:\\Users\\salva\\.m2\\repository\\funcool\\decimal\\1.0.2\\decimal-1.0.2.jar!/_decimal.js/decimal.js"],"^14",["^L",["^17"]],"^10",[],"^11",false,"^15",true,"^16",[],"^12",false],["^ ","^1",[],"^2",true,"^3",false,"^4",["51e0704b5e81c3ae0e8fb30d607bfd23b38a151c"],"^5",[],"^6",[],"^7",[],"^8","es3","^9",null,"^:","~$module$_decimal_js$decimal_min","^<",false,"^A","module$_decimal_js$decimal_min.js","^B",["^C","_decimal.js/decimal.min.js"],"^D","_decimal.js/decimal.min.js","^E","^F","^G",[],"^H","/* decimal.js v7.1.1 https://github.com/MikeMcl/decimal.js/LICENCE */\n!function(n){\"use strict\";function e(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",i=Rn-t.length,i&&(s+=l(i)),s+=t;o=n[e],t=o+\"\",i=Rn-t.length,i&&(s+=l(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function i(n,e,i){if(n!==~~n||n<e||n>i)throw Error(En+n)}function t(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=Rn,r=0):(r=Math.ceil((e+1)/Rn),e%=Rn),s=On(10,Rn-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==On(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==On(10,e-3)-1,o}function r(n,e,i){for(var t,r,s=[0],o=0,u=n.length;o<u;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=wn.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}function s(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=Math.pow(4,-i).toString()):(i=16,t=\"2.3283064365386962890625e-10\"),n.precision+=i,e=E(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}function o(n,e,i,t){var r,s,o,u,c,f,a,h,l,d=n.constructor;n:if(null!=e){if(!(h=n.d))return n;for(r=1,u=h[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=Rn,o=e,a=h[l=0],c=a/On(10,r-o-1)%10|0;else if(l=Math.ceil((s+1)/Rn),u=h.length,l>=u){if(!t)break n;for(;u++<=l;)h.push(0);a=c=0,r=1,s%=Rn,o=s-Rn+1}else{for(a=u=h[l],r=1;u>=10;u/=10)r++;s%=Rn,o=s-Rn+r,c=o<0?0:a/On(10,r-o-1)%10|0}if(t=t||e<0||void 0!==h[l+1]||(o<0?a:a%On(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/On(10,r-o):0:h[l-1])%10&1||i==(n.s<0?8:7)),e<1||!h[0])return h.length=0,f?(e-=n.e+1,h[0]=On(10,(Rn-e%Rn)%Rn),n.e=-e||0):h[0]=n.e=0,n;if(0==s?(h.length=l,u=1,l--):(h.length=l+1,u=On(10,Rn-s),h[l]=o>0?(a/On(10,r-o)%On(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=h[0];o>=10;o/=10)s++;for(o=h[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,h[0]==Pn&&(h[0]=1));break}if(h[l]+=u,h[l]!=Pn)break;h[l--]=0,u=1}for(s=h.length;0===h[--s];)h.pop()}return bn&&(n.e>d.maxE?(n.d=null,n.e=NaN):n.e<d.minE&&(n.e=0,n.d=[0])),n}function u(n,i,t){if(!n.isFinite())return v(n);var r,s=n.e,o=e(n.d),u=o.length;return i?(t&&(r=t-u)>0?o=o.charAt(0)+\".\"+o.slice(1)+l(r):u>1&&(o=o.charAt(0)+\".\"+o.slice(1)),o=o+(n.e<0?\"e\":\"e+\")+n.e):s<0?(o=\"0.\"+l(-s-1)+o,t&&(r=t-u)>0&&(o+=l(r))):s>=u?(o+=l(s+1-u),t&&(r=t-s-1)>0&&(o=o+\".\"+l(r))):((r=s+1)<u&&(o=o.slice(0,r)+\".\"+o.slice(r)),t&&(r=t-u)>0&&(s+1===u&&(o+=\".\"),o+=l(r))),o}function c(n,e){var i=n[0];for(e*=Rn;i>=10;i/=10)e++;return e}function f(n,e,i){if(e>Ln)throw bn=!0,i&&(n.precision=i),Error(Mn);return o(new n(mn),e,1,!0)}function a(n,e,i){if(e>Un)throw Error(Mn);return o(new n(vn),e,i,!0)}function h(n){var e=n.length-1,i=e*Rn+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function l(n){for(var e=\"\";n--;)e+=\"0\";return e}function d(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/Rn+4);for(bn=!1;;){if(i%2&&(s=s.times(e),q(s.d,o)&&(r=!0)),0===(i=qn(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}e=e.times(e),q(e.d,o)}return bn=!0,s}function p(n){return 1&n.d[n.d.length-1]}function g(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(t=new n(e[s]),!t.s){r=t;break}r[i](t)&&(r=t)}return r}function w(n,i){var r,s,u,c,f,a,h,l=0,d=0,p=0,g=n.constructor,w=g.rounding,m=g.precision;if(!n.d||!n.d[0]||n.e>17)return new g(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==i?(bn=!1,h=m):h=i,a=new g(.03125);n.e>-2;)n=n.times(a),p+=5;for(s=Math.log(On(2,p))/Math.LN10*2+5|0,h+=s,r=c=f=new g(1),g.precision=h;;){if(c=o(c.times(n),h,1),r=r.times(++d),a=f.plus(kn(c,r,h,1)),e(a.d).slice(0,h)===e(f.d).slice(0,h)){for(u=p;u--;)f=o(f.times(f),h,1);if(null!=i)return g.precision=m,f;if(!(l<3&&t(f.d,h-s,w,l)))return o(f,g.precision=m,w,bn=!0);g.precision=h+=10,r=c=a=new g(1),d=0,l++}f=a}}function m(n,i){var r,s,u,c,a,h,l,d,p,g,w,v=1,N=n,b=N.d,x=N.constructor,E=x.rounding,M=x.precision;if(N.s<0||!b||!b[0]||!N.e&&1==b[0]&&1==b.length)return new x(b&&!b[0]?-1/0:1!=N.s?NaN:b?0:N);if(null==i?(bn=!1,p=M):p=i,x.precision=p+=10,r=e(b),s=r.charAt(0),!(Math.abs(c=N.e)<15e14))return d=f(x,p+2,M).times(c+\"\"),N=m(new x(s+\".\"+r.slice(1)),p-10).plus(d),x.precision=M,null==i?o(N,M,E,bn=!0):N;for(;s<7&&1!=s||1==s&&r.charAt(1)>3;)N=N.times(n),r=e(N.d),s=r.charAt(0),v++;for(c=N.e,s>1?(N=new x(\"0.\"+r),c++):N=new x(s+\".\"+r.slice(1)),g=N,l=a=N=kn(N.minus(1),N.plus(1),p,1),w=o(N.times(N),p,1),u=3;;){if(a=o(a.times(w),p,1),d=l.plus(kn(a,new x(u),p,1)),e(d.d).slice(0,p)===e(l.d).slice(0,p)){if(l=l.times(2),0!==c&&(l=l.plus(f(x,p+2,M).times(c+\"\"))),l=kn(l,new x(v),p,1),null!=i)return x.precision=M,l;if(!t(l.d,p-10,E,h))return o(l,x.precision=M,E,bn=!0);x.precision=p+=10,d=a=N=kn(g.minus(1),g.plus(1),p,1),w=o(N.times(N),p,1),u=h=1}l=d,u+=2}}function v(n){return String(n.s*n.s/0)}function N(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%Rn,i<0&&(t+=Rn),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=Rn;t<r;)n.d.push(+e.slice(t,t+=Rn));e=e.slice(t),t=Rn-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),bn&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function b(n,e){var i,t,s,o,u,f,a,h,l;if(\"Infinity\"===e||\"NaN\"===e)return+e||(n.s=NaN),n.e=NaN,n.d=null,n;if(An.test(e))i=16,e=e.toLowerCase();else if(Fn.test(e))i=2;else{if(!Dn.test(e))throw Error(En+e);i=8}for(o=e.search(/p/i),o>0?(a=+e.slice(o+1),e=e.substring(2,o)):e=e.slice(2),o=e.indexOf(\".\"),u=o>=0,t=n.constructor,u&&(e=e.replace(\".\",\"\"),f=e.length,o=f-o,s=d(t,new t(i),o,2*o)),h=r(e,i,Pn),l=h.length-1,o=l;0===h[o];--o)h.pop();return o<0?new t(0*n.s):(n.e=c(h,l),n.d=h,bn=!1,u&&(n=kn(n,s,4*f)),a&&(n=n.times(Math.abs(a)<54?Math.pow(2,a):Nn.pow(2,a))),bn=!0,n)}function x(n,e){var i,t=e.d.length;if(t<3)return E(n,2,e,e);i=1.4*Math.sqrt(t),i=i>16?16:0|i,e=e.times(Math.pow(5,-i)),e=E(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}function E(n,e,i,t,r){var s,o,u,c,f=1,a=n.precision,h=Math.ceil(a/Rn);for(bn=!1,c=i.times(i),u=new n(t);;){if(o=kn(u.times(c),new n(e++*e++),a,1),u=r?t.plus(o):t.minus(o),t=kn(o.times(c),new n(e++*e++),a,1),o=u.plus(t),void 0!==o.d[h]){for(s=h;o.d[s]===u.d[s]&&s--;);if(s==-1)break}s=u,u=t,t=o,o=s,f++}return bn=!0,o.d.length=h+1,o}function M(n,e){var i,t=e.s<0,r=a(n,n.precision,1),s=r.times(.5);if(e=e.abs(),e.lte(s))return dn=t?4:1,e;if(i=e.divToInt(r),i.isZero())dn=t?3:2;else{if(e=e.minus(i.times(r)),e.lte(s))return dn=p(i)?t?2:3:t?4:1,e;dn=p(i)?t?1:4:t?3:2}return e.minus(r).abs()}function y(n,e,t,s){var o,c,f,a,h,l,d,p,g,w=n.constructor,m=void 0!==t;if(m?(i(t,1,gn),void 0===s?s=w.rounding:i(s,0,8)):(t=w.precision,s=w.rounding),n.isFinite()){for(d=u(n),f=d.indexOf(\".\"),m?(o=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):o=e,f>=0&&(d=d.replace(\".\",\"\"),g=new w(1),g.e=d.length-f,g.d=r(u(g),10,o),g.e=g.d.length),p=r(d,10,o),c=h=p.length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:(n=new w(n),n.d=p,n.e=c,n=kn(n,g,t,s,0,o),p=n.d,c=n.e,l=hn),f=p[t],a=o/2,l=l||void 0!==p[t+1],l=s<4?(void 0!==f||l)&&(0===s||s===(n.s<0?3:2)):f>a||f===a&&(4===s||l||6===s&&1&p[t-1]||s===(n.s<0?8:7)),p.length=t,l)for(;++p[--t]>o-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,d=\"\";f<h;f++)d+=wn.charAt(p[f]);if(m){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)d+=\"0\";for(p=r(d,o,e),h=p.length;!p[h-1];--h);for(f=1,d=\"1.\";f<h;f++)d+=wn.charAt(p[f])}else d=d.charAt(0)+\".\"+d.slice(1);d=d+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)d=\"0\"+d;d=\"0.\"+d}else if(++c>h)for(c-=h;c--;)d+=\"0\";else c<h&&(d=d.slice(0,c)+\".\"+d.slice(c))}else d=m?\"0p+0\":\"0\";d=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+d}else d=v(n);return n.s<0?\"-\"+d:d}function q(n,e){if(n.length>e)return n.length=e,!0}function O(n){return new this(n).abs()}function F(n){return new this(n).acos()}function A(n){return new this(n).acosh()}function D(n,e){return new this(n).plus(e)}function Z(n){return new this(n).asin()}function P(n){return new this(n).asinh()}function R(n){return new this(n).atan()}function L(n){return new this(n).atanh()}function U(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?a(this,t,r):new this(0),i.s=n.s):!n.d||e.isZero()?(i=a(this,s,1).times(.5),i.s=n.s):e.s<0?(this.precision=s,this.rounding=1,i=this.atan(kn(n,e,s,1)),e=a(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(kn(n,e,s,1)):(i=a(this,s,1).times(e.s>0?.25:.75),i.s=n.s):i=new this(NaN),i}function _(n){return new this(n).cbrt()}function k(n){return o(n=new this(n),n.e+1,2)}function S(n){if(!n||\"object\"!=typeof n)throw Error(xn+\"Object expected\");var e,i,t,r=[\"precision\",1,gn,\"rounding\",0,8,\"toExpNeg\",-pn,0,\"toExpPos\",0,pn,\"maxE\",0,pn,\"minE\",-pn,0,\"modulo\",0,9];for(e=0;e<r.length;e+=3)if(void 0!==(t=n[i=r[e]])){if(!(qn(t)===t&&t>=r[e+1]&&t<=r[e+2]))throw Error(En+i+\": \"+t);this[i]=t}if(void 0!==(t=n[i=\"crypto\"])){if(t!==!0&&t!==!1&&0!==t&&1!==t)throw Error(En+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(yn);this[i]=!0}else this[i]=!1}return this}function T(n){return new this(n).cos()}function C(n){return new this(n).cosh()}function I(n){function e(n){var i,t,r,s=this;if(!(s instanceof e))return new e(n);if(s.constructor=e,n instanceof e)return s.s=n.s,s.e=n.e,void(s.d=(n=n.d)?n.slice():n);if(\"number\"===(r=typeof n)){if(0===n)return s.s=1/n<0?-1:1,s.e=0,void(s.d=[0]);if(n<0?(n=-n,s.s=-1):s.s=1,n===~~n&&n<1e7){for(i=0,t=n;t>=10;t/=10)i++;return s.e=i,void(s.d=[n])}return 0*n!=0?(n||(s.s=NaN),s.e=NaN,void(s.d=null)):N(s,n.toString())}if(\"string\"!==r)throw Error(En+n);return 45===n.charCodeAt(0)?(n=n.slice(1),s.s=-1):s.s=1,Zn.test(n)?N(s,n):b(s,n)}var i,t,r;if(e.prototype=_n,e.ROUND_UP=0,e.ROUND_DOWN=1,e.ROUND_CEIL=2,e.ROUND_FLOOR=3,e.ROUND_HALF_UP=4,e.ROUND_HALF_DOWN=5,e.ROUND_HALF_EVEN=6,e.ROUND_HALF_CEIL=7,e.ROUND_HALF_FLOOR=8,e.EUCLID=9,e.config=e.set=S,e.clone=I,e.abs=O,e.acos=F,e.acosh=A,e.add=D,e.asin=Z,e.asinh=P,e.atan=R,e.atanh=L,e.atan2=U,e.cbrt=_,e.ceil=k,e.cos=T,e.cosh=C,e.div=H,e.exp=B,e.floor=V,e.hypot=$,e.ln=j,e.log=W,e.log10=z,e.log2=J,e.max=G,e.min=K,e.mod=Q,e.mul=X,e.pow=Y,e.random=nn,e.round=en,e.sign=tn,e.sin=rn,e.sinh=sn,e.sqrt=on,e.sub=un,e.tan=cn,e.tanh=fn,e.trunc=an,void 0===n&&(n={}),n)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)n.hasOwnProperty(t=r[i++])||(n[t]=this[t]);return e.config(n),e}function H(n,e){return new this(n).div(e)}function B(n){return new this(n).exp()}function V(n){return o(n=new this(n),n.e+1,3)}function $(){var n,e,i=new this(0);for(bn=!1,n=0;n<arguments.length;)if(e=new this(arguments[n++]),e.d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return bn=!0,new this(1/0);i=e}return bn=!0,i.sqrt()}function j(n){return new this(n).ln()}function W(n,e){return new this(n).log(e)}function J(n){return new this(n).log(2)}function z(n){return new this(n).log(10)}function G(){return g(this,arguments,\"lt\")}function K(){return g(this,arguments,\"gt\")}function Q(n,e){return new this(n).mod(e)}function X(n,e){return new this(n).mul(e)}function Y(n,e){return new this(n).pow(e)}function nn(n){var e,t,r,s,o=0,u=new this(1),c=[];if(void 0===n?n=this.precision:i(n,1,gn),r=Math.ceil(n/Rn),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(r));o<r;)s=e[o],s>=429e7?e[o]=crypto.getRandomValues(new Uint32Array(1))[0]:c[o++]=s%1e7;else{if(!crypto.randomBytes)throw Error(yn);for(e=crypto.randomBytes(r*=4);o<r;)s=e[o]+(e[o+1]<<8)+(e[o+2]<<16)+((127&e[o+3])<<24),s>=214e7?crypto.randomBytes(4).copy(e,o):(c.push(s%1e7),o+=4);o=r/4}else for(;o<r;)c[o++]=1e7*Math.random()|0;for(r=c[--o],n%=Rn,r&&n&&(s=On(10,Rn-n),c[o]=(r/s|0)*s);0===c[o];o--)c.pop();if(o<0)t=0,c=[0];else{for(t=-1;0===c[0];t-=Rn)c.shift();for(r=1,s=c[0];s>=10;s/=10)r++;r<Rn&&(t-=Rn-r)}return u.e=t,u.d=c,u}function en(n){return o(n=new this(n),n.e+1,this.rounding)}function tn(n){return n=new this(n),n.d?n.d[0]?n.s:0*n.s:n.s||NaN}function rn(n){return new this(n).sin()}function sn(n){return new this(n).sinh()}function on(n){return new this(n).sqrt()}function un(n,e){return new this(n).sub(e)}function cn(n){return new this(n).tan()}function fn(n){return new this(n).tanh()}function an(n){return o(n=new this(n),n.e+1,1)}var hn,ln,dn,pn=9e15,gn=1e9,wn=\"0123456789abcdef\",mn=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",vn=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",Nn={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-pn,maxE:pn,crypto:!1},bn=!0,xn=\"[DecimalError] \",En=xn+\"Invalid argument: \",Mn=xn+\"Precision limit exceeded\",yn=xn+\"crypto unavailable\",qn=Math.floor,On=Math.pow,Fn=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,An=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,Dn=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,Zn=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,Pn=1e7,Rn=7,Ln=mn.length-1,Un=vn.length-1,_n={};_n.absoluteValue=_n.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),o(n)},_n.ceil=function(){return o(new this.constructor(this),this.e+1,2)},_n.comparedTo=_n.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(t=o.length,r=u.length,e=0,i=t<r?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},_n.cosine=_n.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+Rn,t.rounding=1,i=s(t,M(t,i)),t.precision=n,t.rounding=e,o(2==dn||3==dn?i.neg():i,n,e,!0)):new t(1):new t(NaN)},_n.cubeRoot=_n.cbrt=function(){var n,i,t,r,s,u,c,f,a,h,l=this,d=l.constructor;if(!l.isFinite()||l.isZero())return new d(l);for(bn=!1,u=l.s*Math.pow(l.s*l,1/3),u&&Math.abs(u)!=1/0?r=new d(u.toString()):(t=e(l.d),n=l.e,(u=(n-t.length+1)%3)&&(t+=1==u||u==-2?\"0\":\"00\"),u=Math.pow(t,1/3),n=qn((n+1)/3)-(n%3==(n<0?-1:2)),u==1/0?t=\"5e\"+n:(t=u.toExponential(),t=t.slice(0,t.indexOf(\"e\")+1)+n),r=new d(t),r.s=l.s),c=(n=d.precision)+3;;)if(f=r,a=f.times(f).times(f),h=a.plus(l),r=kn(h.plus(l).times(f),h.plus(a),c+2,1),e(f.d).slice(0,c)===(t=e(r.d)).slice(0,c)){if(\"9999\"!=(t=t.slice(c-3,c+1))&&(s||\"4999\"!=t)){+t&&(+t.slice(1)||\"5\"!=t.charAt(0))||(o(r,n+1,1),i=!r.times(r).times(r).eq(l));break}if(!s&&(o(f,n+1,0),f.times(f).times(f).eq(l))){r=f;break}c+=4,s=1}return bn=!0,o(r,n,d.rounding,i)},_n.decimalPlaces=_n.dp=function(){var n,e=this.d,i=NaN;if(e){if(n=e.length-1,i=(n-qn(this.e/Rn))*Rn,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},_n.dividedBy=_n.div=function(n){return kn(this,new this.constructor(n))},_n.dividedToIntegerBy=_n.divToInt=function(n){var e=this,i=e.constructor;return o(kn(e,new i(n),0,1,1),i.precision,i.rounding)},_n.equals=_n.eq=function(n){return 0===this.cmp(n)},_n.floor=function(){return o(new this.constructor(this),this.e+1,3)},_n.greaterThan=_n.gt=function(n){return this.cmp(n)>0},_n.greaterThanOrEqualTo=_n.gte=function(n){var e=this.cmp(n);return 1==e||0===e},_n.hyperbolicCosine=_n.cosh=function(){var n,e,i,t,r,s=this,u=s.constructor,c=new u(1);if(!s.isFinite())return new u(s.s?1/0:NaN);if(s.isZero())return c;i=u.precision,t=u.rounding,u.precision=i+Math.max(s.e,s.sd())+4,u.rounding=1,r=s.d.length,r<32?(n=Math.ceil(r/3),e=Math.pow(4,-n).toString()):(n=16,e=\"2.3283064365386962890625e-10\"),s=E(u,1,s.times(e),new u(1),!0);for(var f,a=n,h=new u(8);a--;)f=s.times(s),s=c.minus(f.times(h.minus(f.times(h))));return o(s,u.precision=i,u.rounding=t,!0)},_n.hyperbolicSine=_n.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=E(s,2,r,r,!0);else{n=1.4*Math.sqrt(t),n=n>16?16:0|n,r=r.times(Math.pow(5,-n)),r=E(s,2,r,r,!0);for(var u,c=new s(5),f=new s(16),a=new s(20);n--;)u=r.times(r),r=r.times(c.plus(u.times(f.times(u).plus(a))))}return s.precision=e,s.rounding=i,o(r,e,i,!0)},_n.hyperbolicTangent=_n.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,kn(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},_n.inverseCosine=_n.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return t!==-1?0===t?e.isNeg()?a(i,r,s):new i(0):new i(NaN):e.isZero()?a(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=a(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},_n.inverseHyperbolicCosine=_n.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,bn=!1,i=i.times(i).minus(1).sqrt().plus(i),bn=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},_n.inverseHyperbolicSine=_n.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,bn=!1,i=i.times(i).plus(1).sqrt().plus(i),bn=!0,t.precision=n,t.rounding=e,i.ln())},_n.inverseHyperbolicTangent=_n.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?o(new s(r),n,e,!0):(s.precision=i=t-r.e,r=kn(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},_n.inverseSine=_n.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,e!==-1?0===e?(n=a(s,i+4,t).times(.5),n.s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},_n.inverseTangent=_n.atan=function(){var n,e,i,t,r,s,u,c,f,h=this,l=h.constructor,d=l.precision,p=l.rounding;if(h.isFinite()){if(h.isZero())return new l(h);if(h.abs().eq(1)&&d+4<=Un)return u=a(l,d+4,p).times(.25),u.s=h.s,u}else{if(!h.s)return new l(NaN);if(d+4<=Un)return u=a(l,d+4,p).times(.5),u.s=h.s,u}for(l.precision=c=d+10,l.rounding=1,i=Math.min(28,c/Rn+2|0),n=i;n;--n)h=h.div(h.times(h).plus(1).sqrt().plus(1));for(bn=!1,e=Math.ceil(c/Rn),t=1,f=h.times(h),u=new l(h),r=h;n!==-1;)if(r=r.times(f),s=u.minus(r.div(t+=2)),r=r.times(f),u=s.plus(r.div(t+=2)),void 0!==u.d[e])for(n=e;u.d[n]===s.d[n]&&n--;);return i&&(u=u.times(2<<i-1)),bn=!0,o(u,l.precision=d,l.rounding=p,!0)},_n.isFinite=function(){return!!this.d},_n.isInteger=_n.isInt=function(){return!!this.d&&qn(this.e/Rn)>this.d.length-2},_n.isNaN=function(){return!this.s},_n.isNegative=_n.isNeg=function(){return this.s<0},_n.isPositive=_n.isPos=function(){return this.s>0},_n.isZero=function(){return!!this.d&&0===this.d[0]},_n.lessThan=_n.lt=function(n){return this.cmp(n)<0},_n.lessThanOrEqualTo=_n.lte=function(n){return this.cmp(n)<1},_n.logarithm=_n.log=function(n){var i,r,s,u,c,a,h,l,d=this,p=d.constructor,g=p.precision,w=p.rounding;if(null==n)n=new p(10),i=!0;else{if(n=new p(n),r=n.d,n.s<0||!r||!r[0]||n.eq(1))return new p(NaN);i=n.eq(10)}if(r=d.d,d.s<0||!r||!r[0]||d.eq(1))return new p(r&&!r[0]?-1/0:1!=d.s?NaN:r?0:1/0);if(i)if(r.length>1)c=!0;else{for(u=r[0];u%10==0;)u/=10;c=1!==u}if(bn=!1,h=g+5,a=m(d,h),s=i?f(p,h+10):m(n,h),l=kn(a,s,h,1),t(l.d,u=g,w))do{if(h+=10,a=m(d,h),s=i?f(p,h+10):m(n,h),l=kn(a,s,h,1),!c){+e(l.d).slice(u+1,u+15)+1==1e14&&(l=o(l,g+1,0));break}}while(t(l.d,u+=10,w));return bn=!0,o(l,g,w)},_n.minus=_n.sub=function(n){var e,i,t,r,s,u,f,a,h,l,d,p,g=this,w=g.constructor;if(n=new w(n),!g.d||!n.d)return g.s&&n.s?g.d?n.s=-n.s:n=new w(n.d||g.s!==n.s?g:NaN):n=new w(NaN),n;if(g.s!=n.s)return n.s=-n.s,g.plus(n);if(h=g.d,p=n.d,f=w.precision,a=w.rounding,!h[0]||!p[0]){if(p[0])n.s=-n.s;else{if(!h[0])return new w(3===a?-0:0);n=new w(g)}return bn?o(n,f,a):n}if(i=qn(n.e/Rn),l=qn(g.e/Rn),h=h.slice(),s=l-i){for(d=s<0,d?(e=h,s=-s,u=p.length):(e=p,i=l,u=h.length),t=Math.max(Math.ceil(f/Rn),u)+2,s>t&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for(t=h.length,u=p.length,d=t<u,d&&(u=t),t=0;t<u;t++)if(h[t]!=p[t]){d=h[t]<p[t];break}s=0}for(d&&(e=h,h=p,p=e,n.s=-n.s),u=h.length,t=p.length-u;t>0;--t)h[u++]=0;for(t=p.length;t>s;){if(h[--t]<p[t]){for(r=t;r&&0===h[--r];)h[r]=Pn-1;--h[r],h[t]+=Pn}h[t]-=p[t]}for(;0===h[--u];)h.pop();for(;0===h[0];h.shift())--i;return h[0]?(n.d=h,n.e=c(h,i),bn?o(n,f,a):n):new w(3===a?-0:0)},_n.modulo=_n.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?o(new t(i),t.precision,t.rounding):(bn=!1,9==t.modulo?(e=kn(i,n.abs(),0,3,1),e.s*=n.s):e=kn(i,n,0,t.modulo,1),e=e.times(n),bn=!0,i.minus(e))},_n.naturalExponential=_n.exp=function(){return w(this)},_n.naturalLogarithm=_n.ln=function(){return m(this)},_n.negated=_n.neg=function(){var n=new this.constructor(this);return n.s=-n.s,o(n)},_n.plus=_n.add=function(n){var e,i,t,r,s,u,f,a,h,l,d=this,p=d.constructor;if(n=new p(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new p(n.d||d.s===n.s?d:NaN)):n=new p(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(h=d.d,l=n.d,f=p.precision,a=p.rounding,!h[0]||!l[0])return l[0]||(n=new p(d)),bn?o(n,f,a):n;if(s=qn(d.e/Rn),t=qn(n.e/Rn),h=h.slice(),r=s-t){for(r<0?(i=h,r=-r,u=l.length):(i=l,t=s,u=h.length),s=Math.ceil(f/Rn),u=s>u?s+1:u+1,r>u&&(r=u,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for(u=h.length,r=l.length,u-r<0&&(r=u,i=l,l=h,h=i),e=0;r;)e=(h[--r]=h[r]+l[r]+e)/Pn|0,h[r]%=Pn;for(e&&(h.unshift(e),++t),u=h.length;0==h[--u];)h.pop();return n.d=h,n.e=c(h,t),bn?o(n,f,a):n},_n.precision=_n.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(En+n);return i.d?(e=h(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},_n.round=function(){var n=this,e=n.constructor;return o(new e(n),n.e+1,e.rounding)},_n.sine=_n.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+Rn,t.rounding=1,i=x(t,M(t,i)),t.precision=n,t.rounding=e,o(dn>2?i.neg():i,n,e,!0)):new t(NaN)},_n.squareRoot=_n.sqrt=function(){var n,i,t,r,s,u,c=this,f=c.d,a=c.e,h=c.s,l=c.constructor;if(1!==h||!f||!f[0])return new l(!h||h<0&&(!f||f[0])?NaN:f?c:1/0);for(bn=!1,h=Math.sqrt(+c),0==h||h==1/0?(i=e(f),(i.length+a)%2==0&&(i+=\"0\"),h=Math.sqrt(i),a=qn((a+1)/2)-(a<0||a%2),h==1/0?i=\"1e\"+a:(i=h.toExponential(),i=i.slice(0,i.indexOf(\"e\")+1)+a),r=new l(i)):r=new l(h.toString()),t=(a=l.precision)+3;;)if(u=r,r=u.plus(kn(c,u,t+2,1)).times(.5),e(u.d).slice(0,t)===(i=e(r.d)).slice(0,t)){if(\"9999\"!=(i=i.slice(t-3,t+1))&&(s||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(o(r,a+1,1),n=!r.times(r).eq(c));break}if(!s&&(o(u,a+1,0),u.times(u).eq(c))){r=u;break}t+=4,s=1}return bn=!0,o(r,a,l.rounding,n)},_n.tangent=_n.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,i=i.sin(),i.s=1,i=kn(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,o(2==dn||4==dn?i.neg():i,n,e,!0)):new t(NaN)},_n.times=_n.mul=function(n){var e,i,t,r,s,u,f,a,h,l=this,d=l.constructor,p=l.d,g=(n=new d(n)).d;if(n.s*=l.s,!(p&&p[0]&&g&&g[0]))return new d(!n.s||p&&!p[0]&&!g||g&&!g[0]&&!p?NaN:p&&g?0*n.s:n.s/0);for(i=qn(l.e/Rn)+qn(n.e/Rn),a=p.length,h=g.length,a<h&&(s=p,p=g,g=s,u=a,a=h,h=u),s=[],u=a+h,t=u;t--;)s.push(0);for(t=h;--t>=0;){for(e=0,r=a+t;r>t;)f=s[r]+g[t]*p[r-t-1]+e,s[r--]=f%Pn|0,e=f/Pn|0;s[r]=(s[r]+e)%Pn|0}for(;!s[--u];)s.pop();return e?++i:s.shift(),n.d=s,n.e=c(s,i),bn?o(n,d.precision,d.rounding):n},_n.toBinary=function(n,e){return y(this,2,n,e)},_n.toDecimalPlaces=_n.toDP=function(n,e){var t=this,r=t.constructor;return t=new r(t),void 0===n?t:(i(n,0,gn),void 0===e?e=r.rounding:i(e,0,8),o(t,n+t.e+1,e))},_n.toExponential=function(n,e){var t,r=this,s=r.constructor;return void 0===n?t=u(r,!0):(i(n,0,gn),void 0===e?e=s.rounding:i(e,0,8),r=o(new s(r),n+1,e),t=u(r,!0,n+1)),r.isNeg()&&!r.isZero()?\"-\"+t:t},_n.toFixed=function(n,e){var t,r,s=this,c=s.constructor;return void 0===n?t=u(s):(i(n,0,gn),void 0===e?e=c.rounding:i(e,0,8),r=o(new c(s),n+s.e+1,e),t=u(r,!1,n+r.e+1)),s.isNeg()&&!s.isZero()?\"-\"+t:t},_n.toFraction=function(n){var i,t,r,s,o,u,c,f,a,l,d,p,g=this,w=g.d,m=g.constructor;if(!w)return new m(g);if(a=t=new m(1),r=f=new m(0),i=new m(r),o=i.e=h(w)-g.e-1,u=o%Rn,i.d[0]=On(10,u<0?Rn+u:u),null==n)n=o>0?i:a;else{if(c=new m(n),!c.isInt()||c.lt(a))throw Error(En+c);n=c.gt(i)?o>0?i:a:c}for(bn=!1,c=new m(e(w)),l=m.precision,m.precision=o=w.length*Rn*2;d=kn(c,i,0,1,1),s=t.plus(d.times(r)),1!=s.cmp(n);)t=r,r=s,s=a,a=f.plus(d.times(s)),f=s,s=i,i=c.minus(d.times(s)),c=s;return s=kn(n.minus(t),r,0,1,1),f=f.plus(s.times(a)),t=t.plus(s.times(r)),f.s=a.s=g.s,p=kn(a,r,o,1).minus(g).abs().cmp(kn(f,t,o,1).minus(g).abs())<1?[a,r]:[f,t],m.precision=l,bn=!0,p},_n.toHexadecimal=_n.toHex=function(n,e){return y(this,16,n,e)},_n.toNearest=function(n,e){var t=this,r=t.constructor;if(t=new r(t),null==n){if(!t.d)return t;n=new r(1),e=r.rounding}else{if(n=new r(n),void 0!==e&&i(e,0,8),!t.d)return n.s?t:n;if(!n.d)return n.s&&(n.s=t.s),n}return n.d[0]?(bn=!1,e<4&&(e=[4,5,7,8][e]),t=kn(t,n,0,e,1).times(n),bn=!0,o(t)):(n.s=t.s,t=n),t},_n.toNumber=function(){return+this},_n.toOctal=function(n,e){return y(this,8,n,e)},_n.toPower=_n.pow=function(n){var i,r,s,u,c,f,a,h=this,l=h.constructor,p=+(n=new l(n));if(!(h.d&&n.d&&h.d[0]&&n.d[0]))return new l(On(+h,p));if(h=new l(h),h.eq(1))return h;if(s=l.precision,c=l.rounding,n.eq(1))return o(h,s,c);if(i=qn(n.e/Rn),r=n.d.length-1,a=i>=r,f=h.s,a){if((r=p<0?-p:p)<=9007199254740991)return u=d(l,h,r,s),n.s<0?new l(1).div(u):o(u,s,c)}else if(f<0)return new l(NaN);return f=f<0&&1&n.d[Math.max(i,r)]?-1:1,r=On(+h,p),(i=0!=r&&isFinite(r)?new l(r+\"\").e:qn(p*(Math.log(\"0.\"+e(h.d))/Math.LN10+h.e+1)))>l.maxE+1||i<l.minE-1?new l(i>0?f/0:0):(bn=!1,l.rounding=h.s=1,r=Math.min(12,(i+\"\").length),u=w(n.times(m(h,s+r)),s),u=o(u,s+5,1),t(u.d,s,c)&&(i=s+10,u=o(w(n.times(m(h,i+r)),i),i+5,1),+e(u.d).slice(s+1,s+15)+1==1e14&&(u=o(u,s+1,0))),u.s=f,bn=!0,l.rounding=c,o(u,s,c))},_n.toPrecision=function(n,e){var t,r=this,s=r.constructor;return void 0===n?t=u(r,r.e<=s.toExpNeg||r.e>=s.toExpPos):(i(n,1,gn),void 0===e?e=s.rounding:i(e,0,8),r=o(new s(r),n,e),t=u(r,n<=r.e||r.e<=s.toExpNeg,n)),r.isNeg()&&!r.isZero()?\"-\"+t:t},_n.toSignificantDigits=_n.toSD=function(n,e){var t=this,r=t.constructor;return void 0===n?(n=r.precision,e=r.rounding):(i(n,1,gn),void 0===e?e=r.rounding:i(e,0,8)),o(new r(t),n,e)},_n.toString=function(){var n=this,e=n.constructor,i=u(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},_n.truncated=_n.trunc=function(){return o(new this.constructor(this),this.e+1,1)},_n.valueOf=_n.toJSON=function(){var n=this,e=n.constructor,i=u(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var kn=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function i(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(t,r,s,u,c,f){var a,h,l,d,p,g,w,m,v,N,b,x,E,M,y,q,O,F,A,D,Z=t.constructor,P=t.s==r.s?1:-1,R=t.d,L=r.d;if(!(R&&R[0]&&L&&L[0]))return new Z(t.s&&r.s&&(R?!L||R[0]!=L[0]:L)?R&&0==R[0]||!L?0*P:P/0:NaN);for(f?(p=1,h=t.e-r.e):(f=Pn,p=Rn,h=qn(t.e/p)-qn(r.e/p)),A=L.length,O=R.length,v=new Z(P),N=v.d=[],l=0;L[l]==(R[l]||0);l++);if(L[l]>(R[l]||0)&&h--,null==s?(M=s=Z.precision,u=Z.rounding):M=c?s+(t.e-r.e)+1:s,M<0)N.push(1),g=!0;else{if(M=M/p+2|0,l=0,1==A){for(d=0,L=L[0],M++;(l<O||d)&&M--;l++)y=d*f+(R[l]||0),N[l]=y/L|0,d=y%L|0;g=d||l<O}else{for(d=f/(L[0]+1)|0,d>1&&(L=n(L,d,f),R=n(R,d,f),A=L.length,O=R.length),q=A,b=R.slice(0,A),x=b.length;x<A;)b[x++]=0;D=L.slice(),D.unshift(0),F=L[0],L[1]>=f/2&&++F;do{d=0,a=e(L,b,A,x),a<0?(E=b[0],A!=x&&(E=E*f+(b[1]||0)),d=E/F|0,d>1?(d>=f&&(d=f-1),w=n(L,d,f),m=w.length,x=b.length,1==(a=e(w,b,m,x))&&(d--,i(w,A<m?D:L,m,f))):(0==d&&(a=d=1),w=L.slice()),m=w.length,m<x&&w.unshift(0),i(b,w,x,f),a==-1&&(x=b.length,(a=e(L,b,A,x))<1&&(d++,i(b,A<x?D:L,x,f))),x=b.length):0===a&&(d++,b=[0]),N[l++]=d,a&&b[0]?b[x++]=R[q]||0:(b=[R[q]],x=1)}while((q++<O||void 0!==b[0])&&M--);g=void 0!==b[0]}N[0]||N.shift()}if(1==p)v.e=h,hn=g;else{for(l=1,d=N[0];d>=10;d/=10)l++;v.e=l+h*p-1,o(v,c?s+v.e+1:s,u,g)}return v}}();Nn=I(Nn),mn=new Nn(mn),vn=new Nn(vn),\"undefined\"!=typeof window?n=window:\"undefined\"!=typeof global&&(n=global),n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:Function(\"return this\")()),ln=n.Decimal,Nn.noConflict=function(){return n.Decimal=ln,Nn},n.Decimal=Nn}(this);","^I",1743064685251,"^K",["^L",[]],"^M",["^ ","^N","^O","^P","^Q","^R","1.0.2","^S","decimal","^T","An arbitrary-precision Decimal type for ClojureScript.","^U","https://github.com/funcool/decimal","^V","^W","^X",["^W","1.0.2"]],"^Y",[],"^Z",[],"^[",["^ ","^1",[],"^3",false,"^5",[],"^6",[],"^7",[],"^8","es3","^9",null,"^<",false,"^G",[],"^Y",[],"^Z",[],"^10",[],"^11",false,"^12",false],"^U",["^13","jar:file:C:\\Users\\salva\\.m2\\repository\\funcool\\decimal\\1.0.2\\decimal-1.0.2.jar!/_decimal.js/decimal.min.js"],"^14",["^L",["^18"]],"^10",[],"^11",false,"^15",true,"^16",[],"^12",false]],"~:shadow.build.classpath/CACHE-TIMESTAMP",1743162103000]