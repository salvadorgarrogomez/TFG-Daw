["^ ","~:resources",[["^ ","~:js-str-offsets",[["^ ","~:string","webpage","~:offset",150,"~:import",false],["^ ","^2","fs","^3",188,"^4",false],["^ ","^2","system","^3",213,"^4",false]],"~:classpath",true,"~:js-esm",false,"~:cache-key",["b57436ddcf14eb4b76133bcf81d0b8235d687e9c"],"~:js-imports",[],"~:js-invalid-requires",[],"~:goog-provides",[],"~:js-language","es3","~:goog-module",null,"~:ns","~$module$cemerick$cljs$test$runner","~:goog-module-legacy-namespace",false,"~:output-name","module$cemerick$cljs$test$runner.js","~:resource-id",["~:shadow.build.classpath/resource","cemerick/cljs/test/runner.js"],"~:resource-name","cemerick/cljs/test/runner.js","~:type","~:js","~:js-requires",["webpage","fs","system"],"~:source","// reusable phantomjs script for running clojurescript.test tests\n// see http://github.com/cemerick/clojurescript.test for more info\n\nvar p = require('webpage').create();\nvar fs = require('fs');\nvar sys = require('system');\nfor (var i = 1; i < sys.args.length; i++) {\n    if (fs.exists(sys.args[i])) {\n        if (!p.injectJs(sys.args[i])) throw new Error(\"Failed to inject \" + sys.args[i]);\n    } else {\n        p.evaluateJavaScript(\"(function () { \" + sys.args[i] + \";\" + \" })\");\n    }\n}\n\np.onConsoleMessage = function (x) {\n  var line = x.toString();\n  if (line !== \"[NEWLINE]\") {\n    console.log(line.replace(/\\[NEWLINE\\]/g, \"\\n\"));\n  }\n};\n\np.evaluate(function () {\n  cemerick.cljs.test.set_print_fn_BANG_(function(x) {\n    console.log(x.replace(/\\n/g, \"[NEWLINE]\")); // since console.log *itself* adds a newline\n  });\n});\n\nvar success = p.evaluate(function () {\n  var results = cemerick.cljs.test.run_all_tests();\n  console.log(results);\n  return cemerick.cljs.test.successful_QMARK_(results);\n});\n\nphantom.exit(success ? 0 : 1);\n\n","~:last-modified",1743189770093,"~:requires",["~#set",[]],"~:pom-info",["^ ","~:group-id","~$com.cemerick","~:artifact-id","~$clojurescript.test","~:version","0.2.3-SNAPSHOT","~:name","clojurescript.test","~:description","Port of clojure.test targeting ClojureScript.","~:url","http://github.com/cemerick/clojurescript.test","~:id","~$com.cemerick/clojurescript.test","~:coordinate",["^U","0.2.3-SNAPSHOT"]],"~:goog-requires",[],"~:js-dynamic-imports",[],"~:inspect-info",["^ ","^1",[["^ ","^2","webpage","^3",150,"^4",false],["^ ","^2","fs","^3",188,"^4",false],["^ ","^2","system","^3",213,"^4",false]],"^6",false,"^8",[],"^9",[],"^:",[],"^;","es3","^<",null,"^?",false,"^F",["webpage","fs","system"],"^W",[],"^X",[],"~:goog-require-types",[],"~:uses-global-buffer",false,"~:uses-global-process",false],"^S",["~#url","jar:file:C:\\Users\\salva\\.m2\\repository\\com\\cemerick\\clojurescript.test\\0.2.3-SNAPSHOT\\clojurescript.test-0.2.3-SNAPSHOT.jar!/cemerick/cljs/test/runner.js"],"~:provides",["^J",["^>"]],"^Z",[],"^[",false,"~:from-jar",true,"~:deps",["webpage","fs","system"],"^10",false],["^ ","^1",[["^ ","^2","path","^3",19,"^4",false],["^ ","^2","fs","^3",43,"^4",false]],"^5",true,"^6",false,"^7",["b57436ddcf14eb4b76133bcf81d0b8235d687e9c"],"^8",[],"^9",[],"^:",[],"^;","es3","^<",null,"^=","~$module$cemerick$cljs$test$node_runner","^?",false,"^@","module$cemerick$cljs$test$node_runner.js","^A",["^B","cemerick/cljs/test/node_runner.js"],"^C","cemerick/cljs/test/node_runner.js","^D","^E","^F",["path","fs"],"^G","var path = require(\"path\"),\n  fs = require(\"fs\"),\n  args = process.argv.slice(2);\n\nargs.forEach(function (arg) {\n    var file = path.join(process.cwd(), arg);\n    if (fs.existsSync(file)) {\n      try {\n        // using eval instead of require here so that `this` is the \"real\"\n        // top-level scope, not the module\n        eval(\"(function () {\" + fs.readFileSync(file, {encoding: \"UTF-8\"}) + \"})()\");\n      } catch (e) {\n        console.log(\"Error in file: \\\"\" + file + \"\\\"\");\n        console.log(e);\n      }\n    } else {\n      try {\n        eval(\"(function () {\" + arg + \"})()\");\n      } catch (e) {\n        console.log(\"Could not evaluate expression: \\\"\" + arg + \"\\\"\");\n        console.log(e);\n      }\n    }\n});\n\ncemerick.cljs.test.set_print_fn_BANG_(function(x) {\n    // since console.log *itself* adds a newline \n    var x = x.replace(/\\n$/, \"\");\n    if (x.length > 0) console.log(x);\n});\n\nvar success = (function() {\n    var results = cemerick.cljs.test.run_all_tests();\n    return cemerick.cljs.test.successful_QMARK_(results);\n})();\n\nprocess.exit(success ? 0 : 1);\n","^H",1743189770093,"^I",["^J",[]],"^K",["^ ","^L","^M","^N","^O","^P","0.2.3-SNAPSHOT","^Q","clojurescript.test","^R","Port of clojure.test targeting ClojureScript.","^S","http://github.com/cemerick/clojurescript.test","^T","^U","^V",["^U","0.2.3-SNAPSHOT"]],"^W",[],"^X",[],"^Y",["^ ","^1",[["^ ","^2","path","^3",19,"^4",false],["^ ","^2","fs","^3",43,"^4",false]],"^6",false,"^8",[],"^9",[],"^:",[],"^;","es3","^<",null,"^?",false,"^F",["path","fs"],"^W",[],"^X",[],"^Z",[],"^[",false,"^10",true],"^S",["^11","jar:file:C:\\Users\\salva\\.m2\\repository\\com\\cemerick\\clojurescript.test\\0.2.3-SNAPSHOT\\clojurescript.test-0.2.3-SNAPSHOT.jar!/cemerick/cljs/test/node_runner.js"],"^12",["^J",["^15"]],"^Z",[],"^[",false,"^13",true,"^14",["path","fs","process"],"^10",true],["^ ","^1",[],"^5",true,"^6",false,"^7",["b57436ddcf14eb4b76133bcf81d0b8235d687e9c"],"^8",[],"^9",[],"^:",[],"^;","es3","^<",null,"^=","~$module$cemerick$cljs$test$rhino_runner","^?",false,"^@","module$cemerick$cljs$test$rhino_runner.js","^A",["^B","cemerick/cljs/test/rhino_runner.js"],"^C","cemerick/cljs/test/rhino_runner.js","^D","^E","^F",[],"^G","arguments.forEach(function (arg) {\n    if (new java.io.File(arg).exists()) {\n      try {\n        load(arg);\n      } catch (e) {\n        print(\"Error in file: \\\"\" + arg + \"\\\"\");\n        print(e);\n      }\n    } else {\n      try {\n        eval(\"(function () {\" + arg + \"})()\");\n      } catch (e) {\n        print(\"Could not evaluate expression: \\\"\" + arg + \"\\\"\");\n        print(e);\n      }\n    }\n});\n\ncemerick.cljs.test.set_print_fn_BANG_(function(x) {\n    // since console.log *itself* adds a newline\n    var x = x.replace(/\\n$/, \"\");\n    if (x.length > 0) print(x);\n});\n\nvar results = cemerick.cljs.test.run_all_tests();\nvar success = cemerick.cljs.test.successful_QMARK_(results);\n\njava.lang.System.exit(success ? 0 : 1);\n","^H",1743189770093,"^I",["^J",[]],"^K",["^ ","^L","^M","^N","^O","^P","0.2.3-SNAPSHOT","^Q","clojurescript.test","^R","Port of clojure.test targeting ClojureScript.","^S","http://github.com/cemerick/clojurescript.test","^T","^U","^V",["^U","0.2.3-SNAPSHOT"]],"^W",[],"^X",[],"^Y",["^ ","^1",[],"^6",false,"^8",[],"^9",[],"^:",[],"^;","es3","^<",null,"^?",false,"^F",[],"^W",[],"^X",[],"^Z",[],"^[",false,"^10",false],"^S",["^11","jar:file:C:\\Users\\salva\\.m2\\repository\\com\\cemerick\\clojurescript.test\\0.2.3-SNAPSHOT\\clojurescript.test-0.2.3-SNAPSHOT.jar!/cemerick/cljs/test/rhino_runner.js"],"^12",["^J",["^16"]],"^Z",[],"^[",false,"^13",true,"^14",[],"^10",false]],"~:shadow.build.classpath/CACHE-TIMESTAMP",1743162103000]