{"version":3,"sources":["app/db.cljs"],"mappings":";AAOE,AAAKA,oBAAW,gDAAA,hDAACC;AACjB,AAAKC,mBAAU,gDAAA,hDAACD;AAGhB,0BAAA,1BAAME;AAAN,AACE,YAAA,ZAACC;;AACD,IAAAC,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAA,gFAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAC,uCAAAH,WAAAC;IAAAG,aAAA,+BAAAF,/BAG+D4C;IAH/DzC,aAAA,CAAA,MAAAD;IAAAE,aAAA,AAAAH,uCAAAJ,WAAAM;IAAAE,aAAA,0DAAA,qEAAAD,/HACmCuC;IADnChD,kBAAAA;AAAA,AAAA,OAAAW,4CAAAX,gBAAA,IAAAU;;AAAA,GAAA,CAAAT,oBAAA;AAAA,IAAAW,aAAA,CAAAZ,YAAA;IAAAa,aAAA,CAAAb,YAAA;IAAAc,aAAA,AAAAC,4BAAAF;IAAAG,aAAA,AAAAC,4CAAAH,WAAA;IAAAF,iBAAA,AAAAK,4CAAAH,WAAA;IAAAI,aAAA,YAAA,gCAAAN,5CAIKlB;IAJLyB,aAAA,6CAAA,MAAAH,nDAKSkC;IALTlD,kBAAA,iBAAAoB,iBAAApB;AAAA,AAAA,CAAAoB,eAAA,OAAAF;;AAAA,CAAAE,eAAA,OAAAR;;AAAAQ;;AAAA,AAAA,AAAA,GAAAD;AAAA,IAAAE,uBAAArB;AAAA,AAAA,CAAAqB,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAtB;AAAA,AAAA,CAAAsB,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAArB,oBAAA;AAAA,IAAAW,aAAA,CAAAZ,YAAA;IAAAuB,aAAA,wCAAAX,xCAOSuC,sBAAO7D;IAPhBkC,aAAA,AAAAC,gBAQoDnC;IARpDoC,aAAA,YAAA,gCAAAF,5CAQS9B;IARTM,kBAAA,iBAAA2B,iBAAA3B;AAAA,AAAA,CAAA2B,eAAA,OAAAJ;;AAAAI;;AAAA,AAAA,AAAA,IAAAC,uBAAA5B;AAAA,AAAA,CAAA4B,qBAAA,OAAAF;;AAAA,CAAAE,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAA3B,oBAAA;AAAA,IAAA4B,aAAA,cAAA,dASOuB;IATPpD,kBAAAA;AAAA,AAAA,AAAA,IAAA8B,uBAAA9B;AAAA,AAAA,CAAA8B,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAA7B,oBAAA;AAAA,IAAA8B,aAAA,CAAA/B,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAAgC,6CAAAhC,gBAAA+B;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;2EAAAjC;;AAAA,AAAA,IAAAmC,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAArC,sBAAAC;AAAA,AAAA,GAAA,AAAAqC,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAxC;AAAA,AAAA,CAAAwC,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAzC,YAAA;AAAA,IAAA0C,uBAAA1C;AAAA,AAAA,CAAA0C,qBAAA,OAAA,AAAAC,gBAAA,CAAA3C,YAAA;;AAAA0C;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAnC;;;;AAAAmC;;;;;kEAAAnC;;;;;2EAAAA;;;;;;;;;IAAA4C,uBAAA,iBAAAC,iBAAA,AAAA/C;AAAA,AAAA,CAAA+C,eAAAC,AAAA,OAAAnD;;AAAAkD;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAAjD;;AAYH,yBAAA,zBAAM0D,0DAAiBC;AAAvB,AACE,YAAA,ZAAC5D,8DAA4D4D;;AAC7D,IAAA3D,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAwD;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAA,wEAC4EH;IAD5EI,aAAA,CAAA,gFAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAvD,uCAAAqD,WAAAC;IAAAE,aAAA,+BAAAD,/BAG+DZ;IAH/Dc,aAAA,CAAA,MAAAD;IAAAE,aAAA,AAAA1D,uCAAAoD,WAAAK;IAAAE,aAAA,0DAAAR,6DAAAO,vHACmChB;IADnCO,kBAAAA;AAAA,AAAA,OAAA5C,4CAAA4C,gBAAA,IAAAU;;AAAA,GAAA,CAAAT,oBAAA;AAAA,IAAAU,aAAA,CAAAX,YAAA;IAAAY,aAAA,CAAAZ,YAAA;IAAAa,aAAA,AAAArD,4BAAAoD;IAAAE,aAAA,AAAApD,4CAAAmD,WAAA;IAAAF,iBAAA,AAAAjD,4CAAAmD,WAAA;IAAAE,aAAA,YAAA,+CAAAJ,3DAIKxE;IAJL6E,aAAA,6CAAA,MAAAF,nDAKSnB;IALTK,kBAAA,iBAAAiB,iBAAAjB;AAAA,AAAA,CAAAiB,eAAA,OAAAN;;AAAA,CAAAM,eAAA,OAAAF;;AAAAE;;AAAA,AAAA,AAAA,GAAAD;AAAA,IAAAE,uBAAAlB;AAAA,AAAA,CAAAkB,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAnB;AAAA,AAAA,CAAAmB,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAAlB,oBAAA;AAAA,IAAAU,aAAA,CAAAX,YAAA;IAAAoB,aAAA,qBAAAT,rBAQuC6B;IARvCxC,kBAAAA;AAAA,AAAA,AAAA,GAAAoB;AAAA,IAAAC,uBAAArB;AAAA,AAAA,CAAAqB,qBAAA,OAAA;;AAAAA;AAAA,IAAAC,uBAAAtB;AAAA,AAAA,CAAAsB,qBAAA,OAAA;;AAAAA;;AAAA;;AAAA,GAAA,CAAArB,oBAAA;AAAA,IAAAsB,aAAA,cAAA,dAWO1B;IAXPG,kBAAAA;AAAA,AAAA,AAAA,IAAAwB,uBAAAxB;AAAA,AAAA,CAAAwB,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAAvB,oBAAA;AAAA,IAAAwB,aAAA,CAAAzB,YAAA;IAAAA,kBAAAA;AAAA,AAAA,OAAAvB,6CAAAuB,gBAAAyB;;AAAA,GAAA,CAAAxB,oBAAA;AAAA,IAAAU,aAAA,CAAAX,YAAA;IAAA0B,aAAA,AAAA,8FAAAf;IAAAX,kBAAAA;AAAA,AAAA,AAAA,IAAA2B,uBAAA3B;AAAA,AAAA,CAAA2B,qBAAA,OAAAD;;AAAA,CAAAC,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAA1B,oBAAA;AAAA,IAAAU,aAAA,CAAAX,YAAA;IAAAA,kBAAAA;AAAA,AAAA,AAAA,IAAA4B,uBAAA5B;AAAA,AAAA,CAAA4B,qBAAA,OAAAjB;;AAAA,CAAAiB,qBAAA,OAAA;;AAAAA;AAAA;;AAAA,GAAA,CAAA3B,oBAAA;AAAA,IAAA4B,aAAA,CAAA7B,YAAA;IAAA8B,aAAA,uCAAAD,vCASWjC,sBAAO3D;IATlB8F,aAAA,AAAA7D,gBAUqDjC;IAVrD+F,aAAA,YAAA,0BAAAD,tCAUW5F;IAVX6D,kBAAA,iBAAAiC,iBAAAjC;AAAA,AAAA,CAAAiC,eAAA,OAAAH;;AAAAG;;AAAA,AAAA,AAAA,IAAAC,uBAAAlC;AAAA,AAAA,CAAAkC,qBAAA,OAAAF;;AAAA,CAAAE,qBAAA,OAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAC,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAxD;;AAAA,CAAAwD,eAAA,OAAA;;AAAAA;;0EAAAnC;;AAAA,AAAA,IAAApB,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAArC,sBAAAwD;AAAA,AAAA,GAAA,AAAAlB,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAqD;AAAA,AAAA,IAAAC,uBAAArC;AAAA,AAAA,CAAAqC,qBAAA,OAAAtD;;AAAAsD;AAAA,GAAA,AAAAnD,cAAA,CAAAc,YAAA;AAAA,IAAAsC,uBAAAtC;AAAA,AAAA,CAAAsC,qBAAA,OAAA,AAAAlD,gBAAA,CAAAY,YAAA;;AAAAsC;AAAA,MAAAvD;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAoB;;;;AAAApB;;;;;iEAAAoB;;;;;0EAAAA;;;;;;;;;IAAAX,uBAAA,iBAAAkD,iBAAA,AAAAhG;AAAA,AAAA,CAAAgG,eAAAhD,AAAA,OAAAnD;;AAAAmG;;AAAA,AAAA,OAAA/C,2DAAAH;;;AAAAjD","names":["app.db/categorias","reagent.core.atom","app.db/productos","app.db/fetch-categorias","js/console.log","c__12039__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__12040__auto__","switch__11918__auto__","state_13260","state_val_13261","inst_13236","inst_13237","inst_13238","inst_13239","cljs.core/PersistentHashMap","inst_13240","inst_13241","inst_13242","inst_13243","cljs.core.async.impl.ioc-helpers/take!","inst_13248","inst_13245","inst_13246","cljs.core/--destructure-map","inst_13247","cljs.core.get","inst_13249","inst_13250","statearr-13262","statearr-13263","statearr-13264","inst_13252","inst_13253","cljs.core/deref","inst_13254","statearr-13265","statearr-13266","inst_13256","statearr-13267","inst_13258","cljs.core.async.impl.ioc-helpers/return-chan","statearr-13268","state-machine__11919__auto__","ret-value__11920__auto__","result__11921__auto__","cljs.core/keyword-identical?","ex__11922__auto__","e13269","statearr-13270","cljs.core/seq","statearr-13271","cljs.core/first","state__12041__auto__","statearr-13272","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","ajax.core/json-response-format","cljs.core._EQ_","cljs.core/reset!","js/console.error","app.db/fetch-productos","categoria-id","state_13305","state_val_13306","inst_13274","inst_13275","inst_13276","inst_13277","inst_13278","inst_13279","inst_13280","inst_13281","inst_13282","inst_13287","inst_13284","inst_13285","inst_13286","inst_13288","inst_13289","statearr-13307","statearr-13308","statearr-13309","inst_13291","statearr-13310","statearr-13311","inst_13301","statearr-13312","inst_13303","inst_13293","statearr-13313","statearr-13314","inst_13296","inst_13297","inst_13298","inst_13299","statearr-13315","statearr-13316","statearr-13317","e13318","statearr-13319","statearr-13320","statearr-13321","cljs.core/map?"],"sourcesContent":["(ns app.db\r\n    (:require [reagent.core :as r]\r\n              [cljs-http.client :as http]\r\n              [cljs.core.async :refer [<! go]]\r\n              [ajax.core :as ajax]))\r\n\r\n;; Estados globales\r\n  (def categorias (r/atom []))\r\n  (def productos (r/atom []))\r\n\r\n;; Obtener categor\u00edas\r\n  (defn fetch-categorias []\r\n    (js/console.log \"Llamando a fetch-categorias...\")\r\n    (go\r\n      (let [{:keys [status body]} (<! (http/get \"/api/categorias/\"\r\n                                                {:with-credentials? false\r\n                                                 :response-format (ajax/json-response-format {:keywords? true})}))]\r\n        (js/console.log \"Respuesta de categor\u00edas:\" body)\r\n        (if (= 200 status)\r\n          (do\r\n            (reset! categorias body)\r\n            (js/console.log \"Categor\u00edas actualizadas:\" @categorias))\r\n          (js/console.error \"Error al obtener categor\u00edas\")))))\r\n\r\n;; Obtener productos por categor\u00eda\r\n (defn fetch-productos [categoria-id]\r\n   (js/console.log \"Llamando a fetch-productos para categor\u00eda:\" categoria-id)\r\n   (go\r\n     (let [{:keys [status body]} (<! (http/get (str \"/api/productos/categoria/\"categoria-id)\r\n                                               {:with-credentials? false\r\n                                                :response-format (ajax/json-response-format {:keywords? true})}))]\r\n       (js/console.log \"Respuesta de productos de la categor\u00eda:\" body)\r\n       (if (= 200 status)\r\n         (do\r\n          ;; Extraer los productos si la respuesta tiene estructura inesperada\r\n           (let [productos-obtenidos (if (map? body) (:productos body) body)]\r\n             (reset! productos productos-obtenidos)\r\n             (js/console.log \"Productos actualizados:\" @productos)))\r\n         (js/console.error \"Error al obtener productos\")))))\r\n"]}