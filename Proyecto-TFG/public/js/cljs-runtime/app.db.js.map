{"version":3,"sources":["app/db.cljs"],"mappings":"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","names":["app.db/categorias","reagent.core.atom","app.db/productos","js/app","js/app.db","js/app.db.imagenes","app.db/imagenes","app.db/fetch-categorias","js/console.log","c__12039__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__12040__auto__","switch__11969__auto__","state_18237","state_val_18238","inst_18214","inst_18215","inst_18216","inst_18217","cljs.core/PersistentHashMap","inst_18218","inst_18219","inst_18220","inst_18221","cljs.core.async.impl.ioc-helpers/take!","inst_18223","inst_18224","cljs.core/--destructure-map","inst_18225","cljs.core.get","inst_18226","inst_18227","statearr-18239","statearr-18240","statearr-18241","inst_18229","inst_18230","cljs.core/deref","inst_18231","statearr-18242","statearr-18243","inst_18233","statearr-18244","inst_18235","cljs.core.async.impl.ioc-helpers/return-chan","statearr-18245","state-machine__11970__auto__","ret-value__11971__auto__","result__11972__auto__","cljs.core/keyword-identical?","ex__11973__auto__","e18246","statearr-18247","cljs.core/seq","statearr-18248","cljs.core/first","state__12041__auto__","statearr-18249","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","ajax.core/json-response-format","cljs.core._EQ_","cljs.core/reset!","js/console.error","app.db/fetch-productos","categoria-id","state_18281","state_val_18282","inst_18251","inst_18252","inst_18253","inst_18254","inst_18255","inst_18256","inst_18257","inst_18258","inst_18259","inst_18261","inst_18262","inst_18263","inst_18264","inst_18265","statearr-18283","statearr-18284","statearr-18285","inst_18267","statearr-18286","statearr-18287","inst_18277","statearr-18288","inst_18279","inst_18269","statearr-18289","statearr-18290","inst_18272","inst_18273","inst_18274","inst_18275","statearr-18291","statearr-18292","statearr-18293","e18294","statearr-18295","statearr-18296","statearr-18297","cljs.core/map?","app.db/cargar-imagenes","js/fetch","p1__18298#","data","cljs.core/clj->js","cljs.core/empty?","cljs.core.js__GT_clj","error"],"sourcesContent":["(ns app.db\r\n    (:require [reagent.core :as r]\r\n              [cljs-http.client :as http]\r\n              [cljs.core.async :refer [<! go]]\r\n              [ajax.core :as ajax]))\r\n\r\n;; Estados globales\r\n  (def categorias (r/atom []))\r\n  (def productos (r/atom []))\r\n  (defonce imagenes (r/atom []))\r\n\r\n;; Obtener categor\u00edas\r\n;; Todos los js/console.log los utilizo como mensajes de depuracion para ver en el navegador, y ver si algo falla\r\n  (defn fetch-categorias []\r\n    (js/console.log \"Llamando a fetch-categorias...\")\r\n    (go\r\n      (let [{:keys [status body]} (<! (http/get \"/api/categorias/\"\r\n                                                {:with-credentials? false\r\n                                                 :response-format (ajax/json-response-format {:keywords? true})}))]\r\n        (if (= 200 status)\r\n          (do\r\n            (reset! categorias body)\r\n            (js/console.log \"Categor\u00edas actualizadas:\" @categorias))\r\n          (js/console.error \"Error al obtener categor\u00edas\")))))\r\n\r\n;; Obtener productos por categor\u00eda\r\n (defn fetch-productos [categoria-id]\r\n   (js/console.log \"Llamando a fetch-productos para categor\u00eda:\" categoria-id)\r\n   (go\r\n     (let [{:keys [status body]} (<! (http/get (str \"/api/productos/categoria/\"categoria-id)\r\n                                               {:with-credentials? false\r\n                                                :response-format (ajax/json-response-format {:keywords? true})}))]\r\n       (if (= 200 status)\r\n         (do\r\n          ;; Extraer los productos si la respuesta tiene estructura inesperada\r\n           (let [productos-obtenidos (if (map? body) (:productos body) body)]\r\n             (reset! productos productos-obtenidos)\r\n             (js/console.log \"Productos actualizados:\" @productos)))\r\n         (js/console.error \"Error al obtener productos\")))))\r\n\r\n(defn cargar-imagenes []\r\n  (js/console.log \"Llamando a cargar-imagenes...\") \r\n  (-> (js/fetch \"/api/imagenes\")\r\n      (.then #(.json %))\r\n      (.then (fn [data]\r\n               (js/console.log \"Datos recibidos desde el backend:\" (clj->js data)) \r\n               (if (empty? data)\r\n                 (js/console.log \"No se encontraron im\u00e1genes.\")\r\n                 ;; Aqu\u00ed actualizamos el `atom` `imagenes` con los datos\r\n                 (reset! imagenes (js->clj data :keywordize-keys true)))))  \r\n      (.catch (fn [error]\r\n                (js/console.error \"Error cargando im\u00e1genes:\" error)))))\r\n"]}