shadow$provide.module$node_modules$crypto_js$mode_ofb = function(global, require, module, exports) {
  (function(root, factory, undef) {
    "object" === typeof exports ? module.exports = exports = factory(require("module$node_modules$crypto_js$core"), require("module$node_modules$crypto_js$cipher_core")) : "function" === typeof define && define.amd ? define(["./core", "./cipher-core"], factory) : factory(root.CryptoJS);
  })(this, function(CryptoJS) {
    CryptoJS.mode.OFB = function() {
      var OFB = CryptoJS.lib.BlockCipherMode.extend(), Encryptor = OFB.Encryptor = OFB.extend({processBlock:function(words, offset) {
        var cipher = this._cipher, blockSize = cipher.blockSize, iv = this._iv, keystream = this._keystream;
        iv && (keystream = this._keystream = iv.slice(0), this._iv = void 0);
        cipher.encryptBlock(keystream, 0);
        for (cipher = 0; cipher < blockSize; cipher++) {
          words[offset + cipher] ^= keystream[cipher];
        }
      }});
      OFB.Decryptor = Encryptor;
      return OFB;
    }();
    return CryptoJS.mode.OFB;
  });
};

//# sourceMappingURL=module$node_modules$crypto_js$mode_ofb.js.map
