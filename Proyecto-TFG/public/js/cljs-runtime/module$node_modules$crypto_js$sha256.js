shadow$provide.module$node_modules$crypto_js$sha256 = function(global, require, module, exports) {
  (function(root, factory) {
    "object" === typeof exports ? module.exports = exports = factory(require("module$node_modules$crypto_js$core")) : "function" === typeof define && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(this, function(CryptoJS) {
    (function(Math) {
      var C_lib = CryptoJS.lib, WordArray = C_lib.WordArray, Hasher = C_lib.Hasher;
      C_lib = CryptoJS.algo;
      var H = [], K = [];
      (function() {
        function isPrime(n) {
          for (var sqrtN = Math.sqrt(n), factor = 2; factor <= sqrtN; factor++) {
            if (!(n % factor)) {
              return !1;
            }
          }
          return !0;
        }
        function getFractionalBits(n) {
          return 4294967296 * (n - (n | 0)) | 0;
        }
        for (var n = 2, nPrime = 0; 64 > nPrime;) {
          isPrime(n) && (8 > nPrime && (H[nPrime] = getFractionalBits(Math.pow(n, .5))), K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3)), nPrime++), n++;
        }
      })();
      var W = [];
      C_lib = C_lib.SHA256 = Hasher.extend({_doReset:function() {
        this._hash = new WordArray.init(H.slice(0));
      }, _doProcessBlock:function(M, offset) {
        for (var H = this._hash.words, a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], f = H[5], g = H[6], h = H[7], i = 0; 64 > i; i++) {
          if (16 > i) {
            W[i] = M[offset + i] | 0;
          } else {
            var gamma0x = W[i - 15], gamma1x = W[i - 2];
            W[i] = ((gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3) + W[i - 7] + ((gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10) + W[i - 16];
          }
          gamma0x = h + ((e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25)) + (e & f ^ ~e & g) + K[i] + W[i];
          gamma1x = ((a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22)) + (a & b ^ a & c ^ b & c);
          h = g;
          g = f;
          f = e;
          e = d + gamma0x | 0;
          d = c;
          c = b;
          b = a;
          a = gamma0x + gamma1x | 0;
        }
        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
        H[4] = H[4] + e | 0;
        H[5] = H[5] + f | 0;
        H[6] = H[6] + g | 0;
        H[7] = H[7] + h | 0;
      }, _doFinalize:function() {
        var data = this._data, dataWords = data.words, nBitsTotal = 8 * this._nDataBytes, nBitsLeft = 8 * data.sigBytes;
        dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
        data.sigBytes = 4 * dataWords.length;
        this._process();
        return this._hash;
      }, clone:function() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }});
      CryptoJS.SHA256 = Hasher._createHelper(C_lib);
      CryptoJS.HmacSHA256 = Hasher._createHmacHelper(C_lib);
    })(Math);
    return CryptoJS.SHA256;
  });
};

//# sourceMappingURL=module$node_modules$crypto_js$sha256.js.map
