{"version":3,"sources":["productos/views.cljs"],"mappings":";AAKA,AAAKA,4BAAU,gDAAA,hDAACC;AAEhB,kCAAA,lCAAMC;AAAN,AACE,iEAAA,oEAAA,2CAAA,gFAAA,MAAA,/PAACC,0UAE2B,+BAAA,2CAAA,8DAAA,xIAACC,8JACnB,WAAKC;AAAL,AACE,YAAA,ZAACC,4CAA+CD;;AAChD,GAAI,6CAAA,7CAACE,mDAAM,AAAA,wFAASF;AAClB,IAAMG,sBAAoB,AAAA,oFAAOH;AAAjC,AACE,GAAI,AAACI,cAAID;AACP,AACE,YAAA,ZAACF,mCAAsCE;;AACvC,OAACE,sBAAOV,0BAAUQ;;AACpB,oBAAA,bAACG;;;AACL,qBAAA,dAACC,2CAA8C,AAAA,wFAASP;;;;AAExE,uBAAA,vBAAMQ;AAAN,AACE,+DAAA,2CAAA,nGAACC,uLAEC;AAAA,AACE,OAACZ;GAHL,yEAKE;AAAA,AACE,YAAA,iCAAA,AAAAa,7CAACT,6DAAiDN;;AADpD,0FAAA,mDAAA,mFAAA,kDAAA,oBAIG,sEAAA,mFAAA,8CAAA,gCAAA,mFAAA,xTAAI,uBAAA,AAAAe,vBAACC,uCAAQhB,mUAGV,iBAAAiB,qBAAA,6CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAX,cAAAS;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAk7EyC,AAAAkB,sBAAAtB;IAl7EzCK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,eAAA,AAAAK,eAAAN,gBAAAK,1CAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFAAA,gDAAA,mFAAA,0JAAA,mFAAA,gKAAA,mFAAA,/aAEQ,AAAA,uFAASY,mJACV,AAAA,gGAAaA,0JACV,CAAA,qDAAS,AAAA,wFAASA;;AAJ5B,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mCAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,eAAA,AAAAS,gBAAAhB,3BAAMmB;AAAN,AAAA,OAAAF,eAAA,mFAAA,gDAAA,mFAAA,0JAAA,mFAAA,gKAAA,mFAAA,wOAAA,AAAAH,mCAAA,AAAAI,eAAAlB,zsBAEQ,AAAA,uFAASmB,mJACV,AAAA,gGAAaA,0JACV,CAAA,qDAAS,AAAA,wFAASA;;;AAJ5B;;;;GAAA,KAAA;;AAAA,AAAA,OAAApB,mBAAA,AAAAF,gBAAgBf;;;;AAM1B,kCAAA,lCAAMsC,4EAAiBD;AAAvB,AAAA,0FAAA,gDAAA,mFAAA,iDAEQ,iBAAAE,mBAAI,AAAA,uFAASF;AAAb,AAAA,oBAAAE;AAAAA;;AAAA;;aAFR,mFAAA,8CAGO,iBAAAA,mBAAI,AAAA,gGAAaF;AAAjB,AAAA,oBAAAE;AAAAA;;AAAA;;aAHP,mFAAA,qDAIU,CAAA,qDAAS,iBAAAA,mBAAI,AAAA,wFAASF;AAAb,AAAA,oBAAAE;AAAAA;;AAAA","names":["productos.views/productos","reagent.core.atom","productos.views/fetch-productos","cljs_http.client.get","ajax.core/json-response-format","response","js/console.log","cljs.core._EQ_","productos-obtenidos","cljs.core/seq","cljs.core/reset!","js/console.warn","js/console.error","productos.views/page","reagent.core.create_class","cljs.core/deref","cljs.core/empty?","iter__5480__auto__","s__13328","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__13330","cljs.core/chunk-buffer","i__13329","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13327","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","producto","productos.views/render-producto","or__5002__auto__","cljs.core/chunk-first"],"sourcesContent":["(ns productos.views\r\n  (:require [reagent.core :as r]\r\n            [cljs-http.client :as http]\r\n            [ajax.core :as ajax]))\r\n\r\n(def productos (r/atom []))  ;; Estado para los productos\r\n\r\n(defn fetch-productos []\r\n  (http/get \"/api/productos/\"\r\n            {:with-credentials? false\r\n             :response-format (ajax/json-response-format {:keywords? true})}\r\n            (fn [response]\r\n              (js/console.log \"Respuesta completa de la API:\" response)\r\n              (if (= 200 (:status response))\r\n                (let [productos-obtenidos (:body response)]\r\n                  (if (seq productos-obtenidos)  ;; Verifica que no est\u00e9 vac\u00edo\r\n                    (do\r\n                      (js/console.log \"Productos obtenidos:\" productos-obtenidos)\r\n                      (reset! productos productos-obtenidos))\r\n                    (js/console.warn \"No se encontraron productos en la respuesta\")))\r\n                (js/console.error \"Error al obtener productos\" (:status response))))))\r\n\r\n(defn page []\r\n  (r/create-class\r\n   {:component-did-mount\r\n    (fn []\r\n      (fetch-productos))\r\n    :reagent-render\r\n    (fn []\r\n      (js/console.log \"Estado de productos en render:\" @productos)\r\n      [:div\r\n       [:h1 \"Productos\"]\r\n       (if (empty? @productos)\r\n         [:p \"Cargando productos...\"]\r\n         [:ul\r\n          (for [producto @productos]\r\n            [:li\r\n             [:h3 (:nombre producto)]\r\n             [:p (:tipo_plato producto)]\r\n             [:span (str \"\u20ac\" (:precio producto))]])])])}))\r\n\r\n(defn render-producto [producto]\r\n  [:li\r\n   [:h3 (or (:nombre producto) \"Nombre no disponible\")]\r\n   [:p (or (:tipo_plato producto) \"Tipo de plato no disponible\")]\r\n   [:span (str \"\u20ac\" (or (:precio producto) \"N/A\"))]])\r\n\r\n"]}