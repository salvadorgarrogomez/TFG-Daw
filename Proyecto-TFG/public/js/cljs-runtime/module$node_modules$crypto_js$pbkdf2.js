shadow$provide.module$node_modules$crypto_js$pbkdf2 = function(global, require, module, exports) {
  (function(root, factory, undef) {
    "object" === typeof exports ? module.exports = exports = factory(require("module$node_modules$crypto_js$core"), require("module$node_modules$crypto_js$sha256"), require("module$node_modules$crypto_js$hmac")) : "function" === typeof define && define.amd ? define(["./core", "./sha256", "./hmac"], factory) : factory(root.CryptoJS);
  })(this, function(CryptoJS) {
    (function() {
      var C_lib = CryptoJS.lib, Base = C_lib.Base, WordArray = C_lib.WordArray;
      C_lib = CryptoJS.algo;
      var HMAC = C_lib.HMAC, PBKDF2 = C_lib.PBKDF2 = Base.extend({cfg:Base.extend({keySize:4, hasher:C_lib.SHA256, iterations:250000}), init:function(cfg) {
        this.cfg = this.cfg.extend(cfg);
      }, compute:function(password, salt) {
        var cfg = this.cfg;
        password = HMAC.create(cfg.hasher, password);
        var derivedKey = WordArray.create(), blockIndex = WordArray.create([1]), derivedKeyWords = derivedKey.words, blockIndexWords = blockIndex.words, keySize = cfg.keySize;
        for (cfg = cfg.iterations; derivedKeyWords.length < keySize;) {
          var block = password.update(salt).finalize(blockIndex);
          password.reset();
          for (var blockWords = block.words, blockWordsLength = blockWords.length, intermediate = block, i = 1; i < cfg; i++) {
            intermediate = password.finalize(intermediate);
            password.reset();
            for (var intermediateWords = intermediate.words, j = 0; j < blockWordsLength; j++) {
              blockWords[j] ^= intermediateWords[j];
            }
          }
          derivedKey.concat(block);
          blockIndexWords[0]++;
        }
        derivedKey.sigBytes = 4 * keySize;
        return derivedKey;
      }});
      CryptoJS.PBKDF2 = function(password, salt, cfg) {
        return PBKDF2.create(cfg).compute(password, salt);
      };
    })();
    return CryptoJS.PBKDF2;
  });
};

//# sourceMappingURL=module$node_modules$crypto_js$pbkdf2.js.map
