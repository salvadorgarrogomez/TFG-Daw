{
"version":3,
"file":"module$node_modules$scheduler$cjs$scheduler_tracing_development.js",
"lineCount":200,
"mappings":"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",
"sources":["node_modules/scheduler/cjs/scheduler-tracing.development.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$scheduler$cjs$scheduler_tracing_development\"] = function(global,require,module,exports) {\n/** @license React v0.20.2\n * scheduler-tracing.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.\n\nvar interactionIDCounter = 0;\nvar threadIDCounter = 0; // Set of currently traced interactions.\n// Interactions \"stack\"\u2013\n// Meaning that newly traced interactions are appended to the previously active set.\n// When an interaction goes out of scope, the previous set (if any) is restored.\n\nexports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.\n\nexports.__subscriberRef = null;\n\n{\n  exports.__interactionsRef = {\n    current: new Set()\n  };\n  exports.__subscriberRef = {\n    current: null\n  };\n}\nfunction unstable_clear(callback) {\n\n  var prevInteractions = exports.__interactionsRef.current;\n  exports.__interactionsRef.current = new Set();\n\n  try {\n    return callback();\n  } finally {\n    exports.__interactionsRef.current = prevInteractions;\n  }\n}\nfunction unstable_getCurrent() {\n  {\n    return exports.__interactionsRef.current;\n  }\n}\nfunction unstable_getThreadID() {\n  return ++threadIDCounter;\n}\nfunction unstable_trace(name, timestamp, callback) {\n  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;\n\n  var interaction = {\n    __count: 1,\n    id: interactionIDCounter++,\n    name: name,\n    timestamp: timestamp\n  };\n  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.\n  // To do that, clone the current interactions.\n  // The previous set will be restored upon completion.\n\n  var interactions = new Set(prevInteractions);\n  interactions.add(interaction);\n  exports.__interactionsRef.current = interactions;\n  var subscriber = exports.__subscriberRef.current;\n  var returnValue;\n\n  try {\n    if (subscriber !== null) {\n      subscriber.onInteractionTraced(interaction);\n    }\n  } finally {\n    try {\n      if (subscriber !== null) {\n        subscriber.onWorkStarted(interactions, threadID);\n      }\n    } finally {\n      try {\n        returnValue = callback();\n      } finally {\n        exports.__interactionsRef.current = prevInteractions;\n\n        try {\n          if (subscriber !== null) {\n            subscriber.onWorkStopped(interactions, threadID);\n          }\n        } finally {\n          interaction.__count--; // If no async work was scheduled for this interaction,\n          // Notify subscribers that it's completed.\n\n          if (subscriber !== null && interaction.__count === 0) {\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\n          }\n        }\n      }\n    }\n  }\n\n  return returnValue;\n}\nfunction unstable_wrap(callback) {\n  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;\n\n  var wrappedInteractions = exports.__interactionsRef.current;\n  var subscriber = exports.__subscriberRef.current;\n\n  if (subscriber !== null) {\n    subscriber.onWorkScheduled(wrappedInteractions, threadID);\n  } // Update the pending async work count for the current interactions.\n  // Update after calling subscribers in case of error.\n\n\n  wrappedInteractions.forEach(function (interaction) {\n    interaction.__count++;\n  });\n  var hasRun = false;\n\n  function wrapped() {\n    var prevInteractions = exports.__interactionsRef.current;\n    exports.__interactionsRef.current = wrappedInteractions;\n    subscriber = exports.__subscriberRef.current;\n\n    try {\n      var returnValue;\n\n      try {\n        if (subscriber !== null) {\n          subscriber.onWorkStarted(wrappedInteractions, threadID);\n        }\n      } finally {\n        try {\n          returnValue = callback.apply(undefined, arguments);\n        } finally {\n          exports.__interactionsRef.current = prevInteractions;\n\n          if (subscriber !== null) {\n            subscriber.onWorkStopped(wrappedInteractions, threadID);\n          }\n        }\n      }\n\n      return returnValue;\n    } finally {\n      if (!hasRun) {\n        // We only expect a wrapped function to be executed once,\n        // But in the event that it's executed more than once\u2013\n        // Only decrement the outstanding interaction counts once.\n        hasRun = true; // Update pending async counts for all wrapped interactions.\n        // If this was the last scheduled async work for any of them,\n        // Mark them as completed.\n\n        wrappedInteractions.forEach(function (interaction) {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\n          }\n        });\n      }\n    }\n  }\n\n  wrapped.cancel = function cancel() {\n    subscriber = exports.__subscriberRef.current;\n\n    try {\n      if (subscriber !== null) {\n        subscriber.onWorkCanceled(wrappedInteractions, threadID);\n      }\n    } finally {\n      // Update pending async counts for all wrapped interactions.\n      // If this was the last scheduled async work for any of them,\n      // Mark them as completed.\n      wrappedInteractions.forEach(function (interaction) {\n        interaction.__count--;\n\n        if (subscriber && interaction.__count === 0) {\n          subscriber.onInteractionScheduledWorkCompleted(interaction);\n        }\n      });\n    }\n  };\n\n  return wrapped;\n}\n\nvar subscribers = null;\n\n{\n  subscribers = new Set();\n}\n\nfunction unstable_subscribe(subscriber) {\n  {\n    subscribers.add(subscriber);\n\n    if (subscribers.size === 1) {\n      exports.__subscriberRef.current = {\n        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,\n        onInteractionTraced: onInteractionTraced,\n        onWorkCanceled: onWorkCanceled,\n        onWorkScheduled: onWorkScheduled,\n        onWorkStarted: onWorkStarted,\n        onWorkStopped: onWorkStopped\n      };\n    }\n  }\n}\nfunction unstable_unsubscribe(subscriber) {\n  {\n    subscribers.delete(subscriber);\n\n    if (subscribers.size === 0) {\n      exports.__subscriberRef.current = null;\n    }\n  }\n}\n\nfunction onInteractionTraced(interaction) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onInteractionTraced(interaction);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onInteractionScheduledWorkCompleted(interaction) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onInteractionScheduledWorkCompleted(interaction);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkScheduled(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkScheduled(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkStarted(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkStarted(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkStopped(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkStopped(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nfunction onWorkCanceled(interactions, threadID) {\n  var didCatchError = false;\n  var caughtError = null;\n  subscribers.forEach(function (subscriber) {\n    try {\n      subscriber.onWorkCanceled(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\nexports.unstable_clear = unstable_clear;\nexports.unstable_getCurrent = unstable_getCurrent;\nexports.unstable_getThreadID = unstable_getThreadID;\nexports.unstable_subscribe = unstable_subscribe;\nexports.unstable_trace = unstable_trace;\nexports.unstable_unsubscribe = unstable_unsubscribe;\nexports.unstable_wrap = unstable_wrap;\n  })();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","onInteractionTraced","interaction","didCatchError","caughtError","subscribers","forEach","subscriber","error","onInteractionScheduledWorkCompleted","onWorkScheduled","interactions","threadID","onWorkStarted","onWorkStopped","onWorkCanceled","interactionIDCounter","threadIDCounter","__interactionsRef","__subscriberRef","current","Set","unstable_clear","callback","prevInteractions","unstable_getCurrent","unstable_getThreadID","unstable_subscribe","add","size","unstable_trace","name","timestamp","arguments","length","undefined","DEFAULT_THREAD_ID","__count","id","returnValue","unstable_unsubscribe","delete","unstable_wrap","wrapped","wrappedInteractions","apply","hasRun","cancel","wrapped.cancel"]
}
