{
"version":3,
"file":"module$node_modules$crypto_js$aes.js",
"lineCount":74,
"mappings":"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",
"sources":["node_modules/crypto-js/aes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$aes\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            var t;\n\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","BlockCipher","lib","C_algo","algo","SBOX","INV_SBOX","SUB_MIX_0","SUB_MIX_1","SUB_MIX_2","SUB_MIX_3","INV_SUB_MIX_0","INV_SUB_MIX_1","INV_SUB_MIX_2","INV_SUB_MIX_3","d","i","x","xi","sx","x2","x4","x8","t","RCON","AES","extend","_doReset","_nRounds","_keyPriorReset","_key","key","keyWords","words","keySize","sigBytes","ksRows","keySchedule","_keySchedule","ksRow","invKeySchedule","_invKeySchedule","invKsRow","encryptBlock","M","offset","_doCryptBlock","decryptBlock","nRounds","s0","s1","s2","s3","round","t0","t1","t2","t3","_createHelper"]
}
