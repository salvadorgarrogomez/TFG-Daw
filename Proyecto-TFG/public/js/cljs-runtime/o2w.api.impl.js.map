{"version":3,"sources":["o2w/api/impl.cljs"],"mappings":"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","names":["p__12615","vec__12618","seq__12619","cljs.core/seq","first__12620","cljs.core/first","cljs.core/next","o2w.api.impl/dissoc-in","m","k","ks","keys","temp__5802__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","o2w.api.impl/TOKEN","o2w.api.impl/get-token","o2w.api.cookie/get","o2w.api.impl/set-token","val","o2w.api.cookie/set!","o2w.api.impl/clear-token","o2w.api.cookie/remove!","o2w.api.impl/default-ok","res","cljs.core.println","p__12631","map__12632","cljs.core/--destructure-map","o2w.api.impl/default-error","status","cljs.core._EQ_","js/console","o2w.api.impl/default-headers","token","csrf","G__12638","cljs.core/deref","o2w.i18n.db/language","js/o2w","js/o2w.api","js/o2w.api.impl","js/o2w.api.impl.config","o2w.api.impl/config","reagent.core.atom","ajax.core/json-request-format","ajax.core/json-response-format","cljs.core/identity","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","o2w.api.impl/req","p__12642","vec__12643","map__12646","cljs.core.nth","seq12640","G__12641","self__5711__auto__","endpoint","ok","error","params","base-url","request","headers","interceptor","args","out","cljs.core.async.chan","cljs.core/fn?","extra-params","ajax-params","cljs.core.merge","p__12647","vec__12648","ok?","c__12039__auto__","cljs.core.async.impl.dispatch/run","f__12040__auto__","switch__11918__auto__","state_12658","state_val_12659","inst_12651","cljs.core/PersistentVector","inst_12652","inst_12653","cljs.core.async.impl.ioc-helpers/put!","inst_12655","inst_12656","statearr-12660","cljs.core.async.impl.ioc-helpers/return-chan","statearr-12661","state-machine__11919__auto__","ret-value__11920__auto__","result__11921__auto__","cljs.core/keyword-identical?","ex__11922__auto__","e12662","statearr-12663","statearr-12664","state__12041__auto__","statearr-12665","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/close!","ajax-request","ajax.core/ajax-request","ajax.core/abort","cljs.core/reset!"],"sourcesContent":["(ns o2w.api.impl\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]])\n  (:require [ajax.core :as ajax]\n            [o2w.api.cookie :as cookie]\n            [reagent.core :as r]\n            [cljs.core.async :refer [chan >! close! <!]]\n            [o2w.i18n.db :refer [language]]))\n\n(defn dissoc-in\n  [m [k & ks :as keys]]\n  (if ks\n    (if-let [nextmap (get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(def TOKEN \"auth_token\")\n\n;; Token\n(defn get-token [] (cookie/get TOKEN))\n(defn set-token [val] (cookie/set! TOKEN val))\n(defn clear-token [] (cookie/set! TOKEN \"\") (cookie/remove! TOKEN))\n\n(defn default-ok [res] (println res))\n\n(defn default-error [{:keys [status] :as res}]\n  (if (= status 401)\n    (clear-token))\n  (.log js/console res))\n\n(defn default-headers []\n  (let [token (get-token)\n        csrf  (cookie/get \"csrftoken\")]\n    (cond-> {}\n      csrf      (assoc \"X-CSRFToken\" csrf)\n      token     (assoc \"Authorization\" (str \"Token \" token))\n      @language (assoc \"Accept-Language\" @language))))\n\n(defonce config (r/atom {:base-url        \"/api/v1/\"\n                         :subscriptions   {}\n                         :format          (ajax.core/json-request-format)\n                         :response-format (ajax.core/json-response-format {:keywords? true})\n                         :interceptor     identity\n                         :error           default-error\n                         :headers         default-headers}))\n\n(defn req [endpoint & [{:keys [ok error params base-url request headers interceptor]\n                        :or   {ok          (:ok @config)\n                               error       (:error @config)\n                               base-url    (:base-url @config)\n                               headers     (:headers @config)\n                               interceptor (:interceptor @config)}\n                        :as   args}]]\n\n  (let [out          (chan 1)\n        headers      (if (fn? headers) (headers args) headers)\n        extra-params (dissoc @config :ok :error :subscriptions :base-url :headers)\n        ajax-params  (merge {:uri     (str base-url endpoint)\n                             :method  :get\n                             :headers headers\n                             :handler (fn [[ok? res]]\n                                        (go\n                                          (>! out [ok? res])\n                                          (close! out))\n\n                                        (if ok?\n                                          (when ok (ok res))\n                                          (error res)))}\n                            extra-params\n                            args\n                            {:params (interceptor params)})\n\n        ajax-request (ajax.core/ajax-request ajax-params)]\n\n    (when request\n      (when @request (ajax/abort @request))\n      (reset! request ajax-request))\n\n    out))\n"],"x_google_ignoreList":[0]}