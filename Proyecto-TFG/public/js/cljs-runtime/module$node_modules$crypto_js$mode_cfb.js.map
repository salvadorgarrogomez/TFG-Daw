{
"version":3,
"file":"module$node_modules$crypto_js$mode_cfb.js",
"lineCount":30,
"mappings":"AAAAA,cAAA,CAAA,sCAAA,GAA2D,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AACjG,WAAS,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,CAAuB;AACV,YAAvB,KAAI,MAAOH,QAAX,GAECD,MAAOC,CAAAA,OAFR,GAEkBA,OAFlB,GAE4BE,OAAA,CAAQJ,OAAA,CAAQ,oCAAR,CAAR,EAA2BA,OAAA,CAAQ,2CAAR,CAA3B,CAF5B,GAI2B,UAAtB,KAAI,MAAOM,OAAX,IAAoCA,MAAOC,CAAAA,GAA3C,GAEJD,MAAA,CAAO,CAAC,QAAD,EAAW,eAAX,CAAP,EAAoCF,OAApC,CAFI,GAMJA,OAAA,CAAQD,IAAKK,CAAAA,QAAb,CAVD;AADiC,GAAhC,CAAA,CAaA,IAbA,EAaM,QAAS,CAACA,QAAD,CAAW;AAK3BA,YAASC,CAAAA,IAAKC,CAAAA,GAAd,GAAqB,QAAS,EAAG;AAgC7BC,cAASA,4BAA2B,CAACC,KAAD,EAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,MAA3B,CAAmC;AACnE,YAAIC,SAAJ;AAMA,SAHIC,SAGJ,GAHS,IAAKC,CAAAA,GAGd,KACIF,SAGA,GAHYC,SAAGE,CAAAA,KAAH,CAAS,CAAT,CAGZ,EAAA,IAAKD,CAAAA,GAAL,GAAWE,IAAAA,EAJf,IAMIJ,SANJ,GAMgB,IAAKK,CAAAA,UANrB;AAQAN,cAAOO,CAAAA,YAAP,CAAoBN,SAApB,EAA+B,CAA/B,CAAA;AAGA,aAASO,MAAT,GAAa,CAAb,EAAgBA,MAAhB,GAAoBT,SAApB,EAA+BS,MAAA,EAA/B;AACIX,eAAA,CAAMC,MAAN,GAAeU,MAAf,CAAA,IAAqBP,SAAA,CAAUO,MAAV,CAArB;AADJ;AAlBmE;AA/BvE,UAAIb,MAAMF,QAASgB,CAAAA,GAAIC,CAAAA,eAAgBC,CAAAA,MAA7B,EAAV;AAEAhB,SAAIiB,CAAAA,SAAJ,GAAgBjB,GAAIgB,CAAAA,MAAJ,CAAW,CACvBE,aAAcA,QAAS,CAAChB,KAAD,EAAQC,MAAR,CAAgB;AAEnC,YAAIE,SAAS,IAAKc,CAAAA,OAAlB,EACIf,YAAYC,MAAOD,CAAAA,SADvB;AAGAH,mCAA4BmB,CAAAA,IAA5B,CAAiC,IAAjC,EAAuClB,KAAvC,EAA8CC,MAA9C,EAAsDC,SAAtD,EAAiEC,MAAjE,CAAA;AAGA,YAAKM,CAAAA,UAAL,GAAkBT,KAAMO,CAAAA,KAAN,CAAYN,MAAZ,EAAoBA,MAApB,GAA6BC,SAA7B,CAAlB;AARmC,OADhB,CAAX,CAAhB;AAaAJ,SAAIqB,CAAAA,SAAJ,GAAgBrB,GAAIgB,CAAAA,MAAJ,CAAW,CACvBE,aAAcA,QAAS,CAAChB,KAAD,EAAQC,MAAR,CAAgB;AAEnC,YAAIE,SAAS,IAAKc,CAAAA,OAAlB,EACIf,YAAYC,MAAOD,CAAAA,SADvB,EAIIkB,YAAYpB,KAAMO,CAAAA,KAAN,CAAYN,MAAZ,EAAoBA,MAApB,GAA6BC,SAA7B,CAJhB;AAMAH,mCAA4BmB,CAAAA,IAA5B,CAAiC,IAAjC,EAAuClB,KAAvC,EAA8CC,MAA9C,EAAsDC,SAAtD,EAAiEC,MAAjE,CAAA;AAGA,YAAKM,CAAAA,UAAL,GAAkBW,SAAlB;AAXmC,OADhB,CAAX,CAAhB;AAuCA,aAAOtB,GAAP;AAvD6B,KAAZ,EAArB;AA2DA,WAAOF,QAASC,CAAAA,IAAKC,CAAAA,GAArB;AAhE2B,GAb1B,CAAD;AADkG,CAAnG;;",
"sources":["node_modules/crypto-js/mode-cfb.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$mode_cfb\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        var keystream;\n\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","mode","CFB","generateKeystreamAndEncrypt","words","offset","blockSize","cipher","keystream","iv","_iv","slice","undefined","_prevBlock","encryptBlock","i","lib","BlockCipherMode","extend","Encryptor","processBlock","_cipher","call","Decryptor","thisBlock"]
}
