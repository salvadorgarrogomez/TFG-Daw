{"version":3,"sources":["app/traductor.cljs"],"mappings":";;;;AAMA,uCAAA,vCAAKA;AAGL,mCAAA,nCAAMC;AAAN,AACE,IAAMC,QAAM,AAACC,kDAAU,0BAAA,1BAAmBC;AAA1C,AACE,OAACC,6CAAK,WAAKC;AAAL,AAAA,kDAAA,oFAAA,lCACO,gBAAA,hBAAeA,wFACb,AAAcA;GAAMJ;;AAEvC,oCAAA,pCAAMK,gFAAgBC,YAAYC,YAAYC;AAA9C,AACE,IAAMC,QAAM,AAACV;AAAb,AACE,IAAAW,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,CAAA,2DAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,CAAA;IAAAC,aAAA,AAAAC,uCAAAH,WAAAC;IAAAG,aAAA,6CAAA,7CAI6CnB,mGAAWM;IAJxDc,aAAA,EAAA,IAAAD,WAAA,qBAAA,ZAKiDhB,qBACAC;IANjDiB,aAAA,eAAAD,fAGoC6B;IAHpC3B,aAAA,CAAAL,WAAAI;IAAAE,aAAA,AAAAL,uCAAAJ,WAAAQ;IAAAE,aAAA,kJAAAD,lJACkByB,2DAAUrD;IAD5BiB,kBAAAA;AAAA,AAAA,OAAAa,4CAAAb,gBAAA,IAAAY;;AAAA,GAAA,CAAAX,oBAAA;AAAA,IAAAa,aAAA,CAAAd,YAAA;IAAAe,aAAA,wBAAAD,PACQqB;AADR,AAO6B,kBAAKG,IAAIC;AAAT,AAAA,kDAAA,yPAAA,vMACO,qDAAA,uFAAA,5IAACC,+CAAO9C,yFAAO6C,yIACF,oDAAA,mFAAA,sDAAA,7LAACC,+CAAOL,wNAA4BI;;;IATrFvB,aAAA,AAUoCyB;IAVpCxB,aAAA,6CAAAF,iBAAAC,9DAOwB5B,wDAGKM;IAV7BwB,aAAA,iFAAAD,kCAAAA,lHAWOxB,yCAAAA,qDAAAA;IAXPO,kBAAAA;AAAA,AAAA,OAAAmB,6CAAAnB,gBAAAkB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;qFAAApB;;AAAA,AAAA,IAAAsB,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAxB,sBAAAC;AAAA,AAAA,GAAA,AAAAwB,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAA3B;AAAA,AAAA,CAAA2B,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAA5B,YAAA;AAAA,IAAA6B,uBAAA7B;AAAA,AAAA,CAAA6B,qBAAA,OAAA,AAAAC,gBAAA,CAAA9B,YAAA;;AAAA6B;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAtB;;;;AAAAsB;;;;;4EAAAtB;;;;;qFAAAA;;;;;;;;;IAAA+B,uBAAA,iBAAAC,iBAAA,AAAAlC;AAAA,AAAA,CAAAkC,eAAAC,AAAA,OAAAtC;;AAAAqC;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAApC;;AAaJ,yCAAA,zCAAM+C,0FAAqBC;AAA3B,AACE,IAAAC,aAAA,AAAAhB,cAAqCe;IAArCE,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,mDAAAE;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAgBW;sBAAhB,AAAAT,4CAAAF,eAAA,7EAAmBY;AAAnB,AAAA,AACE,IAAMvE,WAAG,AAACwE,oBAAgBF;AAA1B,AACE,CAAM,AAAatE,qBAAIuE;;AAF3B;AAAA,eAAAhB;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAI,qBAAA,AAAAvB,cAAAgB;AAAA,AAAA,GAAAO;AAAA,AAAA,IAAAP,iBAAAO;AAAA,AAAA,GAAA,AAAAC,6BAAAR;AAAA,IAAAS,kBAAA,AAAAC,sBAAAV;AAAA,AAAA,eAAA,AAAAW,qBAAAX;eAAAS;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAA3B,gBAAAc;IAAAa,iBAAA,AAAAR,4BAAAQ;SAAA,AAAAP,4CAAAO,eAAA,hEAAgBE;sBAAhB,AAAAT,4CAAAO,eAAA,7EAAmBG;AAAnB,AAAA,AACE,IAAMvE,WAAG,AAACwE,oBAAgBF;AAA1B,AACE,CAAM,AAAatE,qBAAIuE;;AAF3B;AAAA,eAAA,AAAAF,eAAAd;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAIF,mCAAA,nCAAMkB,8EAAevE,YAAYC;AAAjC,AACE,OAACF,kCAAeC,YAAYC,YACZ,WAAKmD;AAAL,AACE,AAACD,uCAAoBC;;AACrB,mBAAA,ZAACoB,sCAAoCvE","names":["app.traductor/libretranslate-api-url","app.traductor/extract-text!","elems","cljs.core.array_seq","js/document","cljs.core.mapv","el","app.traductor/translate-all!","source-lang","target-lang","callback","texts","c__12039__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__12040__auto__","switch__11942__auto__","state_14307","state_val_14308","inst_14288","inst_14289","inst_14290","inst_14291","cljs.core/PersistentHashMap","inst_14294","inst_14295","inst_14296","inst_14297","inst_14298","inst_14299","cljs.core.async.impl.ioc-helpers/take!","inst_14301","inst_14302","inst_14303","inst_14304","inst_14305","cljs.core.async.impl.ioc-helpers/return-chan","statearr-14309","state-machine__11943__auto__","ret-value__11944__auto__","result__11945__auto__","cljs.core/keyword-identical?","ex__11946__auto__","e14310","statearr-14311","cljs.core/seq","statearr-14312","cljs.core/first","state__12041__auto__","statearr-14313","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","resp","cljs_http.client.post","js/JSON.stringify","txt","idx","cljs.core.get_in","cljs.core.range","app.traductor/apply-translations!","translations","seq__14314","chunk__14315","count__14316","i__14317","map__14320","cljs.core/--destructure-map","cljs.core.get","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__14321","cljs.core/next","id","translated-text","goog.dom/getElement","app.traductor/set-language!","js/console.log"],"sourcesContent":["(ns app.traductor\r\n  (:require [cljs-http.client :as http]\r\n            [cljs.core.async :refer [<! go]]\r\n            [goog.object :as gobj]\r\n            [goog.dom :as gdom]))  ;; Importamos gdom para manipular el DOM\r\n\r\n(def libretranslate-api-url \"https://libretranslate.com/translate\")\r\n\r\n;; Extraemos el texto junto con un identificador \u00fanico (id o data-id)\r\n(defn extract-text! []\r\n  (let [elems (array-seq (.querySelectorAll js/document \"[data-translate]\"))]\r\n    (mapv (fn [el]\r\n            {:id (.getAttribute el \"data-translate\")  ;; Suponiendo que los elementos tienen un atributo data-translate como id\r\n             :text (.textContent el)}) elems)))\r\n\r\n(defn translate-all! [source-lang target-lang callback]\r\n  (let [texts (extract-text!)]  ;; Extrae el texto a traducir\r\n    (go\r\n      (let [resp (<! (http/post libretranslate-api-url\r\n                                {:headers {\"Content-Type\" \"application/json\"}\r\n                                 :body (js/JSON.stringify\r\n                                        #js {:q (mapv :text texts)\r\n                                             :source source-lang\r\n                                             :target target-lang})}))] ;; Enviamos una lista de textos a traducir\r\n        (let [translations (mapv (fn [txt idx]\r\n                                   {:id (get-in texts [idx :id])\r\n                                    :translated-text (get-in resp [:body :translatedText idx])})\r\n                                 texts (range))]\r\n          (callback translations)))))) ;; Pasamos todas las traducciones al callback\r\n\r\n(defn apply-translations! [translations]\r\n  (doseq [{:keys [id translated-text]} translations]\r\n    (let [el (gdom/getElement id)]\r\n      (set! (.-innerHTML el) translated-text))))  ;; Reemplazamos el texto de cada elemento\r\n\r\n(defn set-language! [source-lang target-lang]\r\n  (translate-all! source-lang target-lang\r\n                  (fn [translations]\r\n                    (apply-translations! translations)  ;; Aplicamos las traducciones\r\n                    (js/console.log \"P\u00e1gina traducida a\" target-lang))))\r\n"]}