shadow$provide.module$node_modules$crypto_js$rc4 = function(global, require, module, exports) {
  (function(root, factory, undef) {
    "object" === typeof exports ? module.exports = exports = factory(require("module$node_modules$crypto_js$core"), require("module$node_modules$crypto_js$enc_base64"), require("module$node_modules$crypto_js$md5"), require("module$node_modules$crypto_js$evpkdf"), require("module$node_modules$crypto_js$cipher_core")) : "function" === typeof define && define.amd ? define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory) : factory(root.CryptoJS);
  })(this, function(CryptoJS) {
    (function() {
      function generateKeystreamWord() {
        for (var S = this._S, i = this._i, j = this._j, keystreamWord = 0, n = 0; 4 > n; n++) {
          i = (i + 1) % 256;
          j = (j + S[i]) % 256;
          var t = S[i];
          S[i] = S[j];
          S[j] = t;
          keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - 8 * n;
        }
        this._i = i;
        this._j = j;
        return keystreamWord;
      }
      var StreamCipher = CryptoJS.lib.StreamCipher, C_algo = CryptoJS.algo, RC4 = C_algo.RC4 = StreamCipher.extend({_doReset:function() {
        var key = this._key, keyWords = key.words;
        key = key.sigBytes;
        for (var S = this._S = [], i = 0; 256 > i; i++) {
          S[i] = i;
        }
        for (var j = i = 0; 256 > i; i++) {
          var keyByteIndex = i % key;
          j = (j + S[i] + (keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255)) % 256;
          keyByteIndex = S[i];
          S[i] = S[j];
          S[j] = keyByteIndex;
        }
        this._i = this._j = 0;
      }, _doProcessBlock:function(M, offset) {
        M[offset] ^= generateKeystreamWord.call(this);
      }, keySize:8, ivSize:0});
      CryptoJS.RC4 = StreamCipher._createHelper(RC4);
      C_algo = C_algo.RC4Drop = RC4.extend({cfg:RC4.cfg.extend({drop:192}), _doReset:function() {
        RC4._doReset.call(this);
        for (var i = this.cfg.drop; 0 < i; i--) {
          generateKeystreamWord.call(this);
        }
      }});
      CryptoJS.RC4Drop = StreamCipher._createHelper(C_algo);
    })();
    return CryptoJS.RC4;
  });
};

//# sourceMappingURL=module$node_modules$crypto_js$rc4.js.map
