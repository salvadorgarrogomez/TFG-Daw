shadow$provide.module$node_modules$crypto_js$sha1 = function(global, require, module, exports) {
  (function(root, factory) {
    "object" === typeof exports ? module.exports = exports = factory(require("module$node_modules$crypto_js$core")) : "function" === typeof define && define.amd ? define(["./core"], factory) : factory(root.CryptoJS);
  })(this, function(CryptoJS) {
    (function() {
      var C_lib = CryptoJS.lib, WordArray = C_lib.WordArray, Hasher = C_lib.Hasher, W = [];
      C_lib = CryptoJS.algo.SHA1 = Hasher.extend({_doReset:function() {
        this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
      }, _doProcessBlock:function(M, offset) {
        for (var H = this._hash.words, a = H[0], b = H[1], c = H[2], d = H[3], e = H[4], i = 0; 80 > i; i++) {
          if (16 > i) {
            W[i] = M[offset + i] | 0;
          } else {
            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = n << 1 | n >>> 31;
          }
          n = (a << 5 | a >>> 27) + e + W[i];
          n = 20 > i ? n + ((b & c | ~b & d) + 1518500249) : 40 > i ? n + ((b ^ c ^ d) + 1859775393) : 60 > i ? n + ((b & c | b & d | c & d) - 1894007588) : n + ((b ^ c ^ d) - 899497514);
          e = d;
          d = c;
          c = b << 30 | b >>> 2;
          b = a;
          a = n;
        }
        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
        H[4] = H[4] + e | 0;
      }, _doFinalize:function() {
        var data = this._data, dataWords = data.words, nBitsTotal = 8 * this._nDataBytes, nBitsLeft = 8 * data.sigBytes;
        dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
        data.sigBytes = 4 * dataWords.length;
        this._process();
        return this._hash;
      }, clone:function() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();
        return clone;
      }});
      CryptoJS.SHA1 = Hasher._createHelper(C_lib);
      CryptoJS.HmacSHA1 = Hasher._createHmacHelper(C_lib);
    })();
    return CryptoJS.SHA1;
  });
};

//# sourceMappingURL=module$node_modules$crypto_js$sha1.js.map
