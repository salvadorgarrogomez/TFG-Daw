{
"version":3,
"file":"goog.module.moduleloadfailure.js",
"lineCount":35,
"mappings":"AAAA,IAAA,CAAA,UAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AAAA,cAAA;AAWAA,MAAKC,CAAAA,MAAL,CAAY,+BAAZ,CAAA;AACAD,MAAKC,CAAAA,MAAOC,CAAAA,sBAAZ,EAAA;AAEA,OAAMC,kBAAN;AAOEC,eAAW,CAACC,IAAD,EAAOC,MAAA,GAASC,SAAhB,CAA2B;AAEpC,UAAKF,CAAAA,IAAL,GAAYA,IAAZ;AAEA,UAAKC,CAAAA,MAAL,GAAcA,MAAd;AAJoC;AAWtCE,YAAQ,EAAG;AACT,aAAQ,GAAE,IAAKC,CAAAA,iBAAL,EAAF,KACJ,IAAKH,CAAAA,MAAL,IAAeC,SAAf,GAA2B,IAAKD,CAAAA,MAAhC,GAAyC,GADrC,GAAR;AADS;AAUXG,qBAAiB,EAAG;AAClB,aAAQ,IAAKJ,CAAAA,IAAb;AACE,aAAKF,iBAAkBO,CAAAA,IAAKC,CAAAA,YAA5B;AACE,iBAAO,cAAP;AACF,aAAKR,iBAAkBO,CAAAA,IAAKE,CAAAA,oBAA5B;AACE,iBAAO,2BAAP;AACF,aAAKT,iBAAkBO,CAAAA,IAAKG,CAAAA,OAA5B;AACE,iBAAO,WAAP;AACF,aAAKV,iBAAkBO,CAAAA,IAAKI,CAAAA,aAA5B;AACE,iBAAO,uBAAP;AACF,aAAKX,iBAAkBO,CAAAA,IAAKK,CAAAA,UAA5B;AACE,iBAAO,YAAP;AACF;AACE,iBAAQ,wBAAuB,IAAKV,CAAAA,IAA5B,EAAR;AAZJ;AADkB;AA5BtB;AAkDA,QAAMK,OAAO,CAEXC,aAAc,CAFH,EAKXC,qBAAsB,CALX,EAQXC,QAAS,CARE,EAWXC,cAAe,CAXJ,EAcXC,WAAY,CAdD,CAAb;AAiBAC,SAAA,GAAUb,iBAAV;AACAa,SAAQN,CAAAA,IAAR,GAAeA,IAAf;AAlFA,SAAA,OAAA;AAAA,CAAA,CAAA;;",
"sources":["goog/module/moduleloadfailure.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The possible reasons for a module load failure callback being\n * fired. Moved to a separate file to allow it to be used across packages.\n */\n\ngoog.module('goog.module.ModuleLoadFailure');\ngoog.module.declareLegacyNamespace();\n\nclass ModuleLoadFailure {\n  /**\n   * @param {!ModuleLoadFailure.Type} type\n   * @param {number=} status Optional http error status associated with this\n   *     failure. This should be `undefined` if there was no associated http\n   *     error status (i.e. do not use values like -1).\n   */\n  constructor(type, status = undefined) {\n    /** @const {!ModuleLoadFailure.Type} */\n    this.type = type;\n    /** @const {number|undefined} */\n    this.status = status;\n  }\n\n  /**\n   * @return {string}\n   * @override\n   */\n  toString() {\n    return `${this.getReadableError_()} (${\n        this.status != undefined ? this.status : '?'})`;\n  }\n\n  /**\n   * Gets a human readable error message for a failure type.\n   * @return {string} The readable error message.\n   * @private\n   */\n  getReadableError_() {\n    switch (this.type) {\n      case ModuleLoadFailure.Type.UNAUTHORIZED:\n        return 'Unauthorized';\n      case ModuleLoadFailure.Type.CONSECUTIVE_FAILURES:\n        return 'Consecutive load failures';\n      case ModuleLoadFailure.Type.TIMEOUT:\n        return 'Timed out';\n      case ModuleLoadFailure.Type.OLD_CODE_GONE:\n        return 'Out of date module id';\n      case ModuleLoadFailure.Type.INIT_ERROR:\n        return 'Init error';\n      default:\n        return `Unknown failure type ${this.type}`;\n    }\n  }\n}\n\n/**\n * The possible reasons for a module load failure callback being fired.\n * @enum {number}\n */\nconst Type = {\n  /** 401 Status. */\n  UNAUTHORIZED: 0,\n\n  /** Error status (not 401) returned multiple times. */\n  CONSECUTIVE_FAILURES: 1,\n\n  /** Request timeout. */\n  TIMEOUT: 2,\n\n  /** 410 status, old code gone. */\n  OLD_CODE_GONE: 3,\n\n  /** The onLoad callbacks failed. */\n  INIT_ERROR: 4\n};\n\nexports = ModuleLoadFailure;\nexports.Type = Type;\n"],
"names":["goog","module","declareLegacyNamespace","ModuleLoadFailure","constructor","type","status","undefined","toString","getReadableError_","Type","UNAUTHORIZED","CONSECUTIVE_FAILURES","TIMEOUT","OLD_CODE_GONE","INIT_ERROR","exports"]
}
