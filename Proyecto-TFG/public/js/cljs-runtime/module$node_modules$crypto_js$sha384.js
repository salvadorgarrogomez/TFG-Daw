shadow$provide.module$node_modules$crypto_js$sha384 = function(global, require, module, exports) {
  (function(root, factory, undef) {
    "object" === typeof exports ? module.exports = exports = factory(require("module$node_modules$crypto_js$core"), require("module$node_modules$crypto_js$x64_core"), require("module$node_modules$crypto_js$sha512")) : "function" === typeof define && define.amd ? define(["./core", "./x64-core", "./sha512"], factory) : factory(root.CryptoJS);
  })(this, function(CryptoJS) {
    (function() {
      var C_x64 = CryptoJS.x64, X64Word = C_x64.Word, X64WordArray = C_x64.WordArray;
      C_x64 = CryptoJS.algo;
      var SHA512 = C_x64.SHA512;
      C_x64 = C_x64.SHA384 = SHA512.extend({_doReset:function() {
        this._hash = new X64WordArray.init([new X64Word.init(3418070365, 3238371032), new X64Word.init(1654270250, 914150663), new X64Word.init(2438529370, 812702999), new X64Word.init(355462360, 4144912697), new X64Word.init(1731405415, 4290775857), new X64Word.init(2394180231, 1750603025), new X64Word.init(3675008525, 1694076839), new X64Word.init(1203062813, 3204075428)]);
      }, _doFinalize:function() {
        var hash = SHA512._doFinalize.call(this);
        hash.sigBytes -= 16;
        return hash;
      }});
      CryptoJS.SHA384 = SHA512._createHelper(C_x64);
      CryptoJS.HmacSHA384 = SHA512._createHmacHelper(C_x64);
    })();
    return CryptoJS.SHA384;
  });
};

//# sourceMappingURL=module$node_modules$crypto_js$sha384.js.map
