{"version":3,"sources":["o2w/routes.cljs"],"mappings":"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","names":["o2w.routes/app-routes","reagent.core.atom","o2w.routes/app-views","o2w.routes/current-route","o2w.routes/default-view","o2w.routes/-default-language","o2w.routes/language","o2w.routes/-language?","o2w.routes/->slash","s","clojure.string/replace","o2w.routes/slash->","o2w.routes/query","reagent.ratom/make-reaction","cljs.core/deref","cljs.core.map","p__12696","vec__12697","cljs.core.nth","k","v","cljs.core.subs","cljs.core.into","o2w.routes/confirm?","o2w.routes/cms-routes","routes","i","o2w.routes/process-params","params","or__5002__auto__","current","cljs.core.merge","default?","cljs.core._EQ_","G__12700","cljs.core/not","cljs.core.dissoc","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","o2w.routes/url","p__12703","vec__12704","seq12701","G__12702","cljs.core/first","cljs.core/next","self__5711__auto__","name","query","params'","bide.core.resolve","o2w.routes/go","seq12707","G__12708","path","accountant.core.navigate_BANG_","cljs.core.apply","p__12709","map__12710","cljs.core/--destructure-map","cljs.core.get","o2w.routes/url-for","language","o2w.routes.url","o2w.routes/add-i18n","prefix","p__12711","vec__12712","route","o2w.routes/add-l18n","o2w.routes/with-prefix","p__12715","vec__12716","p__12719","map__12720","o2w.routes/default-nav-handler","router","on-change","default-language","on-change-language","language?","navigation?","vec__12721","vec__12724","hash","clojure.string.split","handler","route-params","bide.core/match","default-params","current-language","cljs.core.keyword","cljs.core/reset!","and__5000__auto__","old","G__12727","o2w.routes/default-path-exists?","o2w.routes/parse-routes","_routes","views","p1__12728#","cljs.core/PersistentVector","cljs.core/second","p1__12729#","cljs.core/PersistentHashMap","cljs.core/last","o2w.routes/confirm-route-change","nav-handler","token","js/window.history","G__12731","fexpr__12730","o2w.routes/dispatch-on-navigate","history","goog.events/listen","goog.history.EventType/NAVIGATE","e","p__12732","map__12733","o2w.routes/configure-navigation!","path-exists?","reload-same-path?","accountant.core/history","accountant.core/nav-handler","accountant.core/path-exists?","o2w.routes.helpers/prevent-reload-on-known-path","o2w.routes/on-navigate","p__12734","map__12735","o2w.routes/start!","not-found","vec__12736","bide.core/router","cljs.core.partial","accountant.core/dispatch-current!","o2w.routes/current-view","map__12739"],"sourcesContent":["(ns o2w.routes\n  (:require [accountant.core :as accountant]\n            [bide.core :as bide :refer [router match]]\n            [o2w.routes.helpers :refer [prevent-reload-on-known-path]]\n            [reagent.core :as r]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType]\n            [clojure.string :as str]))\n\n(def app-routes (r/atom [[]]))\n(def app-views (r/atom {}))\n(def current-route (r/atom {}))\n(def default-view (r/atom nil))\n(def -default-language (r/atom nil))\n(def language (r/atom nil))\n(def -language? (r/atom true))\n(defn ->slash [s] (str/replace s #\"--slash--\" \"/\"))\n(defn slash-> [s] (str/replace s #\"/\" \"--slash--\"))\n(def query (r/reaction (->> (:query @current-route)\n                            (map (fn [[k v]] [(subs (str k) 1) v]))\n                            (into {}))))\n\n(def confirm? (r/atom nil))\n\n(defn cms-routes [routes k]\n  (->> routes\n       (map (fn [i] [(str \"/\" i) k]))\n       (into [])))\n\n(defn process-params [params]\n  (let [params   (or params {})\n        current  (or @language @-default-language)\n        params   (merge {:language current} params)\n        default? (= (:language params) @-default-language)]\n\n    (cond-> params\n      (or default? (not @-language?)) (dissoc :language))))\n\n(defn url [name & [params query]]\n  (let [params' (process-params params)]\n    (bide/resolve @app-routes name params' query)))\n\n(defn go [path & params] (accountant/navigate! (apply url path params)))\n\n(defn url-for [{:keys [name params query]} language]\n  (url name (merge params {:language language}) query))\n\n(defn add-i18n [prefix routes]\n  (->> routes\n       (map (fn [[route k]] [(str \"/:language(\" prefix \")\" route) k]))\n       (into [])))\n\n(def add-l18n add-i18n)\n\n(defn with-prefix [prefix routes]\n  (->> routes\n       (map (fn [[route k]] [(str prefix route) k]))\n       (into [])))\n\n(defn- default-nav-handler [{:keys [router on-change default-language on-change-language language?]} path navigation?]\n  (let [[path hash]                  (str/split path #\"#\")\n        [handler route-params query] (match @router path)\n        default-params               {:language default-language}\n        route-params                 (merge default-params route-params)\n        current-language             (keyword (:language route-params))]\n\n    (reset! current-route {:path        path\n                           :name        handler\n                           :params      route-params\n                           :hash        hash\n                           :query       query\n                           :navigation? navigation?})\n\n    (when (and @-language? (not (= @language current-language)))\n      (let [old @language]\n        (reset! language current-language)\n        (when on-change-language (on-change-language current-language old))))\n\n    (when (and (not navigation?) on-change) (on-change @current-route))))\n\n(defn- default-path-exists? [routes path] (match @routes path))\n\n(defn- parse-routes [_routes views]\n  (if views\n    [_routes views]\n    (let [routes (->> _routes (map #(vector (first %) (second %))) (into []))\n          views  (->> _routes (map #(hash-map (second %) (last %))) (into {}))]\n      [routes views])))\n\n(defn confirm-route-change [nav-handler token navigation?]\n  (.replaceState js/window.history {} nil (:path @current-route))\n  (@confirm? #(do\n                (.replaceState js/window.history {} nil token)\n                (nav-handler token navigation?))))\n\n(defn- dispatch-on-navigate\n  [history nav-handler]\n  (events/listen\n    history\n    EventType/NAVIGATE\n    (fn [e]\n      (let [token       (.-token e)\n            navigation? (.-isNavigation e)]\n\n        (if @confirm?\n          (confirm-route-change nav-handler token navigation?)\n          (nav-handler token navigation?))))))\n\n(defn configure-navigation!\n  [{:keys [nav-handler path-exists? reload-same-path?]}]\n  (.setUseFragment accountant/history false)\n  (.setPathPrefix accountant/history \"\")\n  (.setEnabled accountant/history true)\n  (set! accountant/nav-handler nav-handler)\n  (set! accountant/path-exists? path-exists?)\n  (dispatch-on-navigate accountant/history nav-handler)\n  (prevent-reload-on-known-path accountant/history path-exists? reload-same-path?))\n\n(defn on-navigate [name params query]\n  (reset! current-route {:name   name\n                         :params params\n                         :query  query}))\n\n(defn start!\n  \"Configura las rutas de la app\"\n  [{:keys [routes nav-handler path-exists? not-found on-change views\n           default-language on-change-language language?]\n    :or   {nav-handler  default-nav-handler\n           path-exists? default-path-exists?\n           language?    true}}]\n\n  (reset! -default-language default-language)\n  (reset! -language? language?)\n  (when not-found (reset! default-view not-found))\n\n  (let [[routes views] (parse-routes routes views)]\n    (reset! app-routes (router routes))\n    (reset! app-views views)\n    (configure-navigation! {:nav-handler  (partial nav-handler {:router             app-routes\n                                                                :on-change          on-change\n                                                                :on-change-language on-change-language\n                                                                :default-language   default-language})\n                            :path-exists? (partial path-exists? app-routes)})\n    (accountant/dispatch-current!)))\n\n(defn current-view []\n  (let [{:keys [path name params query]} @current-route\n        handler                          (get @app-views name)]\n\n    (when path\n      (cond\n        handler       [handler @current-route params query]\n        @default-view [@default-view @current-route params query]))))\n"],"x_google_ignoreList":[0]}