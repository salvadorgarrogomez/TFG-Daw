{"version":3,"sources":["o2w/routes/helpers.cljs"],"mappings":"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","names":["o2w.routes.helpers/uri->query","uri","query","cljs.core/empty?","o2w.routes.helpers/uri->fragment","fragment","o2w.routes.helpers/get-href-attribute","node","and__5000__auto__","cljs.core._EQ_","js/Node.ELEMENT_NODE","o2w.routes.helpers/find-href-node","e","href","attrs","navigation-link?","cljs.core/not","temp__5804__auto__","parent","o2w.routes.helpers/prevent-reload-on-known-path","history","path-exists?","reload-same-path?","goog.events/listen","js/document","target","button","meta-key","alt-key","ctrl-key","shift-key","any-key","or__5002__auto__","href-node","link-target","js/goog.Uri","path","relative-href","title","host","port","current-host","js/window.location.hostname","current-port","js/window.location.port","loc","js/window.location","current-relative-href","fexpr__12252","cljs.core.not_EQ_","goog.events/dispatchEvent","js/goog.history.Event"],"sourcesContent":["(ns o2w.routes.helpers\n  (:require [clojure.string :as str]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType])\n  (:import goog.history.Event\n           goog.history.Html5History\n           goog.Uri))\n\n(defn- uri->query [uri]\n  (let [query (.getQuery uri)]\n    (when-not (empty? query)\n      (str \"?\" query))))\n\n(defn- uri->fragment [uri]\n  (let [fragment (.getFragment uri)]\n    (when-not (empty? fragment)\n      (str \"#\" fragment))))\n\n(defn- get-href-attribute\n  \"Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil.\"\n  [node]\n  (when (and node (= (.-nodeType node) js/Node.ELEMENT_NODE))\n    (.getAttribute node \"href\")))\n\n(defn- find-href-node\n  \"Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if\n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element.\"\n  [e]\n  (let [href             (get-href-attribute e)\n        attrs            (.-attributes e)\n        navigation-link? (and href attrs (-> attrs (aget \"data-trigger\") not))]\n    (if navigation-link?\n      e\n      (when-let [parent (.-parentNode e)]\n        (recur parent)))))\n\n(defn prevent-reload-on-known-path\n  \"Create a click handler that blocks page reloads for known routes\"\n  [history path-exists? reload-same-path?]\n  (events/listen\n   js/document\n   \"click\"\n   (fn [e]\n     (let [target                (.-target e)\n           button                (.-button e)\n           meta-key              (.-metaKey e)\n           alt-key               (.-altKey e)\n           ctrl-key              (.-ctrlKey e)\n           shift-key             (.-shiftKey e)\n           any-key               (or meta-key alt-key ctrl-key shift-key)\n           href-node             (find-href-node target)\n           href                  (when href-node (.-href href-node))\n           link-target           (when href-node (.-target href-node))\n           uri                   (.parse Uri href)\n           path                  (.getPath uri)\n           query                 (uri->query uri)\n           fragment              (uri->fragment uri)\n           relative-href         (str path query fragment)\n           title                 (.-title target)\n           host                  (.getDomain uri)\n           port                  (.getPort uri)\n           current-host          js/window.location.hostname\n           current-port          js/window.location.port\n           loc                   js/window.location\n           current-relative-href (str (.-pathname loc) (.-query loc) (.-hash loc))]\n       (when (and (not any-key)\n                  (#{\"\" \"_self\"} link-target)\n                  (= button 0)\n                  (= host current-host)\n                  (or (not port)\n                      (= (str port) (str current-port)))\n                  (path-exists? path))\n         (when (not= current-relative-href relative-href) ;; do not add duplicate html5 history state\n           3           (. history (setToken relative-href title)))\n         (.preventDefault e)\n         (when reload-same-path?\n           (events/dispatchEvent history (Event. path true))))))))\n"],"x_google_ignoreList":[0]}