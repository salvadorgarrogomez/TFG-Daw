{
"version":3,
"file":"module$node_modules$crypto_js$sha3.js",
"lineCount":115,
"mappings":"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",
"sources":["node_modules/crypto-js/sha3.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_js$sha3\"] = function(global,require,module,exports) {\n;(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    var tMsw;\n\t                    var tLsw;\n\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","undef","define","amd","CryptoJS","Math","C_lib","lib","WordArray","Hasher","X64Word","x64","Word","C_algo","algo","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","x","y","t","newY","LFSR","i","j","roundConstantLsw","roundConstantMsw","bitPosition","create","T","SHA3","extend","cfg","outputLength","_doReset","state","_state","init","blockSize","_doProcessBlock","M","offset","nBlockSizeLanes","M2i","M2i1","lane","high","low","round","tLsw","tMsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","_doFinalize","data","_data","dataWords","words","nBitsLeft","sigBytes","blockSizeBits","ceil","length","_process","outputLengthBytes","outputLengthLanes","hashWords","push","clone","call","slice","_createHelper","HmacSHA3","_createHmacHelper"]
}
